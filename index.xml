<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog by Frank</title><link>https://yongfrank.github.io/</link><description>Recent content on Blog by Frank</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Apr 2023 15:40:25 +0800</lastBuildDate><atom:link href="https://yongfrank.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Accelerator April Shanghai</title><link>https://yongfrank.github.io/posts/accelerator-shanghai/</link><pubDate>Tue, 18 Apr 2023 15:40:25 +0800</pubDate><guid>https://yongfrank.github.io/posts/accelerator-shanghai/</guid><description>SwiftUI Layout and rendering Luo Shuang Layout by Harry Ng, Sorted Sorted 3 by Harry Ng
ViewThatFits AnyLayout SwiftUI and UIKit Interaction by Harry Ng, Sorted UIViewRepresentable Performance Hitches
SwiftUI Fast Design by @hzlzh @hzlzh at twitter
MVVM Details polishing - Always on Display LazyVGrid ScrollViewReader import WeatherKit - SF Symbols import MusicKit &amp;amp; HealthKit WKWebView - Notion Advertisement SDK AVKit Multi-language: twitter = weibo AIGC - ChatGPT, Copilot for Xcode Marketing Skills TestFlight, Media, App Store, PressKit, contact in App KOL Crisp, WeCom Iteration: meet customers&amp;rsquo; requirements daily operations: ChatGPT bot webpage footer - traffic acquisition SwiftUI Mac App by Justin Yan Elepic</description></item><item><title>Comparison of Swift and Objc</title><link>https://yongfrank.github.io/posts/comparison-of-swift-and-objc/</link><pubDate>Mon, 17 Apr 2023 15:47:55 +0800</pubDate><guid>https://yongfrank.github.io/posts/comparison-of-swift-and-objc/</guid><description>block and closure Objective-C中的Block和Swift中的闭包（Closure）都是一种匿名函数，可以作为参数传递给其他函数或者在函数内部定义。但它们在语法和使用上存在一些区别。
语法 Objective-C的Block使用^运算符来定义，后面跟着参数列表和函数体，例如：
void (^myBlock)(void) = ^{ NSLog(@&amp;#34;Hello, world!&amp;#34;); }; Swift的闭包使用{}来定义，参数列表和函数体在{}中定义，例如：
let myClosure: () -&amp;gt; Void = { print(&amp;#34;Hello, world!&amp;#34;) } 捕获变量 Objective-C的Block可以捕获外部变量并在函数内部使用，例如：
NSString *message = @&amp;#34;Hello, world!&amp;#34;; void (^myBlock)(void) = ^{ NSLog(@&amp;#34;%@&amp;#34;, message); }; Swift的闭包也可以捕获外部变量，但是需要显式地声明捕获变量，并且可以指定捕获方式，例如：
let message = &amp;#34;Hello, world!&amp;#34; let myClosure: () -&amp;gt; Void = { [message] in print(message) } 内存管理 Objective-C的Block需要手动管理内存，因为Block在创建时会捕获外部变量并将其包含在Block中。如果Block被复制到堆上，则需要使用__block修饰符来解决循环引用的问题。
Swift 的闭包使用捕获列表来捕获外部变量，并且自动管理内存。如果闭包被捕获并持有了一个对象，只要闭包存在，这个对象就会被保持在内存中。
总之，Objective-C的Block和Swift的闭包都是一种函数式编程的重要工具，可以用于编写更加简洁、灵活的代码。但是它们在语法和使用上存在一些区别，需要开发者根据实际情况进行选择和使用。</description></item><item><title>Swift Package Manager</title><link>https://yongfrank.github.io/posts/swift-package-manager/</link><pubDate>Sat, 15 Apr 2023 22:26:47 +0800</pubDate><guid>https://yongfrank.github.io/posts/swift-package-manager/</guid><description>.swiftpm Swift Playgrounds App Projects
// swift-tools-version: 5.7 // WARNING: // This file is automatically generated. // Do not edit it by hand because the contents will be replaced. import PackageDescription import AppleProductTypes let package = Package( name: &amp;#34;Regex Go&amp;#34;, platforms: [ .iOS(&amp;#34;16.0&amp;#34;) ], products: [ .iOSApplication( name: &amp;#34;YOUR-APP-NAME&amp;#34;, targets: [&amp;#34;AppModule&amp;#34;], bundleIdentifier: &amp;#34;YOUR-BUNDLE-IDENTIFIER&amp;#34;, teamIdentifier: &amp;#34;YOUR-TEAM-Identifier&amp;#34;, displayVersion: &amp;#34;1.0&amp;#34;, bundleVersion: &amp;#34;1&amp;#34;, appIcon: .asset(&amp;#34;AppIcon&amp;#34;), accentColor: .asset(&amp;#34;AccentColor&amp;#34;), supportedDeviceFamilies: [ .pad, .phone ], supportedInterfaceOrientations: [ .</description></item><item><title>Mac Hint</title><link>https://yongfrank.github.io/posts/mac-hint/</link><pubDate>Fri, 14 Apr 2023 16:50:52 +0800</pubDate><guid>https://yongfrank.github.io/posts/mac-hint/</guid><description>Storage Reclaiming storage/space from &amp;lsquo;System Data&amp;rsquo; in macOS: A tutorial on understanding the System Data usage.
mac 系统数据 100 多 G 了，有什么清理的办法吗？
看到你有 Xcode 。那么推荐你先试试八爷开发的 Cleaner For Xcode 。另外，一般的清理也可以使用 Disk Drill 以及 Cleaner One Pro ，这两个的免费版就足够使用了。
Search Result with V2EX and google
Mac Keyboard mac按键难回弹（按下去软软的）
原因
一般是键盘里面有一些东西塞住了。
操作
以按键A为例，把键盘与桌面垂直放着（左侧电源插孔朝着桌面），然后不断去按A键， 如果这个方向不行，换另一侧，即把键盘放置成耳机孔朝着桌面的方向，再去按A键 按的时候看手感，差不多就行</description></item><item><title>Streaming Media</title><link>https://yongfrank.github.io/posts/streaming-media/</link><pubDate>Sat, 08 Apr 2023 23:50:40 +0800</pubDate><guid>https://yongfrank.github.io/posts/streaming-media/</guid><description>五种常见流媒体协议
流媒体（streaming media）是指将一连串数据压缩后，经过网络分段发送，即时传输以供观看音视频的一种技术。
通过使用 streaming media 技术，用户无需将文件下载到本地即可播放。由于媒体是以连续的数据流发送的，因此在媒体到达时即可播放。可以像下载的文件一样进行暂停、快进或后退操作。
在这篇文章中，首先将说明什么是 video streaming protocol；其次会讨论流协议（streaming protocl）和编解码器之间的区别；最后，将介绍五种常见的流协议。</description></item><item><title>iOS Memory Mamagement</title><link>https://yongfrank.github.io/posts/ios-memory-mamagement/</link><pubDate>Sat, 08 Apr 2023 23:29:01 +0800</pubDate><guid>https://yongfrank.github.io/posts/ios-memory-mamagement/</guid><description>iOS Memory Mgmt / ARC iOS-[内存管理]
在 Objective-C 中，“对象” 相当于办公室里的照明设备。在现实世界中办公室里的照明设备只有一个，但在 Objective-C 的世界里，虽然计算机的资源有限，但一台计算机可以同时处理好几个对象。
此外，“对象的使用环境” 相当于上班进入办公室的人。虽然这里的 “环境” 有时也指在运行中的程序代码、变量、变量作用域、对象等，但在概念上就是使用对象的环境。上班进入办公室的人对办公室照明设备发出的动作，与 Objective-C 中的对应关系则如下表所示
使用弱引用来避免 Retain Cycles retain对象会创建对该对象的强引用（即引用计数 +1）。一个对象在release它的所有强引用之后（即引用计数 =0）才会dealloc。如果两个对象相互retain强引用，或者多个对象，每个对象都强引用下一个对象直到回到第一个，就会出现 “Retain Cycles（循环引用）” 问题。循环引用会导致它们中的任何对象都无法dealloc，就产生了内存泄漏。
举个例子，Document 对象中有一个属性 Page 对象，每个 Page 对象都有一个属性，用于存储它所在的 Document。如果 Document 对象具有对 Page 对象的强引用，并且 Page 对象具有对 Document 对象的强引用，则它们都不能被销毁。
“Retain Cycles” 问题的解决方案是使用弱引用。弱引用是非持有关系，对象do not retain它引用的对象。
ARC新规则 ARC会分析对象的生存期需求，并在编译时自动插入适当的内存管理方法调用的代码，而不需要你记住何时使用retain、release、autorelease方法。编译器还会为你生成合适的dealloc方法。一般来说，如果你使用ARC，那么只有在需要与使用MRC的代码进行交互操作时，传统的 Cocoa 命名约定才显得重要。
ARC引入了一些在使用其他编译器模式时不存在的新规则。这些规则旨在提供完全可靠的内存管理模型。有时候，它们直接地带来了最好的实践体验，也有时候它们简化了代码，甚至在你丝毫没有关注内存管理问题的时候帮你解决了问题。在ARC下必须遵守以下规则，如果违反这些规则，就会编译错误。
不能使用 retain / release / retainCount / autorelease 不能使用 NSAllocateObject / NSDeallocateObject 须遵守内存管理的方法命名规则 不能显式调用 dealloc 使用 @autoreleasepool 块替代 NSAutoreleasePool 不能使用区域（NSZone） 对象型变量不能作为 C 语言结构体（struct / union）的成员 显式转换 “id” 和 “void *” —— 桥接 代码示例中，我们创建了一个 ViewController 类，并使用 ARC 管理内存。我们在 ViewController 中创建了一个 UIView 对象，并将其存储在强引用变量中，以便我们可以访问和使用它。我们还创建了一个方法 createSubview，在其中创建了另一个 UIView 对象，并将其存储在弱引用变量中。在方法结束时，该对象将被释放，因为没有强引用变量引用它。</description></item><item><title>Diary</title><link>https://yongfrank.github.io/diary/</link><pubDate>Sat, 08 Apr 2023 15:11:23 +0800</pubDate><guid>https://yongfrank.github.io/diary/</guid><description>Week 15 4/10 - 4/16 Mon Tue Wed Debug for Community Thu KickOff for Platform [Offer 25: Merge Ascending List] [Offer 26: Sub Structure of a tree] [Offer 27: Mirror Tree]
Week 14 4/3 - 4/9 Mon Objc - Hot Discussion Qingming Festival on Wed Tue, Thu - DSL Platform Fri - DSL Community Objc Fix leetcode * 2 Week 13 3/27 - 4/2 Mon - Fri Objc Quickstart &amp;amp; Hot Discussion Sat - Google Flutter Forward Extended Shanghai Week 12 3/20 - 3/26 Mon - Fri DSL Platform: Cycling Challenge, Ebike Icon Week 11 3/13 - 3/19 Flexbox, Facebook/Yoga, DSL, Python Week 10 3/6 - 3/12 ActivityKit &amp;amp; WidgetKit &amp;amp; Orientation</description></item><item><title>Thread</title><link>https://yongfrank.github.io/posts/thread/</link><pubDate>Sat, 08 Apr 2023 14:58:09 +0800</pubDate><guid>https://yongfrank.github.io/posts/thread/</guid><description>Thread Safety 确保线程安全的几种方法</description></item><item><title>Blog Bookmark</title><link>https://yongfrank.github.io/posts/blog-bookmark/</link><pubDate>Sat, 08 Apr 2023 14:53:56 +0800</pubDate><guid>https://yongfrank.github.io/posts/blog-bookmark/</guid><description>Personal Experience 周兆熊: 从高考到程序员&amp;mdash;一个五年程序员的回忆及建议 Careers 周兆熊: 求职简历中一些常见的问题 Tech iOS @pro648: iOS 学习进程中的demo汇总 @pro648: iOS 学习进程中遇到的知识点 Albert_Duan: iOS 在苹果加速器活动做的 SwiftUI 开发分享 Better Markdown Rendering in SwiftUI tiny66</description></item><item><title>Swift Snippet</title><link>https://yongfrank.github.io/posts/swift-snippet/</link><pubDate>Sat, 08 Apr 2023 11:44:42 +0800</pubDate><guid>https://yongfrank.github.io/posts/swift-snippet/</guid><description>Swift Intro Swift&amp;mdash;一门智能型的编程语言
Common Problem safe subsript 5 个让 Swift 更优雅的扩展——Pt.1 Swift 经常数组越界？教你一招，一劳永逸的解决数组越界的问题
extension Array { subscript (safe index: Int) -&amp;gt; Element? { guard index &amp;gt;= 0 &amp;amp;&amp;amp; index &amp;lt; self.count else { return nil } return self[index] } } values[safe: 2] // &amp;#34;C&amp;#34; values[safe: 3] // nil UIKit Preview UIKit Preview
import UIKit class ViewController: UINavigationController { override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view.</description></item><item><title>SwiftUI Example</title><link>https://yongfrank.github.io/posts/swiftui/</link><pubDate>Mon, 03 Apr 2023 01:39:20 +0800</pubDate><guid>https://yongfrank.github.io/posts/swiftui/</guid><description>SwiftUI by Example SwiftUI 参考手册 Working with static text (Laying out text neatly) hws - How to add advanced text styling using AttributedString hws - How to render Markdown content in text Using Markdown in SwiftUI AttributedString struct ContentView: View { private var content: String? { try? String( contentsOf: Bundle.main.url(forResource: &amp;#34;README&amp;#34;, withExtension: &amp;#34;md&amp;#34;)! ) } var txt: AttributedString { var text = try! AttributedString(markdown: &amp;#34;_Hamlet_ by William Shakespeare **Text in bold**&amp;#34;) if let range = text.</description></item><item><title>Combine</title><link>https://yongfrank.github.io/posts/combine/</link><pubDate>Mon, 03 Apr 2023 00:34:18 +0800</pubDate><guid>https://yongfrank.github.io/posts/combine/</guid><description>Sink // 每秒增加 10 % 进度条的代码 import Combine import Foundation @MainActor public class RegularExpressionModel: ObservableObject { @Published var progress = 0.0 private var cancellable: AnyCancellable? init() { startProgressUpdate() } private func startProgressUpdate() { cancellable = Timer.publish(every: 1, on: .main, in: .common) .autoconnect() .sink { [weak self] _ in self?.updateProgress() } } private func updateProgress() { progress += 0.1 if progress == 1.0000 { cancellable?.cancel() } } deinit { cancellable?.cancel() } } 在英语中，sink 这个词有许多不同的意思，包括“水槽”，“下沉”，“降低”，“沉没”等等。在 Combine 框架中，sink 表示订阅者将从源发布者接收新的事件，并执行一个闭包，因此，我们可以将 sink 视为一个“接收器”，用于接收流中的新值并进行后续处理。这个单词可能被用来表示值“下沉”或“降低”到更低级别的代码中进行处理，或者表示订阅者正在“吸收”发布者发出的事件。在 Combine 中，sink 是订阅一个发布者的一种方式，因此这个术语可能也反映了这一点，即“吸收”或“消耗”流中的事件。</description></item><item><title>Performance of Higher Order Functions in Swift</title><link>https://yongfrank.github.io/posts/performance-of-higher-order-functions/</link><pubDate>Sun, 02 Apr 2023 14:23:01 +0800</pubDate><guid>https://yongfrank.github.io/posts/performance-of-higher-order-functions/</guid><description>Why do I compose this article? Leetcode algorithm problems Swift Language Article by skoumal Performance of built-in higher-order functions Map, Filter, Reduce, and flatMap vs. for-in loop in Swift
The most popular higher-order functions are map, filter, and reduce. We all use them since we think that syntax is much better and it is even faster to write them than the old way for-in loop. But is it really true? Have you ever thought about the performance of these built-in functions?</description></item><item><title>App Store Connect</title><link>https://yongfrank.github.io/posts/app-store-connect/</link><pubDate>Thu, 30 Mar 2023 00:12:53 +0800</pubDate><guid>https://yongfrank.github.io/posts/app-store-connect/</guid><description>App Store Connect Statistics Impressions: The number of times the application was displayed on the App Store. App Units: The number of times the application was downloaded within a specific time period. Proceeds: The total revenue generated by the application within a specific time period. Sessions Opt-in Only: The number of times the application was opened within a specific time period (only calculated if the user opts-in to data analytics). Crashes Opt-in Only: The number of times the application crashed within a specific time period (only calculated if the user opts-in to data analytics).</description></item><item><title>Objc Snippet</title><link>https://yongfrank.github.io/posts/objc-snippet/</link><pubDate>Wed, 29 Mar 2023 21:18:40 +0800</pubDate><guid>https://yongfrank.github.io/posts/objc-snippet/</guid><description>Type unsafe isEqual isEqualTo OC底层原理之isEqual isEqual NSLog(@&amp;#34;%d&amp;#34;, false == 0); NSLog(@&amp;#34;%d&amp;#34;, nil == 0); NSLog(@&amp;#34;%d&amp;#34;, 0 == 0); NSLog(@&amp;#34;%d&amp;#34;, [false isEqual:0]); if (nil == 0) { NSLog(@&amp;#34;equal&amp;#34;); } Class in Objective-C Apple Developer: Programming With Objective-C Apple Developer: Start Developing Mac Apps Today QuickStart @interface Person : NSObject @property (nonatomic, strong) NSString *name; @property (nonatomic, assign) NSInteger age; @property (nonatomic, assign) int birthYear; - (instancetype)initWithName:(NSString *)name age:(NSInteger)age; - (void)sayHello; @end @implementation Person @synthesize birthYear; - (instancetype)initWithName:(NSString *)name age:(NSInteger)age { self = [super init]; if (self) { _name = name; _age = age; } return self; } - (void)sayHello { NSLog(@&amp;#34;Hello, my name is %@ and I am %ld years old.</description></item><item><title>SpriteKit</title><link>https://yongfrank.github.io/posts/spritekit/</link><pubDate>Wed, 29 Mar 2023 01:36:34 +0800</pubDate><guid>https://yongfrank.github.io/posts/spritekit/</guid><description>import SpriteKit import GameplayKit class GameScene: SKScene { override func didMove(to view: SKView) { let background = SKSpriteNode(imageNamed: &amp;#34;background&amp;#34;) // https://developer.apple.com/design/human-interface-guidelines/foundations/layout#platform-considerations // Remember, unlike UIKit SpriteKit positions things based on their center // – i.e., the point 0,0 refers to the horizontal and vertical center of a node. // iPad mini screen size: 1024x768 // var position: CGPoint { get set } .position The default value is (0.0,0.0). background.position = CGPoint(x: 512, y: 384) // The blend mode used to draw the sprite into the parent’s framebuffer.</description></item><item><title>Xcode IDE</title><link>https://yongfrank.github.io/posts/xcode-ide/</link><pubDate>Mon, 27 Mar 2023 21:31:43 +0800</pubDate><guid>https://yongfrank.github.io/posts/xcode-ide/</guid><description>Xcode History Xcode是如何诞生的？How did Xcode come into being Xcode是一款用于开发Mac和iOS应用程序的综合性开发工具，它由苹果公司开发和维护。Xcode最初的版本于2003年发布，自那时以来，它已经成为Mac和iOS开发的标准工具之一。
Xcode的诞生可以追溯到1997年，当时苹果计算机公司正在寻求一款更好的工具来开发它的操作系统和应用程序。此时，苹果正在使用CodeWarrior和MPW等开发工具，但它们并不完全满足苹果的需求。
苹果的开发团队决定开发一款自己的集成开发环境（IDE），旨在更好地支持苹果的开发工作流程。于是，在1997年，苹果成立了一个名为Project Builder的团队，该团队的任务是开发一款全新的IDE。
Project Builder最初基于NeXTSTEP操作系统的工具，但随着苹果收购NeXT，它也开始使用Mac OS X技术。2003年，苹果发布了Xcode 1.0版本，这是一款全新的IDE，它汇集了Project Builder和一些其他开发工具的功能。随着时间的推移，Xcode的版本不断更新和改进，逐渐成为苹果开发的标准工具。
今天，Xcode仍然是苹果开发应用程序的主要工具之一。它提供了一个综合性的工作环境，支持多种编程语言和开发框架，帮助开发人员更快、更高效地开发和部署应用程序。
LLVM和Clang背后的故事 Story of LLVM &amp;amp; Clang LLVM是Apple官方支持的编译器，而该编译器的前端是Clang，这两个工具都被集成到了Xcode里面。在这篇文章中，我们来了解一下LLVM和Clang背后的故事。
此外，Clang有一个重要的衍生项目是静态分析工具，能够通过自动分析程序的逻辑，在编译时就找出程序可能的bug，这个功能叫做ARC。ARC的实现让当时的广大开发者们大为惊愕。
除了LLVM核心和Clang以外，LLVM还包括一些重要的子项目，比如一个原生支持调试多线程程序的调试器LLDB和一个C++的标准库libstdc++。不光是Apple，很多的项目和编程语言都从LLVM中取得了关键性的技术。
苹果用户界面Aqua背后的故事
IDE Tutorials Xcode 6 Articles: Shortcut &amp;hellip; Xcode overview Mark Tricks Xcode Mark //TODO: — Make your notes on Xcode stand out Xcode中那些让人焕然一新的特殊注释#pragma mark、TODO、FIXME、MARK TODO: Mark a task that needs to be done, using the format: // TODO: FIXME: Mark a bug that needs to be fixed, using the format: // FIXME: !</description></item><item><title>UIKit Intro in Objective-C &amp; Swift</title><link>https://yongfrank.github.io/posts/uikit-intro/</link><pubDate>Mon, 27 Mar 2023 13:31:46 +0800</pubDate><guid>https://yongfrank.github.io/posts/uikit-intro/</guid><description>hws - UIKit Example Code
QuickStart Create a UIButton in Code with Objective-C Button // in file ViewController.m - (void)viewDidLoad { [super viewDidLoad]; UIButton *button = [UIButton buttonWithType: UIButtonTypeSystem]; [button setTitle:@&amp;#34;Press Me&amp;#34; forState:UIControlStateNormal]; [button sizeToFit]; // Set a new (x,y) point for the button&amp;#39;s center button.center = CGPointMake(320 / 2, 60); // Add an action in current code file (i.e. target) [button addTarget:self action:@selector(buttonPressed:） forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button]; } - (void)buttonPressed:(UIButton *)button { NSLog(@&amp;#34;Button Pressed&amp;#34;); } Protocol &amp;amp; UICollectionView [OC] UIcollectionView and UIcollectionViewCell [Swift] UICollectionView data source and delegates 纯代码创建UICollectionView步骤以及简单使用 // ViewController.</description></item><item><title>Singleton and Data Design in Swift / SwiftUI</title><link>https://yongfrank.github.io/posts/singleton-in-swift/</link><pubDate>Sat, 25 Mar 2023 01:39:04 +0800</pubDate><guid>https://yongfrank.github.io/posts/singleton-in-swift/</guid><description>Swift Class vs Struct, which is better for Model Design // using struct。 var herDog = Dog() { // if herDog is changed, print message. didSet { print(&amp;#34;Her dog is changed!&amp;#34;) } } herDog.name = &amp;#34;Starlord&amp;#34; // Her dog is changed! // using class。 var herCat = Cat() { didSet { print(&amp;#34;Her cat is changed!&amp;#34;) } } herCat.name = &amp;#34;Mumu&amp;#34; // No print message. 有了以上這些資訊，我們可以推導出，文件 Document 最好用 class 來寫。怎麼說呢？首先，文件必須要有一個持續存在的實體，如此才能夠隨時通知 controller 資料的變動，並且進行非同步或甚至自動的資料更新。這點 struct 與 class 都辦得到：</description></item><item><title>Facebook Yoga / Flexbox</title><link>https://yongfrank.github.io/posts/facebook-flexbox/</link><pubDate>Fri, 24 Mar 2023 13:02:13 +0800</pubDate><guid>https://yongfrank.github.io/posts/facebook-flexbox/</guid><description>Repository on GitHub By facebook Layout Yoga / Flexbox Juejin
Yoga 是基于 Flexbox 的，也有一些不同。
Yoga 并没有实现全部 CSS Flexbox。
它省略了非布局属性，如设置颜色。
Yoga 改进了一些 Flexbox 的属性来提供更好的从右到左的支持。
最后，Yoga 增加了一个新的比例（AspectRatio）属性来处理在布置某些元素如图片时常见的需求
Reference Yoga doc Yoga Tutorial: Using a Cross-Platform Layout Engine zh - Yoga Tutorial: Using a Cross-Platform Layout Engine zh - Yoga - Cross-platform engine zh - Yoga Android</description></item><item><title>Docker Getting Started</title><link>https://yongfrank.github.io/posts/docker-getting-started/</link><pubDate>Tue, 21 Mar 2023 13:19:38 +0800</pubDate><guid>https://yongfrank.github.io/posts/docker-getting-started/</guid><description># 运行以下命令在 Docker 容器中克隆 GitHub 仓库： # 该命令的含义是，以 alpine/git 镜像为基础， # 启动一个名为 repo 的容器，并在容器内执行 git clone 命令， # 将 https://github.com/docker/getting-started.git 仓库克隆到当前目录下的 . 文件夹中。 docker run --name repo alpine/git clone https://github.com/docker/getting-started.gited/ . # 然后，运行以下命令将克隆的代码复制到本地文件系统中： # 该命令的含义是，将名为 repo 的容器中 /git/getting-started/ # 文件夹下的所有文件和子文件夹复制到当前目录下。 docker cp repo:/git/getting-started/ . docker run -d -p 80:80 docker/getting-started # You&amp;#39;ll notice a few flags being used. Here&amp;#39;s some more info on them: # -d - run the container in detached mode (in the background) # -p 80:80 - map port 80 of the host to port 80 in the container # docker/getting-started - the image to use Dockerfile Dockerfile for Dev FROM ubuntu LABEL org.</description></item><item><title>Clash &amp; Config File</title><link>https://yongfrank.github.io/posts/clash-config-file/</link><pubDate>Mon, 20 Mar 2023 10:26:07 +0800</pubDate><guid>https://yongfrank.github.io/posts/clash-config-file/</guid><description>infrastructure port hosts dns mode: Rule proxies: proxy name, server, Password proxies-groups: name, type, proxies rules: Match RULE, DOMAIN, Request Rule port: 7890 socks-port: 7891 redir-port: 7892 mixed-port: 7893 allow-lan: false mode: Rule log-level: info ipv6: false hosts: services.googleapis.cn: 142.250.196.131 www.google.cn: 142.250.196.131 external-controller: 0.0.0.0:9090 clash-for-android: append-system-dns: false profile: tracing: true experimental: sniff-tls-sni: true dns: enable: true listen: 127.0.0.1:8853 default-nameserver: - 223.5.5.5 - 8.8.4.4 ipv6: false enhanced-mode: fake-ip fake-ip-filter: {- &amp;#34;*.lan&amp;#34;} nameserver: {- &amp;#34;114.</description></item><item><title>Azure VPS</title><link>https://yongfrank.github.io/posts/azure-vps/</link><pubDate>Sat, 18 Mar 2023 20:46:20 +0800</pubDate><guid>https://yongfrank.github.io/posts/azure-vps/</guid><description>ssh-keygen SSH keygen for passwordless login is based on the principles of public-key cryptography and key authentication mechanism. In SSH passwordless login, a pair of keys, including a public key and a private key, needs to be generated. The private key is stored on the local host, while the public key can be shared between the local host and the remote server.
SSH 免密登录的原理基于公钥密码学和密钥认证机制。在 SSH 免密登录中，需要生成一对密钥，分别是公钥和私钥。私钥存储在本地主机上，而公钥则可以在本地主机和远程服务器之间共享。
In SSH passwordless login, the user first needs to generate a pair of keys on the local host and then copy the public key to the remote server.</description></item><item><title>ActivityKit &amp; WidgetKit on iOS</title><link>https://yongfrank.github.io/posts/activitykit-and-widgetkit/</link><pubDate>Mon, 13 Mar 2023 17:23:10 +0800</pubDate><guid>https://yongfrank.github.io/posts/activitykit-and-widgetkit/</guid><description>My apps were featured on the App Store a few times during the year because of lock screen widgets. Check my guide on lock screen widgets if you still don&amp;rsquo;t have them in your app. twitter
Live Activity 相关限制 iOS 16.1 及以上 更新动态数据大小不能超过 4KB 只能在应用处于前台时从应用启动 LiveActivity。但是，可以在应用程序在后台运行时从应用程序更新或结束实时活动——例如，使用 Background Task。 生命周期与约束 利用 Live Activities 显示实时数据 与 Widget 相比，实时活动使用不同的机制来接收更新。Live Activities 不是使用时间轴机制，而是使用 ActivityKit 从您的应用程序接收更新的数据，并通过 ActivityKit push notifications 远程接收。
Live Activities use a different mechanism to receive updates compared to widgets.</description></item><item><title>UIImagePickerController in UIKit</title><link>https://yongfrank.github.io/posts/uiimage-picker-controller-uikit/</link><pubDate>Fri, 03 Mar 2023 11:43:07 +0800</pubDate><guid>https://yongfrank.github.io/posts/uiimage-picker-controller-uikit/</guid><description>Keyword UIImagePickerController NSObject UIImagePickerController &amp;amp; PHPickerViewController Reference: JianShu
如何在 iOS 14 中使用新推出的 PhotoKit 框架中的 PHPickerViewController 类，并通过 Objective C 和Swift 语言从照片库中选择照片。
多年来，在 iOS 上选择照片和视频的最简单方法是使用 UIImagePickerController 类。该类允许你呈现一个内置的系统 UI 来选择照片或视频，并将其返回到你的应用程序中，而无需构建选择照片的 UI 页面或访问照片库的提示。
然而，UIImagePickerController 也有很多缺点：它相当基础，而且呈现给用户浏览照片库的 UI 也非常有限；一次只能选择一个（图片或者视频），而且只支持基本的过滤功能。在 iOS 14 中，UIImagePickerController 被 &amp;ldquo;软废弃 &amp;ldquo;了。虽然目前还没有被标记为废弃，但如果你看一下头文件，就会发现 API 标记有这个
API_TO_BE_DEPRECATED
iOS 14 中新的 PHPicker 类不是在 UIKit 框架中的，而是位于 PhotosUI 框架中
Navigation Button &amp;amp; Function for selection // inside viewDidLoad self.navigationItem.leftBarButtonItem = UIBarButton(barButtonSystemItem: .add, target: self, action: #selector(addNewPerson)) // inside class like ViewController @objc func addNewPerson() { // @MainActor class UIImagePickerController : UINavigationController let picker = UIImagePickerController() picker.</description></item><item><title>Welcome 😀</title><link>https://yongfrank.github.io/about/</link><pubDate>Thu, 02 Mar 2023 11:20:03 +0800</pubDate><guid>https://yongfrank.github.io/about/</guid><description>👋 Hello, I&amp;rsquo;m Frank, also known as @yongfrank on GitHub. 👀 I&amp;rsquo;m passionate about programming. 🌱 Currently, I&amp;rsquo;m learning Swift, C/C++, Python, HTML/CSS/JavaScript. 📫 You can reach me on Twitter. My Project Oh My Flag - Open Source App on the GitHub Video Link: Twitter
Swift Student Challenge - WWDC22 on Twitter
Oh My Flag Walk Through
The App Oh My Flag helps students get familiar with flags. It is both educating and entertaining with the design of multi-module and interactive tasks.</description></item><item><title>断舍离</title><link>https://yongfrank.github.io/second-hand/</link><pubDate>Thu, 02 Mar 2023 11:13:42 +0800</pubDate><guid>https://yongfrank.github.io/second-hand/</guid><description>更新时间 2022-09-25 10:31:48
联系方式 绿色软件: Y3lvbmdmcmFuaw==
Telegram: https://t.me/heindelssohn
杭州自提优先
闲置区域 名称 配置详情 价格 备注 状态 iPhone 13 Pro Max 银色 256G + 衫绿色 Leather Case，保修到 2022/11/26 7200 闲鱼链接 售出 Apple Watch S7 45mm GPS 版本，星光色铝金属 + Nike 运动表带，保修到 2022/12/25 2500 闲鱼链接 售出 AirPods Pro 1 全新未拆封 1200 闲鱼链接 售出 iPad 9 无线局域网机型，全新未拆封，256G 3400 闲鱼链接 售出 合租区域 名称 详情 价格 备注 状态 Microsoft 365 CN 45 / 年 Disney+ 美区 30 / 季度 长期合租</description></item><item><title>Hugo Init</title><link>https://yongfrank.github.io/posts/hugo-init/</link><pubDate>Thu, 02 Mar 2023 11:06:36 +0800</pubDate><guid>https://yongfrank.github.io/posts/hugo-init/</guid><description>Init hugo site Hugo Article Hugo Host on GitHub Article Install Hugo brew install hugo hugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke echo &amp;#34;theme = &amp;#39;ananke&amp;#39;&amp;#34; &amp;gt;&amp;gt; config.toml hugo server hugo new posts/my-first-post.md hugo server Update config.toml baseURL = &amp;#39;http://example.org/&amp;#39; languageCode = &amp;#39;en-us&amp;#39; title = &amp;#39;My New Hugo Site&amp;#39; theme = &amp;#39;ananke&amp;#39; GitHub Action Create a file in .github/workflows/gh-pages.yml
name: github pages on: push: branches: - main # Set a branch that will trigger a deployment pull_request: jobs: deploy: runs-on: ubuntu-22.</description></item><item><title>New Blog Site, Hugo, Publish</title><link>https://yongfrank.github.io/posts/new-blog-site/</link><pubDate>Thu, 02 Mar 2023 10:52:24 +0800</pubDate><guid>https://yongfrank.github.io/posts/new-blog-site/</guid><description>Reference iOS DEVELOPER WRITER. SPEAKER.</description></item><item><title>Hugo Test</title><link>https://yongfrank.github.io/posts/pogo-test/</link><pubDate>Mon, 27 Feb 2023 21:20:44 +0800</pubDate><guid>https://yongfrank.github.io/posts/pogo-test/</guid><description>Hello world This is Frank&amp;rsquo;s first post.
Introduction This is bold text, and this is emphasized text.
Visit the Hugo website!</description></item><item><title>Smart Speaker based on GPT by OpenAI</title><link>https://yongfrank.github.io/posts/openai-smart-speaker/</link><pubDate>Thu, 02 Feb 2023 12:31:27 +0800</pubDate><guid>https://yongfrank.github.io/posts/openai-smart-speaker/</guid><description>GitHub Link: GitHub Video Link: Twitter
Trigger - picovoice.ai Recording - PyAudio ASR - Microsoft Azure Table Of Content Table Of Content Characteristics Example Questions Steps Step 1. Install all dependencies client - npm install Step 2. Train Wake word(Optional) Step 3. change .env.example to .env and filling .env files Step 4. Change TEST_MODE to True or IS_RASPBERRYPI in server/utils/config.py(Important), connect url in client/src/app.js(Optional) Step 4. run sh start.sh or server - app.</description></item><item><title>Linux Tips</title><link>https://yongfrank.github.io/posts/linux-tips/</link><pubDate>Wed, 18 Jan 2023 15:54:04 +0800</pubDate><guid>https://yongfrank.github.io/posts/linux-tips/</guid><description>特殊符号 ` grave accent noun
a mark placed over a vowel in some languages to show how it should be pronounced, as over the e in the French word père 钝重音符，沉音符，抑音符（标在元音上面表发音）
➡ compare acute accent, circumflex, tilde (1) , umlaut
➡ see also grave1
echo `date` echo $(date) $(( )) 用于数学运算 echo $(( 1 + 1 )) USAGE google explaination
在命令行工具的用法说明中，通常有一些符号来表示参数的类型和数量。这些符号的含义可能因不同的工具而有所差异，但一般来说，有以下几种常见的规则²：
[]: 表示方括号内的参数是可选的，可以提供也可以省略； &amp;lt;&amp;gt;: 表示尖括号内的参数是必需的，必须提供； &amp;hellip;: 表示省略号前面的参数可以重复多次，或者表示任意数量和类型的参数； |: 表示竖线两边的参数是互斥的，只能选择其中一个。 例如，假设有一个工具叫做 copy，它用于复制文件或目录。它的用法说明可能是这样：</description></item><item><title>Runtime Explained</title><link>https://yongfrank.github.io/posts/runtime-explained/</link><pubDate>Tue, 03 Jan 2023 16:13:29 +0800</pubDate><guid>https://yongfrank.github.io/posts/runtime-explained/</guid><description>RUNTIME Generally Compile time error Link time Runtime error Compile Time Error Runtime Error Time Earlier Later Error Grammar Error, Semantic Error Memory Error, Math Error Easy Hard Specifically Runtime Library (stdio.h) Runtime Environment No Runtime: C/C++, Rust Light Runtime: Golang Heavy Runtime: Java(JVM), Python(CPython), C#(.NET Runtime) JRE = JVM + Library No Runtime Runtime Memory Mgmt Mannually Automatically Thread Model Rely on OS Rely on Runtime System Interaction Directly Indirectly(rely on Runtime) Efficiency High Low(High on JIT) Bare Metal &amp;mdash;&amp;mdash;- 运行时 = 运行时环境 + 运行时库</description></item><item><title>Automatic Control Principles</title><link>https://yongfrank.github.io/posts/automatic-control-principles/</link><pubDate>Sun, 11 Dec 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/automatic-control-principles/</guid><description>Mason&amp;rsquo;s Gain Formula Wikipedia
Mason&amp;rsquo;s gain formula (MGF) is a method for finding the transfer function $H(s)$ of a linear signal-flow graph (SFG).
$$ P = \frac{\sum_{k=1}^n G_k \Delta_k}{\Delta} \ \Delta = 1 - \sum L_i + \sum L_iL_j - \sum L_i L_j L_k + &amp;hellip; + (-1)^m\sum&amp;hellip;+&amp;hellip; $$</description></item><item><title>Swift Codable, JSON, UserDefaults Explained</title><link>https://yongfrank.github.io/posts/2022-10-03-codable-explained/</link><pubDate>Mon, 03 Oct 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-10-03-codable-explained/</guid><description>What&amp;rsquo;s JSON JSON is a file format to store key-value pair.
It&amp;rsquo;s JSON for Pikachu
What&amp;rsquo;s Codable in the Swift Codable was introduced in Swift 4.0, bringing with it incredibly smooth conversion between Swift data types and JSON.
The code comes from
Hacking With Swift by Paul Hudson
Codable cheat sheet
Convert between JSON and Swift types the smart way
Part I: Codable Part Encoding and decoding JSON import Foundation let json = &amp;#34;&amp;#34;&amp;#34; [ { &amp;#34;name&amp;#34;:&amp;#34;Frank&amp;#34;, &amp;#34;age&amp;#34;: 20 }, { &amp;#34;name&amp;#34;: &amp;#34;Paul&amp;#34;, &amp;#34;age&amp;#34;: 38 } ] &amp;#34;&amp;#34;&amp;#34; /// Convert json into a **Data** object because that&amp;#39;s /// what Codable decoders work with.</description></item><item><title>Swift: Math Algorithm</title><link>https://yongfrank.github.io/posts/2022-10-02-math-algorithm/</link><pubDate>Sun, 02 Oct 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-10-02-math-algorithm/</guid><description>Prime Number A prime number is a whole number greater than 1 whose only factors are 1 and itself.
2, 3, 5, 7, 11, 13, 17, 19, 23, 29 are prime numbers.
Fastest Prime Checker by Noah Wilder on the stack overflow Swift 4.2, Xcode 10.1
This prime checking function and extension is the most efficient as it checks the divisibility of only $\frac{1}{2}\sqrt{n}$ integers.
Complexity: $O(\frac{1}{2} \sqrt{n})$
/// https://stackoverflow.</description></item><item><title>Swift: Image Picker UIKit in the SwiftUI</title><link>https://yongfrank.github.io/posts/2022-09-28-swift-image-picker-and-uiviewcontroller/</link><pubDate>Wed, 28 Sep 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-28-swift-image-picker-and-uiviewcontroller/</guid><description>Swift: Image Picker UIKit in the SwiftUI Wrapping a UIViewController in a SwiftUI view
Using coordinators to manage SwiftUI view controllers
import SwiftUI import PhotosUI struct ContentView: View { /// This particular struct is designed to show an image, /// so we need an optional **Image** view to hold the selected image, @State private var imageToBeDisplayedOnTheScreen: Image? /// plus some state that determines whether the sheet is showing or not.</description></item><item><title>Swift Overloading</title><link>https://yongfrank.github.io/posts/2022-09-24-swift-overloading/</link><pubDate>Sat, 24 Sep 2022 14:28:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-24-swift-overloading/</guid><description>Operator Overloading how to use operator overloading - Hacking With Swift
Operator overloading is the practice of adding new operators and modifying existing ones to do different things.
To create your own operator you need to tell Swift whether it should be prefix (before its operand; the values used with it), postfix (after its operand), or infix. The most common is infix: +, -, *, and more are all infix.</description></item><item><title>Swift Linked List</title><link>https://yongfrank.github.io/posts/2022-09-23-linkedlist/</link><pubDate>Fri, 23 Sep 2022 11:00:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-23-linkedlist/</guid><description>Linked List by Kelvin Tan
LinkedList in Swift by DamonLu on juejin.com
Definition Linked list is a chain of nodes. Nodes have two responsibilities:
Hold a value. Hold a reference to the next node in which a nil value represent the end of the list. Node and LinkedList Node has to be defined in Class, because of the reference.
// The &amp;lt;T&amp;gt; represent generic data where you could use // any data types such as Int, String or others.</description></item><item><title>Swift Network URLSession</title><link>https://yongfrank.github.io/posts/2022-09-23-swift-network/</link><pubDate>Fri, 23 Sep 2022 09:50:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-23-swift-network/</guid><description>Swift Network URLSession Sending and receiving Codable data with URLSession and SwiftUI
Loading an image from a remote server
import SwiftUI struct InternetNetwork: View { @StateObject var vm = ViewModel() var body: some View { if #available(iOS 16.0, *) { NavigationStack { contentOfMusic } } else { NavigationView { contentOfMusic } } } var contentOfMusic: some View { Form { TextField(&amp;#34;Enter singer&amp;#34;, text: $vm.inputForSearching) .textFieldStyle(.roundedBorder) Text(vm.url) // We want that to be run as soon as our List is shown, // but we can’t just use onAppear() here // because that doesn’t know how to handle sleeping functions – // it expects its function to be synchronous.</description></item><item><title>Swift QRCode and Image Processing</title><link>https://yongfrank.github.io/posts/2022-09-22-swift-qrcode-image-processing/</link><pubDate>Thu, 22 Sep 2022 15:50:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-22-swift-qrcode-image-processing/</guid><description>QRCode Generator Generating and scaling up a QR code
// First, we need to bring in all the Core Image filters using a new import: import SwiftUI import CoreImage.CIFilterBuiltins func generateQRCode(from string: String) -&amp;gt; UIImage { // We need two properties to store an active Core Image context let context = CIContext() // and an instance of Core Image’s QR code generator filter let filter = CIFilter.qrCodeGenerator() // Working with Core Image filters requires us to provide some input data.</description></item><item><title>Swift throws and rethrows, function as parameter</title><link>https://yongfrank.github.io/posts/2022-09-21-swift-throws-rethrows/</link><pubDate>Wed, 21 Sep 2022 11:31:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-21-swift-throws-rethrows/</guid><description>Keyword throws What is a throwing function?
Throwing functions are those that will flag up errors if problems happen, and Swift requires you to handle those errors in your code.
How to handle errors in functions
enum PasswordError: Error { case short, obvious } func checkPassword(_ password: String) throws -&amp;gt; Bool { if password.count &amp;lt; 6 { throw PasswordError.short } if password == &amp;#34;123456&amp;#34; { throw PasswordError.obvious } return true } let password = &amp;#34;123456&amp;#34; do { let isPasswordPassed = try checkPassword(password) if isPasswordPassed { print(&amp;#34;Password Passed!</description></item><item><title>Summer Vacation Diary</title><link>https://yongfrank.github.io/posts/2022-07-08-summer-diary/</link><pubDate>Fri, 08 Jul 2022 21:44:13 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-07-08-summer-diary/</guid><description>Thu Jul 21 Swift How to use VideoPlayer in SwiftUI Mon Jul 18 Swift Parse HTML in Swift 5 (HTMLKit) - Xcode 11, 2020, iOS Development Fri Jul 16 Swift FileManager Swift 5 Tutorials
Strom Viewer - Project 1
iOS 14 Beta 6 File Importer &amp;amp; File Exporter - SwiftUI 2.0 Document Picker LeetCode LeetCode in Python 13. Roman to Integer LeetCode in Swift 13. Roman to Integer Thu Jul 14 Git git pull and git pull &amp;ndash;rebase git tutorial Fri Jul 8 Vapor Getting Started with Vapor 4 - CodeWithChris</description></item><item><title>CS61A fun part, 2022 summer</title><link>https://yongfrank.github.io/posts/2022-06-28-cs61a-fun-part/</link><pubDate>Tue, 28 Jun 2022 10:16:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-06-28-cs61a-fun-part/</guid><description>CHAPTER 1 Building Abstractions with Functions Object, Set, Function In the composing programs, there is an assignment statement.
from urllib.request import urlopen shakespeare = urlopen(&amp;#39;http://composingprograms.com/shakespeare.txt&amp;#39;) # This statement is to save all words in Set words by words words = set(shakespeare.read().decode().split()) # {} means Set, and it will print all words in &amp;#34;words&amp;#34; above print({w for w in words}) # [::-1] enumerate each letter in a words, but -1 dictates to step backwards.</description></item><item><title>My First Post</title><link>https://yongfrank.github.io/posts/2022-06-25-my-first-post/</link><pubDate>Sat, 25 Jun 2022 22:55:05 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-06-25-my-first-post/</guid><description>func helloWorld() { print(&amp;#34;Hi, my name is Frank&amp;#34;) }</description></item></channel></rss>