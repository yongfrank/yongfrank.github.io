<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog by Frank</title><link>https://yongfrank.github.io/</link><description>Recent content on Blog by Frank</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Mar 2023 13:19:38 +0800</lastBuildDate><atom:link href="https://yongfrank.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Getting Started</title><link>https://yongfrank.github.io/posts/docker-getting-started/</link><pubDate>Tue, 21 Mar 2023 13:19:38 +0800</pubDate><guid>https://yongfrank.github.io/posts/docker-getting-started/</guid><description># 运行以下命令在 Docker 容器中克隆 GitHub 仓库： # 该命令的含义是，以 alpine/git 镜像为基础， # 启动一个名为 repo 的容器，并在容器内执行 git clone 命令， # 将 https://github.com/docker/getting-started.git 仓库克隆到当前目录下的 . 文件夹中。 docker run --name repo alpine/git clone https://github.com/docker/getting-started.gited/ . # 然后，运行以下命令将克隆的代码复制到本地文件系统中： # 该命令的含义是，将名为 repo 的容器中 /git/getting-started/ # 文件夹下的所有文件和子文件夹复制到当前目录下。 docker cp repo:/git/getting-started/ . docker run -d -p 80:80 docker/getting-started # You&amp;#39;ll notice a few flags being used. Here&amp;#39;s some more info on them: # -d - run the container in detached mode (in the background) # -p 80:80 - map port 80 of the host to port 80 in the container # docker/getting-started - the image to use Dockerfile Dockerfile for Dev FROM ubuntu LABEL org.</description></item><item><title>Clash Config File</title><link>https://yongfrank.github.io/posts/clash-config-file/</link><pubDate>Mon, 20 Mar 2023 10:26:07 +0800</pubDate><guid>https://yongfrank.github.io/posts/clash-config-file/</guid><description>infrastructure port hosts dns mode: Rule proxies: proxy name, server, Password proxies-groups: name, type, proxies rules: Match RULE, DOMAIN, Request Rule port: 7890 socks-port: 7891 redir-port: 7892 mixed-port: 7893 allow-lan: false mode: Rule log-level: info ipv6: false hosts: services.googleapis.cn: 142.250.196.131 www.google.cn: 142.250.196.131 external-controller: 0.0.0.0:9090 clash-for-android: append-system-dns: false profile: tracing: true experimental: sniff-tls-sni: true dns: enable: true listen: 127.0.0.1:8853 default-nameserver: - 223.5.5.5 - 8.8.4.4 ipv6: false enhanced-mode: fake-ip fake-ip-filter: {- &amp;#34;*.lan&amp;#34;} nameserver: {- &amp;#34;114.</description></item><item><title>Azure VPS</title><link>https://yongfrank.github.io/posts/azure-vps/</link><pubDate>Sat, 18 Mar 2023 20:46:20 +0800</pubDate><guid>https://yongfrank.github.io/posts/azure-vps/</guid><description>ssh-keygen SSH keygen for passwordless login is based on the principles of public-key cryptography and key authentication mechanism. In SSH passwordless login, a pair of keys, including a public key and a private key, needs to be generated. The private key is stored on the local host, while the public key can be shared between the local host and the remote server.
SSH 免密登录的原理基于公钥密码学和密钥认证机制。在 SSH 免密登录中，需要生成一对密钥，分别是公钥和私钥。私钥存储在本地主机上，而公钥则可以在本地主机和远程服务器之间共享。
In SSH passwordless login, the user first needs to generate a pair of keys on the local host and then copy the public key to the remote server.</description></item><item><title>ActivityKit &amp; WidgetKit on iOS</title><link>https://yongfrank.github.io/posts/activitykit-and-widgetkit/</link><pubDate>Mon, 13 Mar 2023 17:23:10 +0800</pubDate><guid>https://yongfrank.github.io/posts/activitykit-and-widgetkit/</guid><description>Live Activity 相关限制 iOS 16.1 及以上 更新动态数据大小不能超过 4KB 只能在应用处于前台时从应用启动 LiveActivity。但是，可以在应用程序在后台运行时从应用程序更新或结束实时活动——例如，使用 Background Task。 生命周期与约束 利用 Live Activities 显示实时数据 与 Widget 相比，实时活动使用不同的机制来接收更新。Live Activities 不是使用时间轴机制，而是使用 ActivityKit 从您的应用程序接收更新的数据，并通过 ActivityKit push notifications 远程接收。
Live Activities use a different mechanism to receive updates compared to widgets. Instead of using a timeline mechanism, Live Activities receive updated data from your app with ActivityKit and remotely with ActivityKit push notifications.
Live Activity 最多可以运行八小时，除非您的应用程序或其他人终止了它。过了这个8小时的时限，系统自动结束。当实时活动结束时，系统会立即将其从灵动岛中移除。但是，实时活动会保留在锁定屏幕上，直到有人将其删除或在系统将其删除之前再保留最多四个小时。因此，实时活动会在锁定屏幕上保留最多 12 小时。
A Live Activity can be active for up to eight hours unless your app or a person ends it.</description></item><item><title>UIImagePickerController in UIKit</title><link>https://yongfrank.github.io/posts/uiimage-picker-controller-uikit/</link><pubDate>Fri, 03 Mar 2023 11:43:07 +0800</pubDate><guid>https://yongfrank.github.io/posts/uiimage-picker-controller-uikit/</guid><description>Keyword UIImagePickerController NSObject UIImagePickerController &amp;amp; PHPickerViewController Reference: JianShu
如何在 iOS 14 中使用新推出的 PhotoKit 框架中的 PHPickerViewController 类，并通过 Objective C 和Swift 语言从照片库中选择照片。
多年来，在 iOS 上选择照片和视频的最简单方法是使用 UIImagePickerController 类。该类允许你呈现一个内置的系统 UI 来选择照片或视频，并将其返回到你的应用程序中，而无需构建选择照片的 UI 页面或访问照片库的提示。
然而，UIImagePickerController 也有很多缺点：它相当基础，而且呈现给用户浏览照片库的 UI 也非常有限；一次只能选择一个（图片或者视频），而且只支持基本的过滤功能。在 iOS 14 中，UIImagePickerController 被 &amp;ldquo;软废弃 &amp;ldquo;了。虽然目前还没有被标记为废弃，但如果你看一下头文件，就会发现 API 标记有这个
API_TO_BE_DEPRECATED
iOS 14 中新的 PHPicker 类不是在 UIKit 框架中的，而是位于 PhotosUI 框架中
Navigation Button &amp;amp; Function for selection // inside viewDidLoad self.navigationItem.leftBarButtonItem = UIBarButton(barButtonSystemItem: .add, target: self, action: #selector(addNewPerson)) // inside class like ViewController @objc func addNewPerson() { // @MainActor class UIImagePickerController : UINavigationController let picker = UIImagePickerController() picker.</description></item><item><title>Welcome 😀</title><link>https://yongfrank.github.io/about/</link><pubDate>Thu, 02 Mar 2023 11:20:03 +0800</pubDate><guid>https://yongfrank.github.io/about/</guid><description>👋 Hello, I&amp;rsquo;m Frank, also known as @yongfrank on GitHub. 👀 I&amp;rsquo;m passionate about programming. 🌱 Currently, I&amp;rsquo;m learning Swift, C/C++, Python, HTML/CSS/JavaScript. 📫 You can reach me on Twitter. My Project Oh My Flag - Open Source App on the GitHub Video Link: Twitter
Swift Student Challenge - WWDC22 on Twitter
Oh My Flag Walk Through
The App Oh My Flag helps students get familiar with flags. It is both educating and entertaining with the design of multi-module and interactive tasks.</description></item><item><title>断舍离</title><link>https://yongfrank.github.io/second-hand/</link><pubDate>Thu, 02 Mar 2023 11:13:42 +0800</pubDate><guid>https://yongfrank.github.io/second-hand/</guid><description>更新时间 2022-09-25 10:31:48
联系方式 绿色软件: Y3lvbmdmcmFuaw==
Telegram: https://t.me/heindelssohn
杭州自提优先
闲置区域 名称 配置详情 价格 备注 状态 iPhone 13 Pro Max 银色 256G + 衫绿色 Leather Case，保修到 2022/11/26 7200 闲鱼链接 在售 Apple Watch S7 45mm GPS 版本，星光色铝金属 + Nike 运动表带，保修到 2022/12/25 2500 闲鱼链接 在售 AirPods Pro 1 全新未拆封 1200 闲鱼链接 售出 iPad 9 无线局域网机型，全新未拆封，256G 3400 闲鱼链接 售出 合租区域 名称 详情 价格 备注 状态 Disney+ 美区 30 / 季度 长期合租</description></item><item><title>Hugo Init</title><link>https://yongfrank.github.io/posts/hugo-init/</link><pubDate>Thu, 02 Mar 2023 11:06:36 +0800</pubDate><guid>https://yongfrank.github.io/posts/hugo-init/</guid><description>Init hugo site Hugo Article Hugo Host on GitHub Article Install Hugo brew install hugo hugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke echo &amp;#34;theme = &amp;#39;ananke&amp;#39;&amp;#34; &amp;gt;&amp;gt; config.toml hugo server hugo new posts/my-first-post.md hugo server Update config.toml baseURL = &amp;#39;http://example.org/&amp;#39; languageCode = &amp;#39;en-us&amp;#39; title = &amp;#39;My New Hugo Site&amp;#39; theme = &amp;#39;ananke&amp;#39; GitHub Action Create a file in .github/workflows/gh-pages.yml
name: github pages on: push: branches: - main # Set a branch that will trigger a deployment pull_request: jobs: deploy: runs-on: ubuntu-22.</description></item><item><title>New Blog Site, Hugo, Publish</title><link>https://yongfrank.github.io/posts/new-blog-site/</link><pubDate>Thu, 02 Mar 2023 10:52:24 +0800</pubDate><guid>https://yongfrank.github.io/posts/new-blog-site/</guid><description>Reference iOS DEVELOPER WRITER. SPEAKER.</description></item><item><title>Hugo Test</title><link>https://yongfrank.github.io/posts/pogo-test/</link><pubDate>Mon, 27 Feb 2023 21:20:44 +0800</pubDate><guid>https://yongfrank.github.io/posts/pogo-test/</guid><description>Hello world This is Frank&amp;rsquo;s first post.
Introduction This is bold text, and this is emphasized text.
Visit the Hugo website!</description></item><item><title>Smart Speaker based on GPT by OpenAI</title><link>https://yongfrank.github.io/posts/openai-smart-speaker/</link><pubDate>Thu, 02 Feb 2023 12:31:27 +0800</pubDate><guid>https://yongfrank.github.io/posts/openai-smart-speaker/</guid><description>GitHub Link: GitHub Video Link: Twitter
Trigger - picovoice.ai Recording - PyAudio ASR - Microsoft Azure Table Of Content Table Of Content Characteristics Example Questions Steps Step 1. Install all dependencies client - npm install Step 2. Train Wake word(Optional) Step 3. change .env.example to .env and filling .env files Step 4. Change TEST_MODE to True or IS_RASPBERRYPI in server/utils/config.py(Important), connect url in client/src/app.js(Optional) Step 4. run sh start.sh or server - app.</description></item><item><title>Linux Tips</title><link>https://yongfrank.github.io/posts/linux-tips/</link><pubDate>Wed, 18 Jan 2023 15:54:04 +0800</pubDate><guid>https://yongfrank.github.io/posts/linux-tips/</guid><description>特殊符号 ` grave accent noun
a mark placed over a vowel in some languages to show how it should be pronounced, as over the e in the French word père 钝重音符，沉音符，抑音符（标在元音上面表发音）
➡ compare acute accent, circumflex, tilde (1) , umlaut
➡ see also grave1
echo `date` echo $(date) $(( )) 用于数学运算 echo $(( 1 + 1 )) USAGE google explaination
在命令行工具的用法说明中，通常有一些符号来表示参数的类型和数量。这些符号的含义可能因不同的工具而有所差异，但一般来说，有以下几种常见的规则²：
[]: 表示方括号内的参数是可选的，可以提供也可以省略； &amp;lt;&amp;gt;: 表示尖括号内的参数是必需的，必须提供； &amp;hellip;: 表示省略号前面的参数可以重复多次，或者表示任意数量和类型的参数； |: 表示竖线两边的参数是互斥的，只能选择其中一个。 例如，假设有一个工具叫做 copy，它用于复制文件或目录。它的用法说明可能是这样：</description></item><item><title>Runtime Explained</title><link>https://yongfrank.github.io/posts/runtime-explained/</link><pubDate>Tue, 03 Jan 2023 16:13:29 +0800</pubDate><guid>https://yongfrank.github.io/posts/runtime-explained/</guid><description>RUNTIME Generally Compile time error Link time Runtime error Compile Time Error Runtime Error Time Earlier Later Error Grammar Error, Semantic Error Memory Error, Math Error Easy Hard Specifically Runtime Library (stdio.h) Runtime Environment No Runtime: C/C++, Rust Light Runtime: Golang Heavy Runtime: Java(JVM), Python(CPython), C#(.NET Runtime) JRE = JVM + Library No Runtime Runtime Memory Mgmt Mannually Automatically Thread Model Rely on OS Rely on Runtime System Interaction Directly Indirectly(rely on Runtime) Efficiency High Low(High on JIT) Bare Metal &amp;mdash;&amp;mdash;- Reference Discussion on RUNTIME - bilibili</description></item><item><title>Automatic Control Principles</title><link>https://yongfrank.github.io/posts/automatic-control-principles/</link><pubDate>Sun, 11 Dec 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/automatic-control-principles/</guid><description>Mason&amp;rsquo;s Gain Formula Wikipedia
Mason&amp;rsquo;s gain formula (MGF) is a method for finding the transfer function $H(s)$ of a linear signal-flow graph (SFG).
$$ P = \frac{\sum_{k=1}^n G_k \Delta_k}{\Delta} \ \Delta = 1 - \sum L_i + \sum L_iL_j - \sum L_i L_j L_k + &amp;hellip; + (-1)^m\sum&amp;hellip;+&amp;hellip; $$</description></item><item><title>Swift Codable, JSON, UserDefaults Explained</title><link>https://yongfrank.github.io/posts/2022-10-03-codable-explained/</link><pubDate>Mon, 03 Oct 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-10-03-codable-explained/</guid><description>What&amp;rsquo;s JSON JSON is a file format to store key-value pair.
It&amp;rsquo;s JSON for Pikachu
What&amp;rsquo;s Codable in the Swift Codable was introduced in Swift 4.0, bringing with it incredibly smooth conversion between Swift data types and JSON.
The code comes from
Hacking With Swift by Paul Hudson
Codable cheat sheet
Convert between JSON and Swift types the smart way
Part I: Codable Part Encoding and decoding JSON import Foundation let json = &amp;#34;&amp;#34;&amp;#34; [ { &amp;#34;name&amp;#34;:&amp;#34;Frank&amp;#34;, &amp;#34;age&amp;#34;: 20 }, { &amp;#34;name&amp;#34;: &amp;#34;Paul&amp;#34;, &amp;#34;age&amp;#34;: 38 } ] &amp;#34;&amp;#34;&amp;#34; /// Convert json into a **Data** object because that&amp;#39;s /// what Codable decoders work with.</description></item><item><title>Swift: Math Algorithm</title><link>https://yongfrank.github.io/posts/2022-10-02-math-algorithm/</link><pubDate>Sun, 02 Oct 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-10-02-math-algorithm/</guid><description>Prime Number A prime number is a whole number greater than 1 whose only factors are 1 and itself.
2, 3, 5, 7, 11, 13, 17, 19, 23, 29 are prime numbers.
Fastest Prime Checker by Noah Wilder on the stack overflow Swift 4.2, Xcode 10.1
This prime checking function and extension is the most efficient as it checks the divisibility of only $\frac{1}{2}\sqrt{n}$ integers.
Complexity: $O(\frac{1}{2} \sqrt{n})$
/// https://stackoverflow.</description></item><item><title>Swift: Image Picker UIKit in the SwiftUI</title><link>https://yongfrank.github.io/posts/2022-09-28-swift-image-picker-and-uiviewcontroller/</link><pubDate>Wed, 28 Sep 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-28-swift-image-picker-and-uiviewcontroller/</guid><description>Wrapping a UIViewController in a SwiftUI view
Using coordinators to manage SwiftUI view controllers
import SwiftUI import PhotosUI struct ContentView: View { /// This particular struct is designed to show an image, /// so we need an optional **Image** view to hold the selected image, @State private var imageToBeDisplayedOnTheScreen: Image? /// plus some state that determines whether the sheet is showing or not. @State private var showingImagePicker = false /// To integrate our ImagePicker view into that we need to start /// by add another @State image property that can be passed into the picker: @State private var inputImageFromPhotosLibrary: UIImage?</description></item><item><title>Swift Overloading</title><link>https://yongfrank.github.io/posts/2022-09-24-swift-overloading/</link><pubDate>Sat, 24 Sep 2022 14:28:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-24-swift-overloading/</guid><description>Operator Overloading how to use operator overloading - Hacking With Swift
Operator overloading is the practice of adding new operators and modifying existing ones to do different things.
To create your own operator you need to tell Swift whether it should be prefix (before its operand; the values used with it), postfix (after its operand), or infix. The most common is infix: +, -, *, and more are all infix.</description></item><item><title>Swift Linked List</title><link>https://yongfrank.github.io/posts/2022-09-23-linkedlist/</link><pubDate>Fri, 23 Sep 2022 11:00:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-23-linkedlist/</guid><description>Linked List by Kelvin Tan
LinkedList in Swift by DamonLu on juejin.com
Definition Linked list is a chain of nodes. Nodes have two responsibilities:
Hold a value. Hold a reference to the next node in which a nil value represent the end of the list. Node and LinkedList Node has to be defined in Class, because of the reference.
// The &amp;lt;T&amp;gt; represent generic data where you could use // any data types such as Int, String or others.</description></item><item><title>Swift Network URLSession</title><link>https://yongfrank.github.io/posts/2022-09-23-swift-network/</link><pubDate>Fri, 23 Sep 2022 09:50:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-23-swift-network/</guid><description>Sending and receiving Codable data with URLSession and SwiftUI
Loading an image from a remote server
import SwiftUI struct InternetNetwork: View { @StateObject var vm = ViewModel() var body: some View { if #available(iOS 16.0, *) { NavigationStack { contentOfMusic } } else { NavigationView { contentOfMusic } } } var contentOfMusic: some View { Form { TextField(&amp;#34;Enter singer&amp;#34;, text: $vm.inputForSearching) .textFieldStyle(.roundedBorder) Text(vm.url) // We want that to be run as soon as our List is shown, // but we can’t just use onAppear() here // because that doesn’t know how to handle sleeping functions – // it expects its function to be synchronous.</description></item><item><title>Swift QRCode and Image Processing</title><link>https://yongfrank.github.io/posts/2022-09-22-swift-qrcode-image-processing/</link><pubDate>Thu, 22 Sep 2022 15:50:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-22-swift-qrcode-image-processing/</guid><description>QRCode Generator Generating and scaling up a QR code
// First, we need to bring in all the Core Image filters using a new import: import SwiftUI import CoreImage.CIFilterBuiltins func generateQRCode(from string: String) -&amp;gt; UIImage { // We need two properties to store an active Core Image context let context = CIContext() // and an instance of Core Image’s QR code generator filter let filter = CIFilter.qrCodeGenerator() // Working with Core Image filters requires us to provide some input data.</description></item><item><title>Swift throws and rethrows, function as parameter</title><link>https://yongfrank.github.io/posts/2022-09-21-swift-throws-rethrows/</link><pubDate>Wed, 21 Sep 2022 11:31:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-21-swift-throws-rethrows/</guid><description>Keyword throws What is a throwing function?
Throwing functions are those that will flag up errors if problems happen, and Swift requires you to handle those errors in your code.
How to handle errors in functions
enum PasswordError: Error { case short, obvious } func checkPassword(_ password: String) throws -&amp;gt; Bool { if password.count &amp;lt; 6 { throw PasswordError.short } if password == &amp;#34;123456&amp;#34; { throw PasswordError.obvious } return true } let password = &amp;#34;123456&amp;#34; do { let isPasswordPassed = try checkPassword(password) if isPasswordPassed { print(&amp;#34;Password Passed!</description></item><item><title>Summer Vacation Diary</title><link>https://yongfrank.github.io/posts/2022-07-08-summer-diary/</link><pubDate>Fri, 08 Jul 2022 21:44:13 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-07-08-summer-diary/</guid><description>Thu Jul 21 Swift How to use VideoPlayer in SwiftUI Mon Jul 18 Swift Parse HTML in Swift 5 (HTMLKit) - Xcode 11, 2020, iOS Development Fri Jul 16 Swift FileManager Swift 5 Tutorials
Strom Viewer - Project 1
iOS 14 Beta 6 File Importer &amp;amp; File Exporter - SwiftUI 2.0 Document Picker LeetCode LeetCode in Python 13. Roman to Integer LeetCode in Swift 13. Roman to Integer Thu Jul 14 Git git pull and git pull &amp;ndash;rebase git tutorial Fri Jul 8 Vapor Getting Started with Vapor 4 - CodeWithChris</description></item><item><title>CS61A fun part, 2022 summer</title><link>https://yongfrank.github.io/posts/2022-06-28-cs61a-fun-part/</link><pubDate>Tue, 28 Jun 2022 10:16:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-06-28-cs61a-fun-part/</guid><description>CHAPTER 1 Building Abstractions with Functions Object, Set, Function In the composing programs, there is an assignment statement.
from urllib.request import urlopen shakespeare = urlopen(&amp;#39;http://composingprograms.com/shakespeare.txt&amp;#39;) # This statement is to save all words in Set words by words words = set(shakespeare.read().decode().split()) # {} means Set, and it will print all words in &amp;#34;words&amp;#34; above print({w for w in words}) # [::-1] enumerate each letter in a words, but -1 dictates to step backwards.</description></item><item><title>My First Post</title><link>https://yongfrank.github.io/posts/2022-06-25-my-first-post/</link><pubDate>Sat, 25 Jun 2022 22:55:05 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-06-25-my-first-post/</guid><description>func helloWorld() { print(&amp;#34;Hi, my name is Frank&amp;#34;) }</description></item></channel></rss>