<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog by Frank</title><link>https://yongfrank.github.io/</link><description>Recent content on Blog by Frank</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 Jul 2023 09:13:51 +0800</lastBuildDate><atom:link href="https://yongfrank.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Computer Network</title><link>https://yongfrank.github.io/posts/computer-network/</link><pubDate>Fri, 21 Jul 2023 09:13:51 +0800</pubDate><guid>https://yongfrank.github.io/posts/computer-network/</guid><description>CA, Https, Symmetric-key algorithm, Public-key cryptography 非对称加密、对称加密、签名、CA机构、证书、https - bilibili
Public-key cryptography Public Key - Public Key Encryption
Private Key - Private Key Decryption
Certificate Authority (CA) Sign on the public key with its private key
TLS over TCP 加密原理和证书。SSL/TLS握手过程
在传统的TCP三次握手过程中，不涉及TLS（Transport Layer Security）加密。三次握手是建立TCP连接的过程，用于在客户端和服务器之间建立可靠的数据传输通道。
然而，如果在TCP连接建立后，应用程序需要进行安全的数据传输，就可以在TCP连接的基础上使用TLS来实现加密。TLS是一种加密协议，用于在网络通信中保护数据的安全性和完整性。
在TLS加密流程中，大致可以分为以下几个步骤：
客户端发送ClientHello：客户端向服务器发送ClientHello消息，包含了支持的加密套件列表和随机数等信息。 服务器发送ServerHello：服务器从客户端发送的加密套件列表中选择一个加密套件，并向客户端发送ServerHello消息，包含了服务器选择的加密套件和随机数等信息。 客户端和服务器交换密钥：客户端根据服务器发送的信息生成会话密钥，并将其加密后发送给服务器。服务器接收到客户端发送的密钥后，使用私钥解密得到会话密钥。 加密数据传输：建立了安全的会话密钥后，客户端和服务器之间的数据传输都会使用该密钥进行加密和解密，确保数据在传输过程中的安全性。 完成握手：最后，客户端和服务器交换Finished消息，以确认握手过程完成，双方可以开始进行加密数据传输。 值得注意的是，TLS加密过程发生在TCP连接建立完成后。因此，在TCP三次握手阶段，还没有进行TLS加密。TLS加密是在建立了可靠的TCP连接后进行的，用于保障后续数据传输的安全。</description></item><item><title>CAID IDFA</title><link>https://yongfrank.github.io/posts/caid-idfa/</link><pubDate>Thu, 06 Jul 2023 10:56:07 +0800</pubDate><guid>https://yongfrank.github.io/posts/caid-idfa/</guid><description>IDFA CAID 黄业忠 - 中国广告协会的CAID方案
CAID的推出应对苹果系统更改广告标识符（IDFA）权限对互联网广告市场带来的影响，简单的就是替代IDFA对用户做跟踪。
CAID的实现方式分为两种，一种是在终端上实现，其实就是客户端生成，一种是采集信息上传到服务端，这种叫服务端生成。
客户端生成：在用户设备上，首次启用的时候，设备硬件参数和随机数通过算法在客户端生成CAID，同时将映射关系上传。这种方式缺点是，客户端会涉及到多次的数据上传和交互，也不便于规则的调整，不推荐使用。
服务端生成：采集APP具有一定识别能力的非用户隐私数据，发送到中心化服务端，里面有ID管理中心，可通过多参数与随机数经过一定算法生成广告标识ID，再下发给APP端，对于一台终端而言，其广告标识ID具有唯一性，这相当于给每一台终端新发了一张“身份证”。</description></item><item><title>WWDC 23 and Swift Updates</title><link>https://yongfrank.github.io/posts/wwdc-23/</link><pubDate>Wed, 28 Jun 2023 13:40:53 +0800</pubDate><guid>https://yongfrank.github.io/posts/wwdc-23/</guid><description>Vision Pro Simulator Download Link install with command line
xcode-select -s /Applications/Xcode-beta.app xcodebuild -runFirstLaunch xcrun simctl runtime add &amp;#34;~/Downloads/watchOS 9 beta Simulator Runtime.dmg&amp;#34; Swift Macro Applying Macros
swift中的宏定义 - 2016
开始写一个 Swift 宏吧
OpenAI
在编程中，宏（Macro）是一种方式，允许你定义一段代码，然后在程序的其他地方多次使用。想象一下，你在编写一个程序，里面有一个任务需要你多次重复，而且每次重复的内容都是一样的。如果你手动写这些代码，不仅会浪费时间，而且如果要修改这段代码，你就需要在所有用到的地方都进行修改。
这就是宏的用武之地。你可以创建一个宏，定义那段需要重复的代码，然后在程序的其他地方只需要调用这个宏就可以了。这样，你就只需要写一次代码，然后在需要的地方重复使用。而且如果需要修改代码，只需修改宏的定义就可以了，而不需要在程序的每个地方都进行修改。
举个例子，如果你在编写一个游戏，并且在很多地方都需要计算玩家的分数，你可以创建一个计算分数的宏，然后在需要计算分数的地方都调用这个宏，这样就能避免重复编写相同的代码。
简单来说，宏就像是一个可以重复使用的代码片段，让你可以在多个地方使用同样的代码，而不需要重复编写。
宏（Macro）和函数是编程中两种常用的代码复用工具，它们都可以使程序员避免重复编写代码。然而，它们的工作方式和用途有所不同。以下是它们的主要区别：
预处理和编译： 宏是在预处理阶段展开的。预处理器会在编译代码之前，将所有宏调用替换为相应的代码。而函数则是在编译阶段处理的，当函数被调用时，程序会跳转到函数所在的内存位置，执行函数代码，然后返回到调用处。
性能： 由于宏只是简单地替换代码，所以它们不需要函数调用的开销（例如设置堆栈帧，跳转到函数代码等），因此它们可能会比函数快。然而，过度使用宏可能会导致代码膨胀，因为每次使用宏，编译器都会生成一份新的代码。另一方面，函数只在内存中存在一份，无论调用多少次。
类型检查： 函数在编译时会进行类型检查，这可以帮助发现错误。而宏不会进行类型检查，因为它们只是文本替换，这可能会导致错误更难发现。
范围： 函数有其自己的作用域，这意味着在函数内部定义的变量在函数外部不可见。而宏没有这样的作用域，它们只是简单地替换文本。
表达能力： 函数比宏更强大，更灵活。函数可以有复杂的控制流程（如循环和条件语句），可以递归调用，可以返回值，等等。而宏的能力较为有限。
总的来说，宏和函数都有其用途。宏通常用于定义简单的代码片段，这些片段会在代码的多个地方完全一样地使用。函数则用于定义更复杂的代码行为，特别是当代码涉及到控制流程，或者需要被反复调用但不想造成代码膨胀时。
Xcode Other Linker Flags Xcode 15 linking error
Hi, I am getting a linking error when building my app to run against an iOS17 device, using Xcode15.</description></item><item><title>Environment Problems</title><link>https://yongfrank.github.io/posts/environment-problems/</link><pubDate>Wed, 24 May 2023 13:28:22 +0800</pubDate><guid>https://yongfrank.github.io/posts/environment-problems/</guid><description>Python python3 -m venv venv source venv/bin/activate pip install -r requirements.txt pip source pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple Node.js # nvm curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash nvm install --lts nvm use --lts # npm npm config set registry https://registry.npm.taobao.org npm install</description></item><item><title>Interview Experience</title><link>https://yongfrank.github.io/posts/interview-experience/</link><pubDate>Tue, 23 May 2023 00:53:13 +0800</pubDate><guid>https://yongfrank.github.io/posts/interview-experience/</guid><description>Apple 我在Apple的面试经历
1月18号中午，刚准备乘电梯下楼去吃午饭，手机响了，上海座机。接起电话，对方自称是Apple的（姑且称他为J先生），说从猎聘网上看到我更新了简历。Apple 在苏州有个Product System QA Engineer的职位，询问我是否感兴趣。苹果的Position应该对每一个人来说都应该是吸引力十足，诚然我也不例外。</description></item><item><title>Cocoapods</title><link>https://yongfrank.github.io/posts/cocoapods/</link><pubDate>Sat, 20 May 2023 23:10:11 +0800</pubDate><guid>https://yongfrank.github.io/posts/cocoapods/</guid><description>ATestingModule ATestingModule-ATestingModule 这两个 cocoapods 里的有什么区别
在 CocoaPods 中，一个模块名字的定义是根据 podspec 文件中的 name 字段来的。比如说，你的 podspec 文件可能会有类似这样的一行代码：
Pod::Spec.new do |s| s.name = &amp;#34;ATestingModule&amp;#34; ... end 在这个例子中，模块的名字就是 &amp;ldquo;ATestingModule&amp;rdquo;。
那么，这个名字后面跟着 &amp;ldquo;-ATestingModule&amp;rdquo; 是什么呢？那是一个 target。在 Xcode 中，一个 target 定义了一组要使用的源文件，一个要构建的产品，以及用于构建该产品的构建设置。
CocoaPods 会为每一个 Pod 创建一个对应的 target，名字通常是 {PodName}-{ModuleName}。在你的例子中，PodName 和 ModuleName 都是 &amp;ldquo;ATestingModule&amp;rdquo;，所以你看到的 target 名字就成了 &amp;ldquo;ATestingModule-ATestingModule&amp;rdquo;。
如果你只是想要使用这个 Pod，你通常不需要关心这个 target 的名字。当你在你的代码中 import ATestingModule 的时候，你实际上是在引用的是模块，而不是 target。
然而，如果你正在进行一些更复杂的构建配置，比如设置 Build Phases 或者添加编译标志，那么你可能就需要知道这个 target 的名字了。</description></item><item><title>Postman</title><link>https://yongfrank.github.io/posts/postman/</link><pubDate>Thu, 18 May 2023 21:39:15 +0800</pubDate><guid>https://yongfrank.github.io/posts/postman/</guid><description>生成接口文档并同步到postman
How to create mock server response in iOS development with URLProtocol</description></item><item><title>Android Development</title><link>https://yongfrank.github.io/posts/android-development/</link><pubDate>Fri, 12 May 2023 17:18:00 +0800</pubDate><guid>https://yongfrank.github.io/posts/android-development/</guid><description>RecycleView Android控件RecycleView的基本用法</description></item><item><title>Peripheral</title><link>https://yongfrank.github.io/posts/peripheral/</link><pubDate>Fri, 12 May 2023 13:24:58 +0800</pubDate><guid>https://yongfrank.github.io/posts/peripheral/</guid><description>Display Dell P2720DC 黑色星期五购买显示器 这四个品牌受欢迎
戴尔P2720DC显示器 图像质量更可靠
没有适合所有人的显示器，但是这款Dell显示器在分辨率、设计、功能和价格之间都实现了最佳平衡。首先，它的对角线尺寸为27英寸，这是标准办公桌的理想尺寸。它也是1440p（QHD），这是介于价格合理的1080p和超级清晰4K之间的完美娱乐媒介。
它虽然不如戴尔的 UltraThin 显示器那么时尚，但是P系列看起来也很现代。P2720DC不一定适合发烧友的照片编辑人员，因为颜色校准还不够完美。但是，它对于业余爱好者和大多数其他类型的计算任务非常有用，具有可靠的图像质量和便捷的可调整性。
搜索 Dell P2720DC 支持信息
Dell 27 USB-C 显示器 - P2720DC 用户指南
Keyboard Adapter Apple Accessories - Power &amp;amp; Cables
USB-C Digital AV Multiport Adapter</description></item><item><title>UserNotifications</title><link>https://yongfrank.github.io/posts/usernotifications/</link><pubDate>Fri, 12 May 2023 11:36:13 +0800</pubDate><guid>https://yongfrank.github.io/posts/usernotifications/</guid><description>Quick Start Scheduling local notifications Scheduling local notifications
&amp;#34;NotificationsTesting&amp;#34; Would Like to Send You Notifications Notifications may include alerts, sounds, and icon badges. These can be configured in Settings. -------------------------- | Dont&amp;#39;t Allow | Allow | -------------------------- Asking permission to use notifications
The ability to post noninterrupting notifications provisionally to the Notification Center.
let center = UNUserNotificationCenter.current() center.requestAuthorization(options: [.alert, .sound, .badge, .provisional]) { granted, error in if let error = error { // Handle the error here.</description></item><item><title>HealthKit</title><link>https://yongfrank.github.io/posts/healthkit/</link><pubDate>Wed, 10 May 2023 15:02:18 +0800</pubDate><guid>https://yongfrank.github.io/posts/healthkit/</guid><description>HealthKit 概览 关于 HealthKit 框架
Demo App
graph LR; NSObject --&amp;gt; HKObject; NSObject --&amp;gt; HKObjectType; HKObject --&amp;gt; HKSample; HKSample --&amp;gt; HKQuantitySample-身高心率卡路里等数量数据; HKSample --&amp;gt; HKCategorySample-躺在床上/熟睡/醒着等分类数据; HKSample --&amp;gt; HKWorkout-储存一次活动,例如骑行; HKSample --&amp;gt; HKCorrelation跟食物和血压数据等相关性数据; HKObjectType --&amp;gt; HKSampleType HKSampleType --&amp;gt; HKQuantityType; HKSampleType --&amp;gt; HKCategoryType; HKSampleType --&amp;gt; HKWorkoutType; HKSampleType --&amp;gt; HKCorrelationType; Parent --&amp;gt; Children; Create and save health and fitness samples.
HealthKit Store(HealthKit 商店) :
Characterstic Data 特征数据：生日，血型等 Sample Data 样本数据：HKSample 的子类，下方图片详细介绍了关于 Step 的样本 Workout Data 锻炼数据，HKWorkout Source Data 源数据，HKSource 包含保存样本的应用程序，设备信息，例如来自微信，下方图片详细介绍了关于 Step 的源数据 Deleted objects 删除的对象：HKDeletedObject 临时存储已从 HealthKit存储中删除的项目的 UUID。当用户或其他应用程序删除对象时，您可以使用已删除的对象进行响应。 Tell if a Health Kit sample came from an Apple Watch?</description></item><item><title>Hong Kong Trip</title><link>https://yongfrank.github.io/posts/hongkong-trip/</link><pubDate>Sun, 07 May 2023 13:31:46 +0800</pubDate><guid>https://yongfrank.github.io/posts/hongkong-trip/</guid><description>这个页面是开源的：编辑此页面。
可以分享香港游玩的经验 包括但不限于，港卡，迪士尼，美食，酒店，Apple Store 等攻略～ 发现了一些网络攻略（小红书/b站/tg）等也可以分享交流 旅游经历杂烩 香港旅游经历（附中银香港开卡过程）
可能能用到的优惠 香港有礼 伴手礼 / 礼物 下周末去香港🇭🇰旅游，大家有没有推荐的伴手礼
美心西饼 驱风油……😂 叉烧？ 万花油，活络油，海干货？ 旅游上网 香港旅游以及办卡咨询
手机卡是中国移动的话，用移动的无忧行买 CMHK 本地流量最划算，便宜而且本地 IP 且没有墙；港卡可以找一些诸如联通香港或者 3HK 的低月租卡 办港卡基本上都看网点……港岛和九龙市区的网点排的人会很多有些还有存款要求（很多都是开关后大陆人过去办卡），找一些地址偏一点的网点可能会相对好些。但普遍来说的门槛比较高的是汇丰最好跳过 携程上找吧，便宜实惠又要在市中心在香港是不可能的任务。市中心酒店都很贵。如果要找的话最好去携程上找油尖旺区或者新九龙位置的酒店。很市中心的地方极限省钱的话大概只有尖沙咀旁重庆大厦了 任何一家 Apple Store 都可以吧……尖沙咀的广东道 Apple Store 是全港最大的单体直营店；其次是中环 IFC 国际金融中心内的 Store 基本上可以买到西九龙的票的。为了省钱很多人还是会走口岸过关而不是高铁的。深圳福田站内换乘，从深圳地铁福田站换乘到中国铁路广州局集团福田高铁站（两个福田站名字一样但是性质不一样也隔开）差不多要走 15 分钟的样子。口岸通关的话原来说最近新开的莲塘 /香园围口岸人少，但现在也多了很多大陆旅行团塞爆。所以朝九晚五高峰期每个口岸人都很多。硬要比的话，可能最近正在改造的深圳皇岗口岸（因为要坐皇巴到香港落马洲管制站和最近的口岸改造相对人少）和原来开放的盐田沙头角口岸人要少些。另外一个绝对人少的方法是走港珠澳大桥从珠海到香港，50 多港币的金巴车费，港珠澳大桥香港管制站几乎没人的样子通关几分钟搞定 银行卡 Hong Kong 银行开户攻略
虚拟银行： 天星银行、Tap&amp;amp;Go（拍住赏）、ZA Bank、livi 理慧银行 实体银行： BOC中银香港、HSBC汇丰HK、招商永隆、工银亚洲 工银亚洲 有必要花 3500 元中介费开户吗
有钱的话，直接 50W CNY 扔进去开 HSBC CN 的 premier （卓越理财），然后让 RM 帮国内见证开 US 或者 HK 的 premier （一地 premier ，全球 premier ），HSBC 全球转账到账极快，premier 无手续费。</description></item><item><title>Machine Learning</title><link>https://yongfrank.github.io/posts/machine-learning/</link><pubDate>Sat, 06 May 2023 15:43:05 +0800</pubDate><guid>https://yongfrank.github.io/posts/machine-learning/</guid><description>贝叶斯公式 贝叶斯公式是由英国数学家Thomas Bayes在18世纪提出的一种用于计算概率的方法。它的核心思想是基于已知的先验概率和新的证据，来更新事件发生的后验概率。
具体来说，假设我们有一个事件A和一个观测B，我们想要求解在已知B的情况下，事件A发生的概率。根据贝叶斯公式，这个后验概率可以表示为：
$$ P(A|B) = P(B|A) * P(A) / P(B) $$
其中，P(A)表示A事件的先验概率，即在没有观测到B的情况下，A事件发生的概率；P(B|A)表示在A事件发生的条件下，观测到B的概率，也称为似然度；P(B)表示观测到B的概率，也称为边缘概率。
现在，假设有一个城市在过去的十年中共下过10次雪，每年刮风的概率为20%。如果今天刮风了，那么在这种情况下，下雪的后验概率可以根据贝叶斯公式计算如下：
$$ P(下雪|刮风) = P(刮风|下雪) * P(下雪) / P(刮风) $$
其中，P(下雪)表示先验概率，即在没有观测到刮风的情况下，下雪的概率为10%；P(刮风|下雪)表示在下雪的条件下，刮风的概率为50%；P(刮风)表示观测到刮风的概率，可以通过全概率公式计算：
$$ P(刮风) = P(刮风|下雪) * P(下雪) + P(刮风|不下雪) * P(不下雪) $$
其中，P(刮风|不下雪)表示在不下雪的条件下，刮风的概率为20%，P(不下雪)表示在没有观测到刮风的情况下，不下雪的概率为90%。将以上数据代入贝叶斯公式，我们可以得到：
$$ P(下雪|刮风) = 0.5 * 0.1 / (0.5 * 0.1 + 0.2 * 0.9) = 0.357 $$
也就是说，在刮风的情况下，这个城市下雪的概率为35.7%。</description></item><item><title>Git</title><link>https://yongfrank.github.io/posts/git/</link><pubDate>Sat, 29 Apr 2023 12:10:01 +0800</pubDate><guid>https://yongfrank.github.io/posts/git/</guid><description> Git-LFS
# https://formulae.brew.sh/formula/git-lfs brew install git-lfs git lfs track 10mb.psd git add .gitattributes git commit -m &amp;#39;Add PSD file&amp;#39; git push origin master git lfs pull SourceTree Customized Full Name and Email SourceTree 客制化名字和邮箱 git, sourcetree中针对不同仓库设置不同账户
git config --global user.name &amp;#34;your name&amp;#34; git config --global user.email &amp;#34;your email-address&amp;#34; git config --local user.name &amp;#34;your name&amp;#34; git config --local user.email &amp;#34;your email-address&amp;#34;</description></item><item><title>AVFoundation</title><link>https://yongfrank.github.io/posts/avfoundation/</link><pubDate>Tue, 25 Apr 2023 14:56:43 +0800</pubDate><guid>https://yongfrank.github.io/posts/avfoundation/</guid><description>AVAudioSession AVAudioSessionCategoryOptionDuckOthers</description></item><item><title>Regex Go 已上架 App Store</title><link>https://yongfrank.github.io/regex-go/zh-tw/</link><pubDate>Mon, 24 Apr 2023 20:54:05 +0800</pubDate><guid>https://yongfrank.github.io/regex-go/zh-tw/</guid><description> English 繁體中文 简体中文 利用 Regex Go 掌握 Regex 正規表示式！
🤗 跟繁瑣的文本處理任務說再見吧，透過 Regex Go 的 RegexBuilder，輕鬆實現字符串操作。🤩
App 裡有什麼 Regex Go 使用了 Swift Regex 和 RegexBuilder，兩個在 WWDC22 推出的框架。廣為流傳的 Regex 誕生於上世紀 60 - 70 年代，他在文字處理過程中起到了非常大的作用，但也因為他出現的比較早，所以有很多不足的地方，例如難以閱讀，難以排錯。
而在 WWDC22，RegexBuilder 的誕生，以 DSL 的形式去構建 Regex，讓 Regex 更加易讀，易於維護。Regex Go 希望讓不了解 Regex 的人，能夠通過簡單的拖拉，就能夠使用 Regex，而不需要去學習 Regex 的語法，讓更多的人享受到 coding 帶來的樂趣，效率的提高。
更多細節 從去年開始學習 iOS 到今年，我不僅收穫了知識上的成長，更多的是收穫了一群志同道合的朋友，他們的幫助讓我在學習過程中不再孤單，也讓我在學習過程中不斷地成長。各種沙龍活動，各種技術分享，是這段經歷為我打開了新世界的大門，讓我不再局限於學校的課程，而是能夠自由地去學習自己感興趣的知識。從懵懂無知，到上架第一個 App，這一年的成長，讓我感到非常幸運。
&amp;nbsp;&amp;nbsp; 協議 | 素材 | 聯繫 @cyongfrank</description></item><item><title>Regex Go 已上架 App Store</title><link>https://yongfrank.github.io/regex-go/zh/</link><pubDate>Mon, 24 Apr 2023 20:54:05 +0800</pubDate><guid>https://yongfrank.github.io/regex-go/zh/</guid><description> English 繁體中文 简体中文 利用 Regex Go 掌握 Regex 正则表达式!
🤗 跟繁琐的文本处理任务说再见吧，通过 Regex Go 的 RegexBuilder，轻松实现字符串操作。🤩
App 里有什么 Regex Go 使用了 Swift Regex 和 RegexBuilder，两个在 WWDC22 推出的框架。广为流传的 Regex 诞生于上世纪 60 - 70 年代，他在文字处理过程中起到了非常大的作用，但也因为他出现的比较早，所以有很多不足的地方，例如难以阅读，难以排错。
而在 WWDC22，RegexBuilder 的诞生，以 DSL 的形式去构建 Regex，让 Regex 更加易读，易于维护。Regex Go 希望让不了解 Regex 的人，能够通过简单的拖拽，就能够使用 Regex，而不需要去学习 Regex 的语法，让更多的人享受到 coding 带来的乐趣，效率的提高。
更多细节 从去年开始学习 iOS 到今年，我不仅收获了知识上的成长，更多的是收获了一群志同道合的朋友，他们的帮助让我在学习过程中不再孤单，也让我在学习过程中不断的成长。各种沙龙活动，各种技术分享，是这段经历为我打开了新世界的大门，让我不再局限于学校的课程，而是能够自由的去学习自己感兴趣的知识。从懵懂无知，到上架第一个 App，这一年的成长，让我感到非常幸运。
&amp;nbsp;&amp;nbsp; 协议 | 素材 | 联系 @cyongfrank</description></item><item><title>Design Tutorials for Developers</title><link>https://yongfrank.github.io/posts/design-for-dev/</link><pubDate>Sun, 23 Apr 2023 23:26:08 +0800</pubDate><guid>https://yongfrank.github.io/posts/design-for-dev/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://xuyisheng.top/design_color_system/">不懂设计的产品不是好开发&lt;/a>&lt;/p>
&lt;p>通过这篇文章，我将向大家介绍下关于设计的一些基本知识，让广大开发者在平时的开发中，可以更好的和设计、产品合作（撕逼）。&lt;/p>
&lt;/blockquote></description></item><item><title>Regex Go Privacy Policy</title><link>https://yongfrank.github.io/regex-go/privacy-policy/</link><pubDate>Sat, 22 Apr 2023 20:54:05 +0800</pubDate><guid>https://yongfrank.github.io/regex-go/privacy-policy/</guid><description>Regex Go Privacy Policy Chu Yong built the Regex Go app as a Free app. This SERVICE is provided by Chu Yong at no cost and is intended for use as is.
This page is used to inform visitors regarding my policies regarding the collection, use, and disclosure of Personal Information if anyone decides to use my Service.
If you choose to use my Service, then you agree to the collection and use of information in relation to this policy.</description></item><item><title>Swift Concurrency</title><link>https://yongfrank.github.io/posts/swift-concurrency/</link><pubDate>Sat, 22 Apr 2023 17:32:57 +0800</pubDate><guid>https://yongfrank.github.io/posts/swift-concurrency/</guid><description> Swift Concurrency by Example
Introduction Async/await Sequences and streams Tasks and task groups Actors How to use @MainActor to run code on the main queue
Error: Publishing changes from background threads is not allowed; make sure to publish values from the main thread (via operators like receive(on:)) on model updates.
Solutions</description></item><item><title>Apple Media Services</title><link>https://yongfrank.github.io/posts/apple-media-services/</link><pubDate>Wed, 19 Apr 2023 19:27:35 +0800</pubDate><guid>https://yongfrank.github.io/posts/apple-media-services/</guid><description>Apple Music Marketing Apple Music Marketing Tools How to Embed Apple Music Playlists, Albums and Songs on a Webpage
Apple Media Services
&amp;lt;!-- https://tools.applemediaservices.com/song/ --&amp;gt; &amp;lt;div class=&amp;#34;grid-items&amp;#34;&amp;gt; &amp;lt;iframe src=&amp;#34;https://tools.applemediaservices.com/api/twitter/player/{THE-MUSIC-ID-FROM-APPLE-MARKETING-TOOLS}?locale=en-US&amp;amp;amp;sf=US&amp;amp;amp;itsct=music_box_audiocard&amp;amp;amp;itscg=30200&amp;amp;amp;app=music&amp;amp;amp;ls=1&amp;#34; width=&amp;#34;350&amp;#34; height=&amp;#34;350&amp;#34; class=&amp;#34;twitter-preview&amp;#34;&amp;gt; &amp;lt;/iframe&amp;gt; &amp;lt;/div&amp;gt; See Demo in Music - yongfrank</description></item><item><title>Accelerator April Shanghai</title><link>https://yongfrank.github.io/posts/accelerator-shanghai/</link><pubDate>Tue, 18 Apr 2023 15:40:25 +0800</pubDate><guid>https://yongfrank.github.io/posts/accelerator-shanghai/</guid><description>This page is open source. Improve this page.
April Steve Jobs Archive - Make Something Wonderful - Steve Jobs in his own words
SwiftUI Layout and rendering Luo Shuang Layout by Harry Ng, Sorted About Sorted3
ViewThatFits AnyLayout SwiftUI and UIKit Interaction by Harry Ng, Sorted UIViewRepresentable Performance Hitches
SwiftUI Fast Design by @hzlzh @hzlzh at twitter
MVVM Details polishing - Always on Display LazyVGrid ScrollViewReader import WeatherKit - SF Symbols import MusicKit &amp;amp; import HealthKit WKWebView - Notion Advertisement SDK - Size matters AVKit Localization: twitter = weibo AIGC - ChatGPT, Copilot for Xcode Marketing Skills TestFlight, Media, App Store, PressKit, contact in App KOL Crisp, WeCom Iteration: meet customers&amp;rsquo; requirements aka 「用户许愿，我们实现」 daily operations: ChatGPT bot webpage footer - traffic acquisition SwiftUI Mac App by Justin Yan Elepic</description></item><item><title>Comparison of Swift and Objc</title><link>https://yongfrank.github.io/posts/comparison-of-swift-and-objc/</link><pubDate>Mon, 17 Apr 2023 15:47:55 +0800</pubDate><guid>https://yongfrank.github.io/posts/comparison-of-swift-and-objc/</guid><description>block and closure Objective-C中的Block和Swift中的闭包（Closure）都是一种匿名函数，可以作为参数传递给其他函数或者在函数内部定义。但它们在语法和使用上存在一些区别。
语法 Objective-C的Block使用^运算符来定义，后面跟着参数列表和函数体，例如：
void (^myBlock)(void) = ^{ NSLog(@&amp;#34;Hello, world!&amp;#34;); }; Swift的闭包使用{}来定义，参数列表和函数体在{}中定义，例如：
let myClosure: () -&amp;gt; Void = { print(&amp;#34;Hello, world!&amp;#34;) } 捕获变量 Objective-C的Block可以捕获外部变量并在函数内部使用，例如：
NSString *message = @&amp;#34;Hello, world!&amp;#34;; void (^myBlock)(void) = ^{ NSLog(@&amp;#34;%@&amp;#34;, message); }; Swift的闭包也可以捕获外部变量，但是需要显式地声明捕获变量，并且可以指定捕获方式，例如：
let message = &amp;#34;Hello, world!&amp;#34; let myClosure: () -&amp;gt; Void = { [message] in print(message) } 内存管理 Objective-C的Block需要手动管理内存，因为Block在创建时会捕获外部变量并将其包含在Block中。如果Block被复制到堆上，则需要使用__block修饰符来解决循环引用的问题。
Swift 的闭包使用捕获列表来捕获外部变量，并且自动管理内存。如果闭包被捕获并持有了一个对象，只要闭包存在，这个对象就会被保持在内存中。
总之，Objective-C的Block和Swift的闭包都是一种函数式编程的重要工具，可以用于编写更加简洁、灵活的代码。但是它们在语法和使用上存在一些区别，需要开发者根据实际情况进行选择和使用。
NS and Non-NS TimeInterval &amp;amp; NSTimeInterval typealias TimeInterval = Double typedef double NSTimeInterval; Property 在 Swift 中，@property 被替换为普通的属性定义。nonatomic 属性特性在 Swift 中默认为使用。assign 属性特性用于简单类型的属性，表示直接赋值。NSTimeInterval 被替换为 TimeInterval，BOOL 被替换为 Bool，double 保持不变。</description></item><item><title>Swift Package Manager</title><link>https://yongfrank.github.io/posts/swift-package-manager/</link><pubDate>Sat, 15 Apr 2023 22:26:47 +0800</pubDate><guid>https://yongfrank.github.io/posts/swift-package-manager/</guid><description>.swiftpm Swift Playgrounds App Projects
// swift-tools-version: 5.7 // WARNING: // This file is automatically generated. // Do not edit it by hand because the contents will be replaced. import PackageDescription import AppleProductTypes let package = Package( name: &amp;#34;Regex Go&amp;#34;, platforms: [ .iOS(&amp;#34;16.0&amp;#34;) ], products: [ .iOSApplication( name: &amp;#34;YOUR-APP-NAME&amp;#34;, targets: [&amp;#34;AppModule&amp;#34;], bundleIdentifier: &amp;#34;YOUR-BUNDLE-IDENTIFIER&amp;#34;, teamIdentifier: &amp;#34;YOUR-TEAM-Identifier&amp;#34;, displayVersion: &amp;#34;1.0&amp;#34;, bundleVersion: &amp;#34;1&amp;#34;, appIcon: .asset(&amp;#34;AppIcon&amp;#34;), accentColor: .asset(&amp;#34;AccentColor&amp;#34;), supportedDeviceFamilies: [ .pad, .phone ], supportedInterfaceOrientations: [ .</description></item><item><title>Mac Hint</title><link>https://yongfrank.github.io/posts/mac-hint/</link><pubDate>Fri, 14 Apr 2023 16:50:52 +0800</pubDate><guid>https://yongfrank.github.io/posts/mac-hint/</guid><description>Username, Full Name, Local Network Name YouTube - How To Set Up a New Mac (Step-By-Step Guide)
Storage Reclaiming storage/space from &amp;lsquo;System Data&amp;rsquo; in macOS: A tutorial on understanding the System Data usage.
mac 系统数据 100 多 G 了，有什么清理的办法吗？
看到你有 Xcode 。那么推荐你先试试八爷开发的 Cleaner For Xcode 。另外，一般的清理也可以使用 Disk Drill 以及 Cleaner One Pro ，这两个的免费版就足够使用了。
Search Result with V2EX and google
清理硬碟我唯一推薦用 GrandPerspective。清一堆小檔案不如看哪塊最大來砍
https://grandperspectiv.sourceforge.net/ 直接下載免費、MAS 版要錢
Discord by ethanhuang13
Mac Keyboard mac按键难回弹（按下去软软的）</description></item><item><title>Streaming Media</title><link>https://yongfrank.github.io/posts/streaming-media/</link><pubDate>Sat, 08 Apr 2023 23:50:40 +0800</pubDate><guid>https://yongfrank.github.io/posts/streaming-media/</guid><description>五种常见流媒体协议
流媒体（streaming media）是指将一连串数据压缩后，经过网络分段发送，即时传输以供观看音视频的一种技术。
通过使用 streaming media 技术，用户无需将文件下载到本地即可播放。由于媒体是以连续的数据流发送的，因此在媒体到达时即可播放。可以像下载的文件一样进行暂停、快进或后退操作。
在这篇文章中，首先将说明什么是 video streaming protocol；其次会讨论流协议（streaming protocl）和编解码器之间的区别；最后，将介绍五种常见的流协议。</description></item><item><title>iOS Memory Management</title><link>https://yongfrank.github.io/posts/ios-memory-management/</link><pubDate>Sat, 08 Apr 2023 23:29:01 +0800</pubDate><guid>https://yongfrank.github.io/posts/ios-memory-management/</guid><description>iOS Memory Mgmt / ARC iOS-[内存管理]
在 Objective-C 中，“对象” 相当于办公室里的照明设备。在现实世界中办公室里的照明设备只有一个，但在 Objective-C 的世界里，虽然计算机的资源有限，但一台计算机可以同时处理好几个对象。
此外，“对象的使用环境” 相当于上班进入办公室的人。虽然这里的 “环境” 有时也指在运行中的程序代码、变量、变量作用域、对象等，但在概念上就是使用对象的环境。上班进入办公室的人对办公室照明设备发出的动作，与 Objective-C 中的对应关系则如下表所示
使用弱引用来避免 Retain Cycles retain对象会创建对该对象的强引用（即引用计数 +1）。一个对象在release它的所有强引用之后（即引用计数 =0）才会dealloc。如果两个对象相互retain强引用，或者多个对象，每个对象都强引用下一个对象直到回到第一个，就会出现 “Retain Cycles（循环引用）” 问题。循环引用会导致它们中的任何对象都无法dealloc，就产生了内存泄漏。
举个例子，Document 对象中有一个属性 Page 对象，每个 Page 对象都有一个属性，用于存储它所在的 Document。如果 Document 对象具有对 Page 对象的强引用，并且 Page 对象具有对 Document 对象的强引用，则它们都不能被销毁。
“Retain Cycles” 问题的解决方案是使用弱引用。弱引用是非持有关系，对象do not retain它引用的对象。
ARC新规则 ARC会分析对象的生存期需求，并在编译时自动插入适当的内存管理方法调用的代码，而不需要你记住何时使用retain、release、autorelease方法。编译器还会为你生成合适的dealloc方法。一般来说，如果你使用ARC，那么只有在需要与使用MRC的代码进行交互操作时，传统的 Cocoa 命名约定才显得重要。
ARC引入了一些在使用其他编译器模式时不存在的新规则。这些规则旨在提供完全可靠的内存管理模型。有时候，它们直接地带来了最好的实践体验，也有时候它们简化了代码，甚至在你丝毫没有关注内存管理问题的时候帮你解决了问题。在ARC下必须遵守以下规则，如果违反这些规则，就会编译错误。
不能使用 retain / release / retainCount / autorelease 不能使用 NSAllocateObject / NSDeallocateObject 须遵守内存管理的方法命名规则 不能显式调用 dealloc 使用 @autoreleasepool 块替代 NSAutoreleasePool 不能使用区域（NSZone） 对象型变量不能作为 C 语言结构体（struct / union）的成员 显式转换 “id” 和 “void *” —— 桥接 代码示例中，我们创建了一个 ViewController 类，并使用 ARC 管理内存。我们在 ViewController 中创建了一个 UIView 对象，并将其存储在强引用变量中，以便我们可以访问和使用它。我们还创建了一个方法 createSubview，在其中创建了另一个 UIView 对象，并将其存储在弱引用变量中。在方法结束时，该对象将被释放，因为没有强引用变量引用它。</description></item><item><title>Diary</title><link>https://yongfrank.github.io/diary/</link><pubDate>Sat, 08 Apr 2023 15:11:23 +0800</pubDate><guid>https://yongfrank.github.io/diary/</guid><description>Week 17 4/24 - 4/30 [Offer 27: Mirror Tree]
Sun App Store Mon Search Show More Tue Domain Specific Language Wed DSL Thu Tracking Fri Tracking Week 16 4/17 - 4/23 Mon Coupon Tue Search + YSLA Salon Wed Platform + Community Week 15 4/10 - 4/16 Mon Tue Wed Debug for Community Thu KickOff for Platform Fri Coupon UI [Offer 25: Merge Ascending List] [Offer 26: Sub Structure of a tree]</description></item><item><title>Thread</title><link>https://yongfrank.github.io/posts/thread/</link><pubDate>Sat, 08 Apr 2023 14:58:09 +0800</pubDate><guid>https://yongfrank.github.io/posts/thread/</guid><description>Thread Safety 确保线程安全的几种方法
GCD RAC iOS开发「RAC」RAC的定时、延时、超时方法
GCD的延时方法
// 延时执行 dispatch_time_t delayTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0/** 延时的时间*/ * NSEC_PER_SEC)); dispatch_after(delayTime, dispatch_get_main_queue(), ^{ NSLog(@&amp;#34;延时1秒时间到~&amp;#34;) }); 锁 atomic iOS探索 细数iOS中的那些锁
原子性修饰的属性进行了spinlock加锁处理 非原子性的属性除了没加锁，其他逻辑与atomic一般无二 atomic只能保证setter、getter方法的线程安全，并不能保证数据安全，所以更多的使用nonatomic来修饰 @synchronized NSLock NSLock、NSRecursiveLock、NSCondition和NSConditionLock底层都是对pthread_mutex的封装</description></item><item><title>Blog Bookmark</title><link>https://yongfrank.github.io/posts/blog-bookmark/</link><pubDate>Sat, 08 Apr 2023 14:53:56 +0800</pubDate><guid>https://yongfrank.github.io/posts/blog-bookmark/</guid><description>Trip 游记 | 在日照看到绝美的大海 | 房车 Personal Experience 周兆熊: 从高考到程序员&amp;mdash;一个五年程序员的回忆及建议 Careers 周兆熊: 求职简历中一些常见的问题 Tech iOS @pro648: iOS 学习进程中的demo汇总 @pro648: iOS 学习进程中遇到的知识点 Albert_Duan: iOS 在苹果加速器活动做的 SwiftUI 开发分享 Better Markdown Rendering in SwiftUI tiny66 徐韬 - FB / Alibaba</description></item><item><title>Swift Snippet</title><link>https://yongfrank.github.io/posts/swift-snippet/</link><pubDate>Sat, 08 Apr 2023 11:44:42 +0800</pubDate><guid>https://yongfrank.github.io/posts/swift-snippet/</guid><description>Swift Intro Swift&amp;mdash;一门智能型的编程语言
Common Problem safe subsript 5 个让 Swift 更优雅的扩展——Pt.1 Swift 经常数组越界？教你一招，一劳永逸的解决数组越界的问题
extension Array { subscript (safe index: Int) -&amp;gt; Element? { guard index &amp;gt;= 0 &amp;amp;&amp;amp; index &amp;lt; self.count else { return nil } return self[index] } } values[safe: 2] // &amp;#34;C&amp;#34; values[safe: 3] // nil UIKit Preview UIKit Preview
import UIKit class ViewController: UINavigationController { override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view.</description></item><item><title>SwiftUI Example</title><link>https://yongfrank.github.io/posts/swiftui/</link><pubDate>Mon, 03 Apr 2023 01:39:20 +0800</pubDate><guid>https://yongfrank.github.io/posts/swiftui/</guid><description>This page is open source. Improve this page.
SwiftUI by Example SwiftUI 参考手册 Starred App A Companion for SwiftUI
Working with static text (Laying out text neatly) hws - How to add advanced text styling using AttributedString hws - How to render Markdown content in text Using Markdown in SwiftUI AttributedString struct ContentView: View { private var content: String? { try? String( contentsOf: Bundle.main.url(forResource: &amp;#34;README&amp;#34;, withExtension: &amp;#34;md&amp;#34;)! ) } var txt: AttributedString { var text = try!</description></item><item><title>Combine</title><link>https://yongfrank.github.io/posts/combine/</link><pubDate>Mon, 03 Apr 2023 00:34:18 +0800</pubDate><guid>https://yongfrank.github.io/posts/combine/</guid><description>Sink // 每秒增加 10 % 进度条的代码 import Combine import Foundation @MainActor public class RegularExpressionModel: ObservableObject { @Published var progress = 0.0 private var cancellable: AnyCancellable? init() { startProgressUpdate() } private func startProgressUpdate() { cancellable = Timer.publish(every: 1, on: .main, in: .common) .autoconnect() .sink { [weak self] _ in self?.updateProgress() } } private func updateProgress() { progress += 0.1 if progress == 1.0000 { cancellable?.cancel() } } deinit { cancellable?.cancel() } } 在英语中，sink 这个词有许多不同的意思，包括“水槽”，“下沉”，“降低”，“沉没”等等。在 Combine 框架中，sink 表示订阅者将从源发布者接收新的事件，并执行一个闭包，因此，我们可以将 sink 视为一个“接收器”，用于接收流中的新值并进行后续处理。这个单词可能被用来表示值“下沉”或“降低”到更低级别的代码中进行处理，或者表示订阅者正在“吸收”发布者发出的事件。在 Combine 中，sink 是订阅一个发布者的一种方式，因此这个术语可能也反映了这一点，即“吸收”或“消耗”流中的事件。</description></item><item><title>Performance of Higher Order Functions in Swift</title><link>https://yongfrank.github.io/posts/performance-of-higher-order-functions/</link><pubDate>Sun, 02 Apr 2023 14:23:01 +0800</pubDate><guid>https://yongfrank.github.io/posts/performance-of-higher-order-functions/</guid><description>Why do I compose this article? Leetcode algorithm problems Swift Language Article by skoumal Performance of built-in higher-order functions Map, Filter, Reduce, and flatMap vs. for-in loop in Swift
The most popular higher-order functions are map, filter, and reduce. We all use them since we think that syntax is much better and it is even faster to write them than the old way for-in loop. But is it really true? Have you ever thought about the performance of these built-in functions?</description></item><item><title>App Store Connect</title><link>https://yongfrank.github.io/posts/app-store-connect/</link><pubDate>Thu, 30 Mar 2023 00:12:53 +0800</pubDate><guid>https://yongfrank.github.io/posts/app-store-connect/</guid><description>&lt;p>How to deal with Data and Analytics in App Store Connect?&lt;/p></description></item><item><title>Objc Snippet</title><link>https://yongfrank.github.io/posts/objc-snippet/</link><pubDate>Wed, 29 Mar 2023 21:18:40 +0800</pubDate><guid>https://yongfrank.github.io/posts/objc-snippet/</guid><description>Type unsafe isEqual isEqualTo OC底层原理之isEqual isEqual NSLog(@&amp;#34;%d&amp;#34;, false == 0); NSLog(@&amp;#34;%d&amp;#34;, nil == 0); NSLog(@&amp;#34;%d&amp;#34;, 0 == 0); NSLog(@&amp;#34;%d&amp;#34;, [false isEqual:0]); if (nil == 0) { NSLog(@&amp;#34;equal&amp;#34;); } Nil Safe Solution [InterfaceName toGetNSDictionary:self.model.businessInfo?:@{}]; 这行代码的意思是，首先检查 self.model.businessInfo 是否为 nil，如果不是 nil，则使用 self.model.businessInfo，否则返回一个空的 NSDictionary 对象 {}。
这样写可以避免在访问 self.model.businessInfo 属性时出现空指针异常，因为如果该属性为 nil，则会返回一个空的 NSDictionary 对象，避免了后续的访问出现异常。
Class in Objective-C Apple Developer: Programming With Objective-C Apple Developer: Start Developing Mac Apps Today QuickStart @interface Person : NSObject @property (nonatomic, strong) NSString *name; @property (nonatomic, assign) NSInteger age; @property (nonatomic, assign) int birthYear; - (instancetype)initWithName:(NSString *)name age:(NSInteger)age; - (void)sayHello; @end @implementation Person @synthesize birthYear; - (instancetype)initWithName:(NSString *)name age:(NSInteger)age { self = [super init]; if (self) { _name = name; _age = age; } return self; } - (void)sayHello { NSLog(@&amp;#34;Hello, my name is %@ and I am %ld years old.</description></item><item><title>SpriteKit</title><link>https://yongfrank.github.io/posts/spritekit/</link><pubDate>Wed, 29 Mar 2023 01:36:34 +0800</pubDate><guid>https://yongfrank.github.io/posts/spritekit/</guid><description>import SpriteKit import GameplayKit class GameScene: SKScene { override func didMove(to view: SKView) { let background = SKSpriteNode(imageNamed: &amp;#34;background&amp;#34;) // https://developer.apple.com/design/human-interface-guidelines/foundations/layout#platform-considerations // Remember, unlike UIKit SpriteKit positions things based on their center // – i.e., the point 0,0 refers to the horizontal and vertical center of a node. // iPad mini screen size: 1024x768 // var position: CGPoint { get set } .position The default value is (0.0,0.0). background.position = CGPoint(x: 512, y: 384) // The blend mode used to draw the sprite into the parent’s framebuffer.</description></item><item><title>Xcode IDE</title><link>https://yongfrank.github.io/posts/xcode-ide/</link><pubDate>Mon, 27 Mar 2023 21:31:43 +0800</pubDate><guid>https://yongfrank.github.io/posts/xcode-ide/</guid><description>This page is open source. Improve this page.
Xcode History Xcode是如何诞生的？How did Xcode come into being
Xcode是一款用于开发Mac和iOS应用程序的综合性开发工具，它由苹果公司开发和维护。Xcode最初的版本于2003年发布，自那时以来，它已经成为Mac和iOS开发的标准工具之一。
Xcode的诞生可以追溯到1997年，当时苹果计算机公司正在寻求一款更好的工具来开发它的操作系统和应用程序。此时，苹果正在使用CodeWarrior和MPW等开发工具，但它们并不完全满足苹果的需求。
苹果的开发团队决定开发一款自己的集成开发环境（IDE），旨在更好地支持苹果的开发工作流程。于是，在1997年，苹果成立了一个名为Project Builder的团队，该团队的任务是开发一款全新的IDE。
Project Builder最初基于NeXTSTEP操作系统的工具，但随着苹果收购NeXT，它也开始使用Mac OS X技术。2003年，苹果发布了Xcode 1.0版本，这是一款全新的IDE，它汇集了Project Builder和一些其他开发工具的功能。随着时间的推移，Xcode的版本不断更新和改进，逐渐成为苹果开发的标准工具。
今天，Xcode仍然是苹果开发应用程序的主要工具之一。它提供了一个综合性的工作环境，支持多种编程语言和开发框架，帮助开发人员更快、更高效地开发和部署应用程序。
LLVM和Clang背后的故事 Story of LLVM &amp;amp; Clang LLVM是Apple官方支持的编译器，而该编译器的前端是Clang，这两个工具都被集成到了Xcode里面。在这篇文章中，我们来了解一下LLVM和Clang背后的故事。
此外，Clang有一个重要的衍生项目是静态分析工具，能够通过自动分析程序的逻辑，在编译时就找出程序可能的bug，这个功能叫做ARC。ARC的实现让当时的广大开发者们大为惊愕。
除了LLVM核心和Clang以外，LLVM还包括一些重要的子项目，比如一个原生支持调试多线程程序的调试器LLDB和一个C++的标准库libstdc++。不光是Apple，很多的项目和编程语言都从LLVM中取得了关键性的技术。
苹果用户界面Aqua背后的故事
IDE Tutorials Xcode 6 Articles: Shortcut &amp;hellip; Xcode overview Collaboration with Individual Teams Make sure you
How to share an Individual Apple iOS Developer Account
There should be at least 2 files you need to import in Keychain: - development certificate - distribution certificate Also, not sure, but it might help: - the original self-signed certificate you submitted to apple (the CSR)</description></item><item><title>UIKit Intro in Objective-C &amp; Swift</title><link>https://yongfrank.github.io/posts/uikit-intro/</link><pubDate>Mon, 27 Mar 2023 13:31:46 +0800</pubDate><guid>https://yongfrank.github.io/posts/uikit-intro/</guid><description>&lt;p>Everything about UIKit in Objective-C &amp;amp; Swift when I was coding.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.hackingwithswift.com/example-code/uikit/">hws - UIKit Example Code&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Singleton and Data Design in Swift / SwiftUI</title><link>https://yongfrank.github.io/posts/singleton-in-swift/</link><pubDate>Sat, 25 Mar 2023 01:39:04 +0800</pubDate><guid>https://yongfrank.github.io/posts/singleton-in-swift/</guid><description>Swift Class vs Struct, which is better for Model Design // using struct。 var herDog = Dog() { // if herDog is changed, print message. didSet { print(&amp;#34;Her dog is changed!&amp;#34;) } } herDog.name = &amp;#34;Starlord&amp;#34; // Her dog is changed! // using class。 var herCat = Cat() { didSet { print(&amp;#34;Her cat is changed!&amp;#34;) } } herCat.name = &amp;#34;Mumu&amp;#34; // No print message. 有了以上這些資訊，我們可以推導出，文件 Document 最好用 class 來寫。怎麼說呢？首先，文件必須要有一個持續存在的實體，如此才能夠隨時通知 controller 資料的變動，並且進行非同步或甚至自動的資料更新。這點 struct 與 class 都辦得到：</description></item><item><title>Facebook Yoga / Flexbox</title><link>https://yongfrank.github.io/posts/facebook-flexbox/</link><pubDate>Fri, 24 Mar 2023 13:02:13 +0800</pubDate><guid>https://yongfrank.github.io/posts/facebook-flexbox/</guid><description>Repository on GitHub By facebook Layout Code Online HTML CSS JavaScript
align-* align-items
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Align-items Stretch Demo&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .container { display: flex; height: 200px; align-items: stretch; background-color: lightgray; } .item { width: 100px; margin: 10px; background-color: #f1c40f; text-align: center; font-size: 24px; line-height: 2; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;item&amp;#34;&amp;gt;1&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;item&amp;#34;&amp;gt;2&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;item&amp;#34;&amp;gt;3&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; line-* line height</description></item><item><title>Docker Getting Started</title><link>https://yongfrank.github.io/posts/docker-getting-started/</link><pubDate>Tue, 21 Mar 2023 13:19:38 +0800</pubDate><guid>https://yongfrank.github.io/posts/docker-getting-started/</guid><description># 运行以下命令在 Docker 容器中克隆 GitHub 仓库： # 该命令的含义是，以 alpine/git 镜像为基础， # 启动一个名为 repo 的容器，并在容器内执行 git clone 命令， # 将 https://github.com/docker/getting-started.git 仓库克隆到当前目录下的 . 文件夹中。 docker run --name repo alpine/git clone https://github.com/docker/getting-started.gited/ . # 然后，运行以下命令将克隆的代码复制到本地文件系统中： # 该命令的含义是，将名为 repo 的容器中 /git/getting-started/ # 文件夹下的所有文件和子文件夹复制到当前目录下。 docker cp repo:/git/getting-started/ . docker run -d -p 80:80 docker/getting-started # You&amp;#39;ll notice a few flags being used. Here&amp;#39;s some more info on them: # -d - run the container in detached mode (in the background) # -p 80:80 - map port 80 of the host to port 80 in the container # docker/getting-started - the image to use Dockerfile Dockerfile for Dev FROM ubuntu LABEL org.</description></item><item><title>Clash &amp; Config File</title><link>https://yongfrank.github.io/posts/clash-config-file/</link><pubDate>Mon, 20 Mar 2023 10:26:07 +0800</pubDate><guid>https://yongfrank.github.io/posts/clash-config-file/</guid><description>infrastructure port hosts dns mode: Rule proxies: proxy name, server, Password proxies-groups: name, type, proxies rules: Match RULE, DOMAIN, Request Rule port: 7890 socks-port: 7891 redir-port: 7892 mixed-port: 7893 allow-lan: false mode: Rule log-level: info ipv6: false hosts: services.googleapis.cn: 142.250.196.131 www.google.cn: 142.250.196.131 external-controller: 0.0.0.0:9090 clash-for-android: append-system-dns: false profile: tracing: true experimental: sniff-tls-sni: true dns: enable: true listen: 127.0.0.1:8853 default-nameserver: - 223.5.5.5 - 8.8.4.4 ipv6: false enhanced-mode: fake-ip fake-ip-filter: {- &amp;#34;*.lan&amp;#34;} nameserver: {- &amp;#34;114.</description></item><item><title>Azure VPS</title><link>https://yongfrank.github.io/posts/azure-vps/</link><pubDate>Sat, 18 Mar 2023 20:46:20 +0800</pubDate><guid>https://yongfrank.github.io/posts/azure-vps/</guid><description>ssh-keygen SSH keygen for passwordless login is based on the principles of public-key cryptography and key authentication mechanism. In SSH passwordless login, a pair of keys, including a public key and a private key, needs to be generated. The private key is stored on the local host, while the public key can be shared between the local host and the remote server.
SSH 免密登录的原理基于公钥密码学和密钥认证机制。在 SSH 免密登录中，需要生成一对密钥，分别是公钥和私钥。私钥存储在本地主机上，而公钥则可以在本地主机和远程服务器之间共享。
In SSH passwordless login, the user first needs to generate a pair of keys on the local host and then copy the public key to the remote server.</description></item><item><title>ActivityKit &amp; WidgetKit on iOS</title><link>https://yongfrank.github.io/posts/activitykit-and-widgetkit/</link><pubDate>Mon, 13 Mar 2023 17:23:10 +0800</pubDate><guid>https://yongfrank.github.io/posts/activitykit-and-widgetkit/</guid><description>My apps were featured on the App Store a few times during the year because of lock screen widgets. Check my guide on lock screen widgets if you still don&amp;rsquo;t have them in your app. twitter
Live Activity 相关限制 iOS 16.1 及以上 更新动态数据大小不能超过 4KB 只能在应用处于前台时从应用启动 LiveActivity。但是，可以在应用程序在后台运行时从应用程序更新或结束实时活动——例如，使用 Background Task。 生命周期与约束 利用 Live Activities 显示实时数据 与 Widget 相比，实时活动使用不同的机制来接收更新。Live Activities 不是使用时间轴机制，而是使用 ActivityKit 从您的应用程序接收更新的数据，并通过 ActivityKit push notifications 远程接收。
Live Activities use a different mechanism to receive updates compared to widgets.</description></item><item><title>UIImagePickerController in UIKit</title><link>https://yongfrank.github.io/posts/uiimage-picker-controller-uikit/</link><pubDate>Fri, 03 Mar 2023 11:43:07 +0800</pubDate><guid>https://yongfrank.github.io/posts/uiimage-picker-controller-uikit/</guid><description>Keyword UIImagePickerController NSObject UIImagePickerController &amp;amp; PHPickerViewController Reference: JianShu
如何在 iOS 14 中使用新推出的 PhotoKit 框架中的 PHPickerViewController 类，并通过 Objective C 和Swift 语言从照片库中选择照片。
多年来，在 iOS 上选择照片和视频的最简单方法是使用 UIImagePickerController 类。该类允许你呈现一个内置的系统 UI 来选择照片或视频，并将其返回到你的应用程序中，而无需构建选择照片的 UI 页面或访问照片库的提示。
然而，UIImagePickerController 也有很多缺点：它相当基础，而且呈现给用户浏览照片库的 UI 也非常有限；一次只能选择一个（图片或者视频），而且只支持基本的过滤功能。在 iOS 14 中，UIImagePickerController 被 &amp;ldquo;软废弃 &amp;ldquo;了。虽然目前还没有被标记为废弃，但如果你看一下头文件，就会发现 API 标记有这个
API_TO_BE_DEPRECATED
iOS 14 中新的 PHPicker 类不是在 UIKit 框架中的，而是位于 PhotosUI 框架中
Navigation Button &amp;amp; Function for selection // inside viewDidLoad self.navigationItem.leftBarButtonItem = UIBarButton(barButtonSystemItem: .add, target: self, action: #selector(addNewPerson)) // inside class like ViewController @objc func addNewPerson() { // @MainActor class UIImagePickerController : UINavigationController let picker = UIImagePickerController() picker.</description></item><item><title>Welcome 😀</title><link>https://yongfrank.github.io/about/</link><pubDate>Thu, 02 Mar 2023 11:20:03 +0800</pubDate><guid>https://yongfrank.github.io/about/</guid><description>👋 Hello, I&amp;rsquo;m Frank, also known as @yongfrank on GitHub. 👀 I&amp;rsquo;m passionate about programming. 🌱 Currently, I&amp;rsquo;m learning Swift, C/C++, Python, HTML/CSS/JavaScript. 📫 You can reach me on Twitter. My Apps My Project Regex Go - Open Source App on the GitHub Master Regex with Regex Go!
🤗 Say goodbye to tedious text processing tasks with Regex Go - your ultimate tool for seamless string manipulation using Regex and user-friendly RegexBuilder 🤩.</description></item><item><title>断舍离</title><link>https://yongfrank.github.io/second-hand/</link><pubDate>Thu, 02 Mar 2023 11:13:42 +0800</pubDate><guid>https://yongfrank.github.io/second-hand/</guid><description>更新时间 2022-09-25 10:31:48
联系方式 绿色软件: Y3lvbmdmcmFuaw==
Telegram: https://t.me/heindelssohn
杭州自提优先
闲置区域 名称 配置详情 价格 备注 状态 iPhone 13 Pro Max 银色 256G + 衫绿色 Leather Case，保修到 2022/11/26 7200 闲鱼链接 售出 Apple Watch S7 45mm GPS 版本，星光色铝金属 + Nike 运动表带，保修到 2022/12/25 2500 闲鱼链接 售出 AirPods Pro 1 全新未拆封 1200 闲鱼链接 售出 iPad 9 无线局域网机型，全新未拆封，256G 3400 闲鱼链接 售出 合租区域 名称 详情 价格 备注 状态 Microsoft 365 CN 45 / 年 Disney+ 美区 30 / 季度 长期合租</description></item><item><title>Hugo Init</title><link>https://yongfrank.github.io/posts/hugo-init/</link><pubDate>Thu, 02 Mar 2023 11:06:36 +0800</pubDate><guid>https://yongfrank.github.io/posts/hugo-init/</guid><description>&lt;p>This article is about how to init a hugo site.&lt;/p></description></item><item><title>New Blog Site, Hugo, Publish</title><link>https://yongfrank.github.io/posts/new-blog-site/</link><pubDate>Thu, 02 Mar 2023 10:52:24 +0800</pubDate><guid>https://yongfrank.github.io/posts/new-blog-site/</guid><description>Reference iOS DEVELOPER WRITER. SPEAKER.</description></item><item><title>Hugo Test</title><link>https://yongfrank.github.io/posts/pogo-test/</link><pubDate>Mon, 27 Feb 2023 21:20:44 +0800</pubDate><guid>https://yongfrank.github.io/posts/pogo-test/</guid><description>Hello world This is Frank&amp;rsquo;s first post.
Introduction This is bold text, and this is emphasized text.
Visit the Hugo website!</description></item><item><title>Smart Speaker based on GPT by OpenAI</title><link>https://yongfrank.github.io/posts/openai-smart-speaker/</link><pubDate>Thu, 02 Feb 2023 12:31:27 +0800</pubDate><guid>https://yongfrank.github.io/posts/openai-smart-speaker/</guid><description>GitHub Link: GitHub Video Link: Twitter
Trigger - picovoice.ai Recording - PyAudio ASR - Microsoft Azure Table Of Content Table Of Content Characteristics Example Questions Steps Step 1. Install all dependencies client - npm install Step 2. Train Wake word(Optional) Step 3. change .env.example to .env and filling .env files Step 4. Change TEST_MODE to True or IS_RASPBERRYPI in server/utils/config.py(Important), connect url in client/src/app.js(Optional) Step 4. run sh start.sh or server - app.</description></item><item><title>Linux Tips</title><link>https://yongfrank.github.io/posts/linux-tips/</link><pubDate>Wed, 18 Jan 2023 15:54:04 +0800</pubDate><guid>https://yongfrank.github.io/posts/linux-tips/</guid><description>特殊符号 ` grave accent noun
a mark placed over a vowel in some languages to show how it should be pronounced, as over the e in the French word père 钝重音符，沉音符，抑音符（标在元音上面表发音）
➡ compare acute accent, circumflex, tilde (1) , umlaut
➡ see also grave1
echo `date` echo $(date) $(( )) 用于数学运算 echo $(( 1 + 1 )) USAGE google explaination
在命令行工具的用法说明中，通常有一些符号来表示参数的类型和数量。这些符号的含义可能因不同的工具而有所差异，但一般来说，有以下几种常见的规则²：
[]: 表示方括号内的参数是可选的，可以提供也可以省略； &amp;lt;&amp;gt;: 表示尖括号内的参数是必需的，必须提供； &amp;hellip;: 表示省略号前面的参数可以重复多次，或者表示任意数量和类型的参数； |: 表示竖线两边的参数是互斥的，只能选择其中一个。 例如，假设有一个工具叫做 copy，它用于复制文件或目录。它的用法说明可能是这样：</description></item><item><title>Runtime Explained</title><link>https://yongfrank.github.io/posts/runtime-explained/</link><pubDate>Tue, 03 Jan 2023 16:13:29 +0800</pubDate><guid>https://yongfrank.github.io/posts/runtime-explained/</guid><description>RUNTIME Generally Compile time error Link time Runtime error Compile Time Error Runtime Error Time Earlier Later Error Grammar Error, Semantic Error Memory Error, Math Error Easy Hard Specifically Runtime Library (stdio.h) Runtime Environment No Runtime: C/C++, Rust Light Runtime: Golang Heavy Runtime: Java(JVM), Python(CPython), C#(.NET Runtime) JRE = JVM + Library No Runtime Runtime Memory Mgmt Mannually Automatically Thread Model Rely on OS Rely on Runtime System Interaction Directly Indirectly(rely on Runtime) Efficiency High Low(High on JIT) Bare Metal &amp;mdash;&amp;mdash;- 运行时 = 运行时环境 + 运行时库</description></item><item><title>Automatic Control Principles</title><link>https://yongfrank.github.io/posts/automatic-control-principles/</link><pubDate>Sun, 11 Dec 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/automatic-control-principles/</guid><description>Mason&amp;rsquo;s Gain Formula Wikipedia
Mason&amp;rsquo;s gain formula (MGF) is a method for finding the transfer function $H(s)$ of a linear signal-flow graph (SFG).
$$ P = \frac{\sum_{k=1}^n G_k \Delta_k}{\Delta} \ \Delta = 1 - \sum L_i + \sum L_iL_j - \sum L_i L_j L_k + &amp;hellip; + (-1)^m\sum&amp;hellip;+&amp;hellip; $$</description></item><item><title>Swift Codable, JSON, UserDefaults Explained</title><link>https://yongfrank.github.io/posts/2022-10-03-codable-explained/</link><pubDate>Mon, 03 Oct 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-10-03-codable-explained/</guid><description>What&amp;rsquo;s JSON JSON is a file format to store key-value pair.
It&amp;rsquo;s JSON for Pikachu
What&amp;rsquo;s Codable in the Swift Codable was introduced in Swift 4.0, bringing with it incredibly smooth conversion between Swift data types and JSON.
The code comes from
Hacking With Swift by Paul Hudson
Codable cheat sheet
Convert between JSON and Swift types the smart way
Part I: Codable Part Encoding and decoding JSON import Foundation let json = &amp;#34;&amp;#34;&amp;#34; [ { &amp;#34;name&amp;#34;:&amp;#34;Frank&amp;#34;, &amp;#34;age&amp;#34;: 20 }, { &amp;#34;name&amp;#34;: &amp;#34;Paul&amp;#34;, &amp;#34;age&amp;#34;: 38 } ] &amp;#34;&amp;#34;&amp;#34; /// Convert json into a **Data** object because that&amp;#39;s /// what Codable decoders work with.</description></item><item><title>Swift: Math Algorithm</title><link>https://yongfrank.github.io/posts/2022-10-02-math-algorithm/</link><pubDate>Sun, 02 Oct 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-10-02-math-algorithm/</guid><description>Prime Number A prime number is a whole number greater than 1 whose only factors are 1 and itself.
2, 3, 5, 7, 11, 13, 17, 19, 23, 29 are prime numbers.
Fastest Prime Checker by Noah Wilder on the stack overflow Swift 4.2, Xcode 10.1
This prime checking function and extension is the most efficient as it checks the divisibility of only $\frac{1}{2}\sqrt{n}$ integers.
Complexity: $O(\frac{1}{2} \sqrt{n})$
/// https://stackoverflow.</description></item><item><title>Swift: Image Picker UIKit in the SwiftUI</title><link>https://yongfrank.github.io/posts/2022-09-28-swift-image-picker-and-uiviewcontroller/</link><pubDate>Wed, 28 Sep 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-28-swift-image-picker-and-uiviewcontroller/</guid><description>Swift: Image Picker UIKit in the SwiftUI Wrapping a UIViewController in a SwiftUI view
Using coordinators to manage SwiftUI view controllers
import SwiftUI import PhotosUI struct ContentView: View { /// This particular struct is designed to show an image, /// so we need an optional **Image** view to hold the selected image, @State private var imageToBeDisplayedOnTheScreen: Image? /// plus some state that determines whether the sheet is showing or not.</description></item><item><title>Swift Overloading</title><link>https://yongfrank.github.io/posts/2022-09-24-swift-overloading/</link><pubDate>Sat, 24 Sep 2022 14:28:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-24-swift-overloading/</guid><description>Operator Overloading how to use operator overloading - Hacking With Swift
Operator overloading is the practice of adding new operators and modifying existing ones to do different things.
To create your own operator you need to tell Swift whether it should be prefix (before its operand; the values used with it), postfix (after its operand), or infix. The most common is infix: +, -, *, and more are all infix.</description></item><item><title>Swift Linked List</title><link>https://yongfrank.github.io/posts/2022-09-23-linkedlist/</link><pubDate>Fri, 23 Sep 2022 11:00:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-23-linkedlist/</guid><description>Linked List by Kelvin Tan
LinkedList in Swift by DamonLu on juejin.com
Definition Linked list is a chain of nodes. Nodes have two responsibilities:
Hold a value. Hold a reference to the next node in which a nil value represent the end of the list. Node and LinkedList Node has to be defined in Class, because of the reference.
// The &amp;lt;T&amp;gt; represent generic data where you could use // any data types such as Int, String or others.</description></item><item><title>Swift Network URLSession</title><link>https://yongfrank.github.io/posts/2022-09-23-swift-network/</link><pubDate>Fri, 23 Sep 2022 09:50:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-23-swift-network/</guid><description>Swift Network URLSession Sending and receiving Codable data with URLSession and SwiftUI
Loading an image from a remote server
import SwiftUI struct InternetNetwork: View { @StateObject var vm = ViewModel() var body: some View { if #available(iOS 16.0, *) { NavigationStack { contentOfMusic } } else { NavigationView { contentOfMusic } } } var contentOfMusic: some View { Form { TextField(&amp;#34;Enter singer&amp;#34;, text: $vm.inputForSearching) .textFieldStyle(.roundedBorder) Text(vm.url) // We want that to be run as soon as our List is shown, // but we can’t just use onAppear() here // because that doesn’t know how to handle sleeping functions – // it expects its function to be synchronous.</description></item><item><title>Swift QRCode and Image Processing</title><link>https://yongfrank.github.io/posts/2022-09-22-swift-qrcode-image-processing/</link><pubDate>Thu, 22 Sep 2022 15:50:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-22-swift-qrcode-image-processing/</guid><description>QRCode Generator Generating and scaling up a QR code
// First, we need to bring in all the Core Image filters using a new import: import SwiftUI import CoreImage.CIFilterBuiltins func generateQRCode(from string: String) -&amp;gt; UIImage { // We need two properties to store an active Core Image context let context = CIContext() // and an instance of Core Image’s QR code generator filter let filter = CIFilter.qrCodeGenerator() // Working with Core Image filters requires us to provide some input data.</description></item><item><title>Swift throws and rethrows, function as parameter</title><link>https://yongfrank.github.io/posts/2022-09-21-swift-throws-rethrows/</link><pubDate>Wed, 21 Sep 2022 11:31:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-21-swift-throws-rethrows/</guid><description>Keyword throws What is a throwing function?
Throwing functions are those that will flag up errors if problems happen, and Swift requires you to handle those errors in your code.
How to handle errors in functions
enum PasswordError: Error { case short, obvious } func checkPassword(_ password: String) throws -&amp;gt; Bool { if password.count &amp;lt; 6 { throw PasswordError.short } if password == &amp;#34;123456&amp;#34; { throw PasswordError.obvious } return true } let password = &amp;#34;123456&amp;#34; do { let isPasswordPassed = try checkPassword(password) if isPasswordPassed { print(&amp;#34;Password Passed!</description></item><item><title>Summer Vacation Diary</title><link>https://yongfrank.github.io/posts/2022-07-08-summer-diary/</link><pubDate>Fri, 08 Jul 2022 21:44:13 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-07-08-summer-diary/</guid><description>Thu Jul 21 Swift How to use VideoPlayer in SwiftUI Mon Jul 18 Swift Parse HTML in Swift 5 (HTMLKit) - Xcode 11, 2020, iOS Development Fri Jul 16 Swift FileManager Swift 5 Tutorials
Strom Viewer - Project 1
iOS 14 Beta 6 File Importer &amp;amp; File Exporter - SwiftUI 2.0 Document Picker LeetCode LeetCode in Python 13. Roman to Integer LeetCode in Swift 13. Roman to Integer Thu Jul 14 Git git pull and git pull &amp;ndash;rebase git tutorial Fri Jul 8 Vapor Getting Started with Vapor 4 - CodeWithChris</description></item><item><title>CS61A fun part, 2022 summer</title><link>https://yongfrank.github.io/posts/2022-06-28-cs61a-fun-part/</link><pubDate>Tue, 28 Jun 2022 10:16:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-06-28-cs61a-fun-part/</guid><description>CHAPTER 1 Building Abstractions with Functions Object, Set, Function In the composing programs, there is an assignment statement.
from urllib.request import urlopen shakespeare = urlopen(&amp;#39;http://composingprograms.com/shakespeare.txt&amp;#39;) # This statement is to save all words in Set words by words words = set(shakespeare.read().decode().split()) # {} means Set, and it will print all words in &amp;#34;words&amp;#34; above print({w for w in words}) # [::-1] enumerate each letter in a words, but -1 dictates to step backwards.</description></item><item><title>My First Post</title><link>https://yongfrank.github.io/posts/2022-06-25-my-first-post/</link><pubDate>Sat, 25 Jun 2022 22:55:05 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-06-25-my-first-post/</guid><description>func helloWorld() { print(&amp;#34;Hi, my name is Frank&amp;#34;) }</description></item><item><title/><link>https://yongfrank.github.io/posts/fast-design-for-developers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/fast-design-for-developers/</guid><description/></item></channel></rss>