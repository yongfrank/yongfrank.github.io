<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>study on Blog by Frank</title><link>https://yongfrank.github.io/categories/study/</link><description>Recent content in study on Blog by Frank</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 11 Dec 2022 16:37:00 +0000</lastBuildDate><atom:link href="https://yongfrank.github.io/categories/study/index.xml" rel="self" type="application/rss+xml"/><item><title>Automatic Control Principles</title><link>https://yongfrank.github.io/posts/automatic-control-principles/</link><pubDate>Sun, 11 Dec 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/automatic-control-principles/</guid><description>Mason&amp;rsquo;s Gain Formula Wikipedia
Mason&amp;rsquo;s gain formula (MGF) is a method for finding the transfer function $H(s)$ of a linear signal-flow graph (SFG).
$$ P = \frac{\sum_{k=1}^n G_k \Delta_k}{\Delta} \ \Delta = 1 - \sum L_i + \sum L_iL_j - \sum L_i L_j L_k + &amp;hellip; + (-1)^m\sum&amp;hellip;+&amp;hellip; $$</description></item><item><title>Swift Codable, JSON, UserDefaults Explained</title><link>https://yongfrank.github.io/posts/2022-10-03-codable-explained/</link><pubDate>Mon, 03 Oct 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-10-03-codable-explained/</guid><description>What&amp;rsquo;s JSON JSON is a file format to store key-value pair.
It&amp;rsquo;s JSON for Pikachu
What&amp;rsquo;s Codable in the Swift Codable was introduced in Swift 4.0, bringing with it incredibly smooth conversion between Swift data types and JSON.
The code comes from
Hacking With Swift by Paul Hudson
Codable cheat sheet
Convert between JSON and Swift types the smart way
Part I: Codable Part Encoding and decoding JSON import Foundation let json = &amp;#34;&amp;#34;&amp;#34; [ { &amp;#34;name&amp;#34;:&amp;#34;Frank&amp;#34;, &amp;#34;age&amp;#34;: 20 }, { &amp;#34;name&amp;#34;: &amp;#34;Paul&amp;#34;, &amp;#34;age&amp;#34;: 38 } ] &amp;#34;&amp;#34;&amp;#34; /// Convert json into a **Data** object because that&amp;#39;s /// what Codable decoders work with.</description></item><item><title>Swift: Math Algorithm</title><link>https://yongfrank.github.io/posts/2022-10-02-math-algorithm/</link><pubDate>Sun, 02 Oct 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-10-02-math-algorithm/</guid><description>Prime Number A prime number is a whole number greater than 1 whose only factors are 1 and itself.
2, 3, 5, 7, 11, 13, 17, 19, 23, 29 are prime numbers.
Fastest Prime Checker by Noah Wilder on the stack overflow Swift 4.2, Xcode 10.1
This prime checking function and extension is the most efficient as it checks the divisibility of only $\frac{1}{2}\sqrt{n}$ integers.
Complexity: $O(\frac{1}{2} \sqrt{n})$
/// https://stackoverflow.</description></item><item><title>Swift: Image Picker UIKit in the SwiftUI</title><link>https://yongfrank.github.io/posts/2022-09-28-swift-image-picker-and-uiviewcontroller/</link><pubDate>Wed, 28 Sep 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-28-swift-image-picker-and-uiviewcontroller/</guid><description>Swift: Image Picker UIKit in the SwiftUI Wrapping a UIViewController in a SwiftUI view
Using coordinators to manage SwiftUI view controllers
import SwiftUI import PhotosUI struct ContentView: View { /// This particular struct is designed to show an image, /// so we need an optional **Image** view to hold the selected image, @State private var imageToBeDisplayedOnTheScreen: Image? /// plus some state that determines whether the sheet is showing or not.</description></item><item><title>Swift Overloading</title><link>https://yongfrank.github.io/posts/2022-09-24-swift-overloading/</link><pubDate>Sat, 24 Sep 2022 14:28:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-24-swift-overloading/</guid><description>Operator Overloading how to use operator overloading - Hacking With Swift
Operator overloading is the practice of adding new operators and modifying existing ones to do different things.
To create your own operator you need to tell Swift whether it should be prefix (before its operand; the values used with it), postfix (after its operand), or infix. The most common is infix: +, -, *, and more are all infix.</description></item><item><title>Swift Linked List</title><link>https://yongfrank.github.io/posts/2022-09-23-linkedlist/</link><pubDate>Fri, 23 Sep 2022 11:00:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-23-linkedlist/</guid><description>Linked List by Kelvin Tan
LinkedList in Swift by DamonLu on juejin.com
Definition Linked list is a chain of nodes. Nodes have two responsibilities:
Hold a value. Hold a reference to the next node in which a nil value represent the end of the list. Node and LinkedList Node has to be defined in Class, because of the reference.
// The &amp;lt;T&amp;gt; represent generic data where you could use // any data types such as Int, String or others.</description></item><item><title>Swift Network URLSession</title><link>https://yongfrank.github.io/posts/2022-09-23-swift-network/</link><pubDate>Fri, 23 Sep 2022 09:50:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-23-swift-network/</guid><description>Swift Network URLSession Sending and receiving Codable data with URLSession and SwiftUI
Loading an image from a remote server
import SwiftUI struct InternetNetwork: View { @StateObject var vm = ViewModel() var body: some View { if #available(iOS 16.0, *) { NavigationStack { contentOfMusic } } else { NavigationView { contentOfMusic } } } var contentOfMusic: some View { Form { TextField(&amp;#34;Enter singer&amp;#34;, text: $vm.inputForSearching) .textFieldStyle(.roundedBorder) Text(vm.url) // We want that to be run as soon as our List is shown, // but we can’t just use onAppear() here // because that doesn’t know how to handle sleeping functions – // it expects its function to be synchronous.</description></item><item><title>Swift QRCode and Image Processing</title><link>https://yongfrank.github.io/posts/2022-09-22-swift-qrcode-image-processing/</link><pubDate>Thu, 22 Sep 2022 15:50:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-22-swift-qrcode-image-processing/</guid><description>QRCode Generator Generating and scaling up a QR code
// First, we need to bring in all the Core Image filters using a new import: import SwiftUI import CoreImage.CIFilterBuiltins func generateQRCode(from string: String) -&amp;gt; UIImage { // We need two properties to store an active Core Image context let context = CIContext() // and an instance of Core Image’s QR code generator filter let filter = CIFilter.qrCodeGenerator() // Working with Core Image filters requires us to provide some input data.</description></item><item><title>Swift throws and rethrows, function as parameter</title><link>https://yongfrank.github.io/posts/2022-09-21-swift-throws-rethrows/</link><pubDate>Wed, 21 Sep 2022 11:31:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-21-swift-throws-rethrows/</guid><description>Keyword throws What is a throwing function?
Throwing functions are those that will flag up errors if problems happen, and Swift requires you to handle those errors in your code.
How to handle errors in functions
enum PasswordError: Error { case short, obvious } func checkPassword(_ password: String) throws -&amp;gt; Bool { if password.count &amp;lt; 6 { throw PasswordError.short } if password == &amp;#34;123456&amp;#34; { throw PasswordError.obvious } return true } let password = &amp;#34;123456&amp;#34; do { let isPasswordPassed = try checkPassword(password) if isPasswordPassed { print(&amp;#34;Password Passed!</description></item><item><title>Summer Vacation Diary</title><link>https://yongfrank.github.io/posts/2022-07-08-summer-diary/</link><pubDate>Fri, 08 Jul 2022 21:44:13 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-07-08-summer-diary/</guid><description>Thu Jul 21 Swift How to use VideoPlayer in SwiftUI Mon Jul 18 Swift Parse HTML in Swift 5 (HTMLKit) - Xcode 11, 2020, iOS Development Fri Jul 16 Swift FileManager Swift 5 Tutorials
Strom Viewer - Project 1
iOS 14 Beta 6 File Importer &amp;amp; File Exporter - SwiftUI 2.0 Document Picker LeetCode LeetCode in Python 13. Roman to Integer LeetCode in Swift 13. Roman to Integer Thu Jul 14 Git git pull and git pull &amp;ndash;rebase git tutorial Fri Jul 8 Vapor Getting Started with Vapor 4 - CodeWithChris</description></item><item><title>CS61A fun part, 2022 summer</title><link>https://yongfrank.github.io/posts/2022-06-28-cs61a-fun-part/</link><pubDate>Tue, 28 Jun 2022 10:16:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-06-28-cs61a-fun-part/</guid><description>CHAPTER 1 Building Abstractions with Functions Object, Set, Function In the composing programs, there is an assignment statement.
from urllib.request import urlopen shakespeare = urlopen(&amp;#39;http://composingprograms.com/shakespeare.txt&amp;#39;) # This statement is to save all words in Set words by words words = set(shakespeare.read().decode().split()) # {} means Set, and it will print all words in &amp;#34;words&amp;#34; above print({w for w in words}) # [::-1] enumerate each letter in a words, but -1 dictates to step backwards.</description></item></channel></rss>