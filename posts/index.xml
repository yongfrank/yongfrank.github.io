<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Blog by Frank</title><link>https://yongfrank.github.io/posts/</link><description>Recent content in Posts on Blog by Frank</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 25 Sep 2025 11:42:09 +0800</lastBuildDate><atom:link href="https://yongfrank.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>2025  Apple 会议回顾，WWDC 以及更多</title><link>https://yongfrank.github.io/posts/2025-conference-review/</link><pubDate>Thu, 25 Sep 2025 11:42:09 +0800</pubDate><guid>https://yongfrank.github.io/posts/2025-conference-review/</guid><description>&lt;p&gt;作为一名工程师，除了专注于业务代码的编写外，还需不断接触和学习新事物，以拓宽视野、保持技术敏锐度。本文旨在总结回顾这些经历，分享当前全球 iOS 开发者在该领域的研究方向与实践情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🇯🇵 &lt;a href="https://tryswift.jp"&gt;try! Swift Tokyo&lt;/a&gt;（2024）：聚焦日语区的开发生态&lt;/li&gt;
&lt;li&gt;🇨🇳 &lt;a href="https://letsvision.swiftgg.team"&gt;LET&amp;rsquo;S VISION&lt;/a&gt;（2024、2025）：大中华区的 iOS 开发社区&lt;/li&gt;
&lt;li&gt;🇺🇸 &lt;a href="https://developer.apple.com/wwdc/"&gt;WWDC&lt;/a&gt;（2024、2025）：Apple 生态开发的核心&lt;/li&gt;
&lt;li&gt;🇰🇷 &lt;a href="https://kwdc.dev"&gt;KWDC&lt;/a&gt;（2024、2025）：韩语区的开发者生态&lt;/li&gt;
&lt;li&gt;🇸🇬 &lt;a href="https://www.iosconf.sg"&gt;iOS Conf SG&lt;/a&gt;（2025）：立足东南亚，辐射全球的开发者社区&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wwdc"&gt;WWDC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Apple 工程师，设计，市场团队等&lt;/li&gt;
&lt;li&gt;全球开发者及其团队&lt;/li&gt;
&lt;li&gt;媒体与开发者关系团队&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WWDC（Worldwide Developers Conference）无疑是 Apple 生态中关注度最高的会议。每年，Apple 会在此发布最新的 API 和 SDK。在会议现场，开发者有机会直接与这些官方 SDK 和 API 背后的工程师交流，听取他们对新技术的见解。设计团队的工程师会分享如何打造令用户满意的产品，以及如何在细节处精益求精；市场团队的成员则会介绍如何将精心打磨的产品，通过多渠道推广，让全球用户了解并使用。&lt;/p&gt;
&lt;p&gt;Apple 每年都会在 WWDC 上颁发 Apple Design Award，以表彰在设计与技术领域表现卓越的 App。通过与这些获奖开发者交流，可以了解到来自不同视角的开发故事——他们如何精心打磨产品，如何赢得全球用户的喜爱。同时，WWDC 也是观察各种规模团队的宝贵机会，从中可感受到不同团队的协作方式与创新理念。&lt;/p&gt;
&lt;p&gt;在会场上，通常会看到佩戴不同 badge 的三类人：Media（媒体）、Developer Relations（开发者关系）和 Developers（开发者）。其中，Media 与 Developer Relations 在产品宣传和推广中发挥着重要作用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于设计、技术与市场相关的分享，可在此找到详细内容：&lt;a href="https://developer.apple.com"&gt;Apple Developer&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="lets-vision"&gt;LET&amp;rsquo;S VISION&lt;/h2&gt;
&lt;p&gt;大中华区的市场规模与开发者数量毋庸置疑，其影响力不容小觑。在会议中，也有诸多优秀的分享。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1UXEDz9EMx/"&gt;乐可柯 - Taobao Vision Pro 版本设计实践分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1EjJNz1EEd/"&gt;成晨 - 大模型在 M 芯的端侧高效部署探索与应用展望&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV18aJqzRE7X/"&gt;戴铭 - 使用 AI 提升 iOS 开发能力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1HSJqzVEdj/"&gt;肘子 - 探索 SwiftUI 尺寸的秘密&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=pMdFoiLME5Q"&gt;御姐 - 利用 SharePlay 来实现多人互动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1ndJtz7E6c/"&gt;Peng@Aqara - Apple Home 生态系统的成功实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1H9JtzUE3P/"&gt;Paul Hudson - 与 Swift 共同前行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i0YvE8Gn4q8"&gt;Ryan McLeod - 从掌中解谜到空间交互: Blackbox 的 Vision Pro 进化之路&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cvjAzMFMnvc"&gt;Jordi Bruin - 通过实践学习，为什么你应该为 visionOS 做简单的事情&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多分享，均已上传至 &lt;a href="https://www.youtube.com/@XRealityZone/"&gt;YouTube - XRealityZone&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Swift Concurrency</title><link>https://yongfrank.github.io/posts/swift-concurrency/</link><pubDate>Fri, 08 Sep 2023 17:32:57 +0800</pubDate><guid>https://yongfrank.github.io/posts/swift-concurrency/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/quick-start/concurrency/"&gt;Swift Concurrency by Example&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/swift/5.7/top-level-concurrency"&gt;Concurrency in top-level code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mp.weixin.qq.com/s/FjEVCxvmsu9hoMqS2zhvMA"&gt;玩了分手厨房，我理解了协程是什么&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://moe.jimmy0w0.me/2022/05/26/swift-urlsession-in-async-await/"&gt;通过 Swift 的 async await 语法糖进行 URLSession&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Foundation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; apiURL = &lt;span style="color:#e6db74"&gt;&amp;#34;https://my.api.mockaroo.com/movie_ticket.json?key=8795e870&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MovieTicket&lt;/span&gt;: Codable {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; movieTitle, movieGenre: String
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; movieTicketPrice: Float
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; movieDuration: Int
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;enum&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TicketError&lt;/span&gt;: Error {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; urlError
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; invalidServerResponse
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="datatask-closure"&gt;DataTask, closure&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/quick-start/concurrency/how-to-create-continuations-that-can-throw-errors"&gt;How to create continuations that can throw errors&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getDataFromClosure&lt;/span&gt;(completionHandler: @escaping (Result&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;[MovieTicket], Error&amp;gt;) -&amp;gt; Void) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;guard&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; url = URL(string: apiURL) &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; completionHandler(.failure(TicketError.urlError))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; URLSession.shared.dataTask(with: URLRequest(url: url)) { data, response, error &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; error = error {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; completionHandler(.failure(error))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;guard&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; response = response &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt;? HTTPURLResponse,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; response.statusCode == &lt;span style="color:#ae81ff"&gt;200&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; data = data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; completionHandler(.failure(TicketError.invalidServerResponse))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; tickets = &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; JSONDecoder().decode([MovieTicket].&lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;, from: data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; completionHandler(.success(tickets))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; completionHandler(.failure(error))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }.resume()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;getDataFromClosure { result &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;switch&lt;/span&gt; result {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; .success(&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; tickets):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (index, ticket) &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt; tickets.enumerated() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;\(&lt;/span&gt;index&lt;span style="color:#e6db74"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt;: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;\(&lt;/span&gt;ticket.movieTitle&lt;span style="color:#e6db74"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt; [genre] - &lt;/span&gt;&lt;span style="color:#e6db74"&gt;\(&lt;/span&gt;ticket.movieGenre&lt;span style="color:#e6db74"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; .failure(&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; failure):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(failure.localizedDescription)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; exit(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// https://developer.apple.com/forums/thread/713085&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// The standard workaround is to add a call to dispatchMain() which ‘parks’ the main thread,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// preventing the tool from exiting. If you then want to exit after your network request is complete, call exit(_:) directly.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dispatchMain()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="concurrency"&gt;Concurrency&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getDataFromConcurrency&lt;/span&gt;() async &lt;span style="color:#66d9ef"&gt;throws&lt;/span&gt; -&amp;gt; [MovieTicket] {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;guard&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; url = URL(string: apiURL) &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; { &lt;span style="color:#66d9ef"&gt;throw&lt;/span&gt; TicketError.urlError }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; (data, response) = &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; await URLSession.shared.data(from: url)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;guard&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; response = response &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt;? HTTPURLResponse,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; response.statusCode == &lt;span style="color:#ae81ff"&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; { &lt;span style="color:#66d9ef"&gt;throw&lt;/span&gt; TicketError.invalidServerResponse }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; tickets = &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; JSONDecoder().decode([MovieTicket].&lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;, from: data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; tickets
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; tickets = &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; await getDataFromConcurrency()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (index, ticket) &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt; tickets.enumerated() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;\(&lt;/span&gt;index&lt;span style="color:#e6db74"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt;: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;\(&lt;/span&gt;ticket.movieTitle&lt;span style="color:#e6db74"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt; [genre] - &lt;/span&gt;&lt;span style="color:#e6db74"&gt;\(&lt;/span&gt;ticket.movieGenre&lt;span style="color:#e6db74"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;} &lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(error.localizedDescription)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="asyncawait"&gt;Async/await&lt;/h2&gt;
&lt;h2 id="sequences-and-streams"&gt;Sequences and streams&lt;/h2&gt;
&lt;h2 id="tasks-and-task-groups"&gt;Tasks and task groups&lt;/h2&gt;
&lt;h2 id="actors"&gt;Actors&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/quick-start/concurrency/how-to-use-mainactor-to-run-code-on-the-main-queue"&gt;How to use @MainActor to run code on the main queue&lt;/a&gt;&lt;/p&gt;</description></item><item><title>iOS Lifecycle</title><link>https://yongfrank.github.io/posts/ios-lifecycle/</link><pubDate>Tue, 01 Aug 2023 10:13:51 +0800</pubDate><guid>https://yongfrank.github.io/posts/ios-lifecycle/</guid><description>&lt;h2 id="delegate"&gt;Delegate&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/example-code/language/what-is-a-delegate-in-ios"&gt;What is a delegate in iOS?&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a delegate is any object that should be notified when something interesting has happened. What that &amp;ldquo;something interesting&amp;rdquo; means depends on the context: for example, a table view&amp;rsquo;s delegate gets notified when the user taps on a row, whereas a navigation controller&amp;rsquo;s delegate gets notified when the user moves between view controllers.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="lifecycle"&gt;Lifecycle&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tianziyao.github.io/2016/03/24/iOS%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%20-%20Main%E5%87%BD%E6%95%B0/"&gt;iOS生命周期 - Main函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/uikit/1622933-uiapplicationmain"&gt;UIApplicationMain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-objc" data-lang="objc"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是Swift项目中没有一个名为main.swift的文件，为什么app的入口没有了？官方文档的说法是这样的：&lt;/p&gt;</description></item><item><title>Swift on Server</title><link>https://yongfrank.github.io/posts/swift-on-server/</link><pubDate>Fri, 21 Jul 2023 10:52:27 +0800</pubDate><guid>https://yongfrank.github.io/posts/swift-on-server/</guid><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ken-60401.medium.com/server-side-swift-%E7%8E%A9%E7%8E%A9vapor-4-ff935af56ff9"&gt;Server Side Swift — 玩玩 Vapor 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2tACpHQeHfI"&gt;Server Side Swift Using Vapor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="get-json"&gt;GET, JSON&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Vapor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Person&lt;/span&gt;: Content {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; name: String
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; age: Int
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;routes&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;_&lt;/span&gt; app: Application) &lt;span style="color:#66d9ef"&gt;throws&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;json&amp;#34;&lt;/span&gt;, use: getJson)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getJson&lt;/span&gt;(req: Request) &lt;span style="color:#66d9ef"&gt;throws&lt;/span&gt; -&amp;gt; Person {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; Person(name: &lt;span style="color:#e6db74"&gt;&amp;#34;Frank&amp;#34;&lt;/span&gt;, age: &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl --location &lt;span style="color:#e6db74"&gt;&amp;#39;http://127.0.0.1:8080/json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="colon"&gt;Colon&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// curl --location &amp;#39;http://127.0.0.1:8080/customers/12&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;app.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;customers&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;:customerId&amp;#34;&lt;/span&gt; , use: getCustomerId)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getCustomerId&lt;/span&gt;(req: Request) async &lt;span style="color:#66d9ef"&gt;throws&lt;/span&gt; -&amp;gt; String {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;guard&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; customerId = req.parameters.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;customerId&amp;#34;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt;: Int.&lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;throw&lt;/span&gt; Abort(.badRequest)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;\(&lt;/span&gt;customerId&lt;span style="color:#e6db74"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt; is welcoming&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="post"&gt;POST&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Foundation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Vapor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Movie&lt;/span&gt;: Content {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; title: String
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; year: Int
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;curl --location &amp;#39;http://127.0.0.1:8080/movies&amp;#39; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;--header &amp;#39;Content-Type: application/json&amp;#39; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;--data &amp;#39;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; &amp;#34;title&amp;#34;: &amp;#34;Up&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; &amp;#34;year&amp;#34;: 2020
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;}&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;app.post(&lt;span style="color:#e6db74"&gt;&amp;#34;movies&amp;#34;&lt;/span&gt;) { req async &lt;span style="color:#66d9ef"&gt;throws&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; movie = &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; req.content.decode(Movie.&lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; movie
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="query"&gt;Query&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Foundation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Vapor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HotelQuery&lt;/span&gt;: Content {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; sort: String
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; search: String?
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// curl --location &amp;#39;http://127.0.0.1:8080/hotels?sort=desc&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;app.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;hotels&amp;#34;&lt;/span&gt;) { req async &lt;span style="color:#66d9ef"&gt;throws&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; hotelQuery = &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; req.query.decode(HotelQuery.&lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; hotelQuery
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="mvc-pattern-design"&gt;MVC Pattern Design&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;routes&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;_&lt;/span&gt; app: Application) &lt;span style="color:#66d9ef"&gt;throws&lt;/span&gt; { 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; app.register(collection: MoviesController())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MoviesController&lt;/span&gt;: RouteCollection {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;boot&lt;/span&gt;(routes: Vapor.RoutesBuilder) &lt;span style="color:#66d9ef"&gt;throws&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// let app = routes.grouped(&amp;#34;&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// app.get { req async in ... }&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; movies = routes.grouped(&lt;span style="color:#e6db74"&gt;&amp;#34;movies&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// /movies&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; movies.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(use: index)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// /movies/20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; movies.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;:moviesId&amp;#34;&lt;/span&gt;, use: index)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;index&lt;/span&gt;(req: Request) async &lt;span style="color:#66d9ef"&gt;throws&lt;/span&gt; -&amp;gt; String {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;index&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;show&lt;/span&gt;(req: Request) async &lt;span style="color:#66d9ef"&gt;throws&lt;/span&gt; -&amp;gt; String {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 5xx case internalServerError&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;guard&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; moviesIndex = req.parameters.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;moviesId&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; { &lt;span style="color:#66d9ef"&gt;throw&lt;/span&gt; Abort(.internalServerError) }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;\(&lt;/span&gt;moviesIndex&lt;span style="color:#e6db74"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Vapor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Movie&lt;/span&gt;: Content {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; title: String
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; year: Int
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="middleware"&gt;Middleware&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.vapor.codes/advanced/middleware/?h=middle"&gt;Vapor.codes&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Computer Network</title><link>https://yongfrank.github.io/posts/computer-network/</link><pubDate>Fri, 21 Jul 2023 09:13:51 +0800</pubDate><guid>https://yongfrank.github.io/posts/computer-network/</guid><description>&lt;h2 id="layer"&gt;Layer&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://miro.medium.com/v2/resize:fit:1044/format:webp/0*f_JZX-PtepdZwOlN.png" alt="Network layer model"&gt;&lt;/p&gt;
&lt;h3 id="application-layer"&gt;Application Layer&lt;/h3&gt;
&lt;p&gt;BGP DHCP(v6) DNS FTP HTTP HTTPS IMAP IRC LDAP MGCP MQTT NNTP NTP OSPF POP PTP ONC/RPC RTP RTSP RIP SIP SMTP SNMP SSH Telnet TLS/SSL(HTTPS)&lt;/p&gt;
&lt;h3 id="presentation-layer"&gt;Presentation Layer&lt;/h3&gt;
&lt;p&gt;MIME&lt;/p&gt;
&lt;h3 id="session-layer"&gt;Session Layer&lt;/h3&gt;
&lt;p&gt;PPTP&lt;/p&gt;
&lt;h3 id="transport-layer"&gt;Transport Layer&lt;/h3&gt;
&lt;p&gt;TCP: (Three way handshake, four way handshake) UDP DCCP SCTP RSVP QUIC&lt;/p&gt;
&lt;h3 id="network-layer"&gt;Network Layer&lt;/h3&gt;
&lt;p&gt;IP IPv4 IPv6 ICMP ICMPv6 ECN IGMP OSPF IPsec RIP&lt;/p&gt;
&lt;h3 id="data-link-layer"&gt;Data Link Layer&lt;/h3&gt;
&lt;p&gt;Tunnels PPP MAC&lt;/p&gt;</description></item><item><title>Data Structure</title><link>https://yongfrank.github.io/posts/data-structure/</link><pubDate>Wed, 19 Jul 2023 13:34:37 +0800</pubDate><guid>https://yongfrank.github.io/posts/data-structure/</guid><description>&lt;h2 id="map--unordered_map-aka-dictionary"&gt;map &amp;amp; unordered_map (aka dictionary)&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::map&lt;/code&gt; 和数组（array）是两种不同的数据结构，它们在用途和特性上有一些重要的区别。&lt;/p&gt;
&lt;p&gt;std::map 有序容器，对于有序的键值对集合，可以使用 Dictionary 类型。这是 Swift 标准库提供的主要字典类型，它基于哈希表实现，具有快速的键值查找性能。&lt;/p&gt;
&lt;p&gt;std::unordered_map 无序容器，对于无序的键值对集合，可以使用 Set 类型，其中的元素以无特定顺序存储。它通过将键映射到哈希值来存储和查找键值对，因此在大多数情况下，它提供了更快的查找性能。每个键在 std::unordered_map 中也是唯一的。&lt;/p&gt;
&lt;h3 id="数据存储方式"&gt;数据存储方式:&lt;/h3&gt;
&lt;p&gt;数组是一种线性数据结构，它将元素按照顺序存储在连续的内存空间中。数组的访问速度很快，可以通过索引直接访问元素。&lt;/p&gt;
&lt;p&gt;std::map 是一种关联容器，它使用红黑树（一种自平衡二叉搜索树）实现。std::map 中的元素按照键的顺序进行排序并存储，而不是按照插入顺序。这使得在 std::map 中查找元素的速度较快。&lt;/p&gt;
&lt;h3 id="元素的唯一性"&gt;元素的唯一性:&lt;/h3&gt;
&lt;p&gt;数组中的元素可以重复，你可以在任意位置插入、修改或删除元素。&lt;/p&gt;
&lt;p&gt;std::map 中的键是唯一的，每个键都与一个值相关联。当插入重复键时，旧的键值对会被替换。&lt;/p&gt;
&lt;h3 id="操作和复杂度"&gt;操作和复杂度:&lt;/h3&gt;
&lt;p&gt;数组对于随机访问非常高效，因为可以通过索引直接访问元素，时间复杂度为 O(1)。&lt;/p&gt;
&lt;p&gt;std::map 支持插入、删除和查找操作，时间复杂度取决于树的高度，平均情况下为 O(log n)。&lt;/p&gt;
&lt;h3 id="内存管理"&gt;内存管理:&lt;/h3&gt;
&lt;p&gt;数组在创建时需要分配连续的内存空间，并且大小固定。如果需要动态添加或删除元素，可能需要重新分配更大的内存空间。&lt;/p&gt;
&lt;p&gt;std::map 动态地分配和释放内存，可以根据需要自动调整存储空间。&lt;/p&gt;
&lt;p&gt;综上所述，数组适用于需要快速随机访问元素的场景，而 std::map 适用于需要高效地根据键进行查找和排序的场景，并且元素的唯一性是关键。根据具体的需求和数据访问模式，选择适合的数据结构是很重要的。&lt;/p&gt;
&lt;h3 id="json--map"&gt;JSON &amp;amp; map&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/584941afccf3"&gt;JSON &amp;amp; Map&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://areckkimo.medium.com/%E9%97%9C%E6%96%BCdictionary%E4%B8%89%E5%85%A9%E4%BA%8B-32627878abcf"&gt;關於Swift Dictionary三兩事&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;對比Array，Dictionary 是另一個很常見的資料結構之一，有的程式稱它 Object 或 Map，透過 key 去存取資料。在搜尋的時間複雜度，Array 是Big O(n)，因為需要逐一去找，Ditionary 是 BigO(1)，因為透過 key 就能直接取出。&lt;/p&gt;</description></item><item><title>CAID IDFA</title><link>https://yongfrank.github.io/posts/caid-idfa/</link><pubDate>Thu, 06 Jul 2023 10:56:07 +0800</pubDate><guid>https://yongfrank.github.io/posts/caid-idfa/</guid><description>&lt;h2 id="idfa"&gt;IDFA&lt;/h2&gt;
&lt;h2 id="caid"&gt;CAID&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.ichdata.com/caid.html"&gt;黄业忠 - 中国广告协会的CAID方案&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;CAID的推出应对苹果系统更改广告标识符（IDFA）权限对互联网广告市场带来的影响，简单的就是替代IDFA对用户做跟踪。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CAID的实现方式分为两种，一种是在终端上实现，其实就是客户端生成，一种是采集信息上传到服务端，这种叫服务端生成。&lt;/p&gt;
&lt;p&gt;客户端生成：在用户设备上，首次启用的时候，设备硬件参数和随机数通过算法在客户端生成CAID，同时将映射关系上传。这种方式缺点是，客户端会涉及到多次的数据上传和交互，也不便于规则的调整，不推荐使用。&lt;/p&gt;
&lt;p&gt;服务端生成：采集APP具有一定识别能力的非用户隐私数据，发送到中心化服务端，里面有ID管理中心，可通过多参数与随机数经过一定算法生成广告标识ID，再下发给APP端，对于一台终端而言，其广告标识ID具有唯一性，这相当于给每一台终端新发了一张“身份证”。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.ichdata.com/wp-content/uploads/2021/03/2021031608482167.png" alt="技术框架"&gt;&lt;/p&gt;</description></item><item><title>WWDC 23 and Swift Updates</title><link>https://yongfrank.github.io/posts/wwdc-23/</link><pubDate>Wed, 28 Jun 2023 13:40:53 +0800</pubDate><guid>https://yongfrank.github.io/posts/wwdc-23/</guid><description>&lt;h2 id="vision-pro-simulator"&gt;Vision Pro Simulator&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/download/"&gt;Download Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/documentation/xcode/installing-additional-simulator-runtimes"&gt;install with command line&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;xcode-select -s /Applications/Xcode-beta.app
xcodebuild -runFirstLaunch
xcrun simctl runtime add &amp;#34;~/Downloads/watchOS 9 beta Simulator Runtime.dmg&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="swift-macro"&gt;Swift Macro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/documentation/Swift/applying-macros"&gt;Applying Macros&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/5f5f7c4e1dc0"&gt;swift中的宏定义 - 2016&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://juejin.cn/post/7244720558771159098"&gt;开始写一个 Swift 宏吧&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenAI&lt;/p&gt;
&lt;p&gt;在编程中，宏（Macro）是一种方式，允许你定义一段代码，然后在程序的其他地方多次使用。想象一下，你在编写一个程序，里面有一个任务需要你多次重复，而且每次重复的内容都是一样的。如果你手动写这些代码，不仅会浪费时间，而且如果要修改这段代码，你就需要在所有用到的地方都进行修改。&lt;/p&gt;
&lt;p&gt;这就是宏的用武之地。你可以创建一个宏，定义那段需要重复的代码，然后在程序的其他地方只需要调用这个宏就可以了。这样，你就只需要写一次代码，然后在需要的地方重复使用。而且如果需要修改代码，只需修改宏的定义就可以了，而不需要在程序的每个地方都进行修改。&lt;/p&gt;
&lt;p&gt;举个例子，如果你在编写一个游戏，并且在很多地方都需要计算玩家的分数，你可以创建一个计算分数的宏，然后在需要计算分数的地方都调用这个宏，这样就能避免重复编写相同的代码。&lt;/p&gt;
&lt;p&gt;简单来说，宏就像是一个可以重复使用的代码片段，让你可以在多个地方使用同样的代码，而不需要重复编写。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;宏（Macro）和函数是编程中两种常用的代码复用工具，它们都可以使程序员避免重复编写代码。然而，它们的工作方式和用途有所不同。以下是它们的主要区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;预处理和编译：
宏是在预处理阶段展开的。预处理器会在编译代码之前，将所有宏调用替换为相应的代码。而函数则是在编译阶段处理的，当函数被调用时，程序会跳转到函数所在的内存位置，执行函数代码，然后返回到调用处。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能：
由于宏只是简单地替换代码，所以它们不需要函数调用的开销（例如设置堆栈帧，跳转到函数代码等），因此它们可能会比函数快。然而，过度使用宏可能会导致代码膨胀，因为每次使用宏，编译器都会生成一份新的代码。另一方面，函数只在内存中存在一份，无论调用多少次。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类型检查：
函数在编译时会进行类型检查，这可以帮助发现错误。而宏不会进行类型检查，因为它们只是文本替换，这可能会导致错误更难发现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;范围：
函数有其自己的作用域，这意味着在函数内部定义的变量在函数外部不可见。而宏没有这样的作用域，它们只是简单地替换文本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表达能力：
函数比宏更强大，更灵活。函数可以有复杂的控制流程（如循环和条件语句），可以递归调用，可以返回值，等等。而宏的能力较为有限。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说，宏和函数都有其用途。宏通常用于定义简单的代码片段，这些片段会在代码的多个地方完全一样地使用。函数则用于定义更复杂的代码行为，特别是当代码涉及到控制流程，或者需要被反复调用但不想造成代码膨胀时。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="xcode-other-linker-flags"&gt;Xcode Other Linker Flags&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/forums/thread/731089"&gt;Xcode 15 linking error&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, I am getting a linking error when building my app to run against an iOS17 device, using Xcode15. Same project builds and runs fine with Xcode 14 and iOS16. The linking error just says:&lt;/p&gt;</description></item><item><title>Environment Problems</title><link>https://yongfrank.github.io/posts/environment-problems/</link><pubDate>Wed, 24 May 2023 13:28:22 +0800</pubDate><guid>https://yongfrank.github.io/posts/environment-problems/</guid><description>&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-venv" data-lang="venv"&gt;python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="pip-source"&gt;pip source&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="nodejs"&gt;Node.js&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# nvm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;nvm install --lts
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;nvm use --lts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# npm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm config set registry https://registry.npm.taobao.org
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Interview Experience</title><link>https://yongfrank.github.io/posts/interview-experience/</link><pubDate>Tue, 23 May 2023 00:53:13 +0800</pubDate><guid>https://yongfrank.github.io/posts/interview-experience/</guid><description>&lt;h2 id="apple"&gt;Apple&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/ca4697c4afcd"&gt;我在Apple的面试经历&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1月18号中午，刚准备乘电梯下楼去吃午饭，手机响了，上海座机。接起电话，对方自称是Apple的（姑且称他为J先生），说从猎聘网上看到我更新了简历。Apple 在苏州有个Product System QA Engineer的职位，询问我是否感兴趣。苹果的Position应该对每一个人来说都应该是吸引力十足，诚然我也不例外。&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>Cocoapods</title><link>https://yongfrank.github.io/posts/cocoapods/</link><pubDate>Sat, 20 May 2023 23:10:11 +0800</pubDate><guid>https://yongfrank.github.io/posts/cocoapods/</guid><description>&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-txt" data-lang="txt"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ATestingModule
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ATestingModule-ATestingModule
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两个 cocoapods 里的有什么区别&lt;/p&gt;
&lt;p&gt;在 CocoaPods 中，一个模块名字的定义是根据 podspec 文件中的 name 字段来的。比如说，你的 podspec 文件可能会有类似这样的一行代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ruby" data-lang="ruby"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;Pod&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;Spec&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;new &lt;span style="color:#66d9ef"&gt;do&lt;/span&gt; &lt;span style="color:#f92672"&gt;|&lt;/span&gt;s&lt;span style="color:#f92672"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; s&lt;span style="color:#f92672"&gt;.&lt;/span&gt;name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ATestingModule&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，模块的名字就是 &amp;ldquo;ATestingModule&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;那么，这个名字后面跟着 &amp;ldquo;-ATestingModule&amp;rdquo; 是什么呢？那是一个 target。在 Xcode 中，一个 target 定义了一组要使用的源文件，一个要构建的产品，以及用于构建该产品的构建设置。&lt;/p&gt;
&lt;p&gt;CocoaPods 会为每一个 Pod 创建一个对应的 target，名字通常是 {PodName}-{ModuleName}。在你的例子中，PodName 和 ModuleName 都是 &amp;ldquo;ATestingModule&amp;rdquo;，所以你看到的 target 名字就成了 &amp;ldquo;ATestingModule-ATestingModule&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;如果你只是想要使用这个 Pod，你通常不需要关心这个 target 的名字。当你在你的代码中 import ATestingModule 的时候，你实际上是在引用的是模块，而不是 target。&lt;/p&gt;
&lt;p&gt;然而，如果你正在进行一些更复杂的构建配置，比如设置 Build Phases 或者添加编译标志，那么你可能就需要知道这个 target 的名字了。&lt;/p&gt;</description></item><item><title>Postman</title><link>https://yongfrank.github.io/posts/postman/</link><pubDate>Thu, 18 May 2023 21:39:15 +0800</pubDate><guid>https://yongfrank.github.io/posts/postman/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.cnblogs.com/edda/p/14690479.html"&gt;生成接口文档并同步到postman&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://medium.com/@quangdecember/how-to-create-mock-server-response-in-ios-development-with-urlprotocol-d7376ace8b46"&gt;How to create mock server response in iOS development with URLProtocol&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>Android Development</title><link>https://yongfrank.github.io/posts/android-development/</link><pubDate>Fri, 12 May 2023 17:18:00 +0800</pubDate><guid>https://yongfrank.github.io/posts/android-development/</guid><description>&lt;h2 id="recycleview"&gt;RecycleView&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://juejin.cn/post/6844903981760643080"&gt;Android控件RecycleView的基本用法&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>Peripheral</title><link>https://yongfrank.github.io/posts/peripheral/</link><pubDate>Fri, 12 May 2023 13:24:58 +0800</pubDate><guid>https://yongfrank.github.io/posts/peripheral/</guid><description>&lt;h2 id="display"&gt;Display&lt;/h2&gt;
&lt;h3 id="dell-p2720dc"&gt;Dell P2720DC&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://zhuanlan.zhihu.com/p/307410207"&gt;黑色星期五购买显示器 这四个品牌受欢迎&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;戴尔P2720DC显示器 图像质量更可靠&lt;/p&gt;
&lt;p&gt;没有适合所有人的显示器，但是这款Dell显示器在分辨率、设计、功能和价格之间都实现了最佳平衡。首先，它的对角线尺寸为27英寸，这是标准办公桌的理想尺寸。它也是1440p（QHD），这是介于价格合理的1080p和超级清晰4K之间的完美娱乐媒介。&lt;/p&gt;
&lt;p&gt;它虽然不如戴尔的 UltraThin 显示器那么时尚，但是P系列看起来也很现代。P2720DC不一定适合发烧友的照片编辑人员，因为颜色校准还不够完美。但是，它对于业余爱好者和大多数其他类型的计算任务非常有用，具有可靠的图像质量和便捷的可调整性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.dell.com/support/home/zh-cn/product-support/product/dell-p2720dc-monitor/docs"&gt;搜索 Dell P2720DC 支持信息&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dl.dell.com/manuals/all-products/esuprt_electronics_accessories/esuprt_electronics_accessories_monitor/esuprt_monitor_p_series/dell-p2720dc-monitor_user's-guide_zh-cn.pdf"&gt;Dell 27 USB-C 显示器 - P2720DC 用户指南&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="keyboard"&gt;Keyboard&lt;/h2&gt;
&lt;h2 id="adapter"&gt;Adapter&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.apple.com/shop/mac/accessories/power-cables?f=adapter"&gt;Apple Accessories - Power &amp;amp; Cables&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;USB-C Digital AV Multiport Adapter&lt;/p&gt;</description></item><item><title>UserNotifications</title><link>https://yongfrank.github.io/posts/usernotifications/</link><pubDate>Fri, 12 May 2023 11:36:13 +0800</pubDate><guid>https://yongfrank.github.io/posts/usernotifications/</guid><description>&lt;h2 id="quick-start"&gt;Quick Start&lt;/h2&gt;
&lt;h3 id="scheduling-local-notifications"&gt;Scheduling local notifications&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/books/ios-swiftui/scheduling-local-notifications"&gt;Scheduling local notifications&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-txt" data-lang="txt"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;#34;NotificationsTesting&amp;#34; Would Like to Send You Notifications
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Notifications may include alerts, sounds, and icon badges. These can be configured in Settings.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; --------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;| Dont&amp;#39;t Allow | Allow |
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; --------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/documentation/usernotifications/asking_permission_to_use_notifications"&gt;Asking permission to use notifications&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://docs-assets.developer.apple.com/published/c8879aa786/3559454@2x.png" alt="Notifications"&gt;&lt;/p&gt;
&lt;p&gt;The ability to post noninterrupting notifications provisionally to the Notification Center.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://docs-assets.developer.apple.com/published/75a57b5a99/3544497@2x.png" alt="Provisional Notifications"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; center = UNUserNotificationCenter.current()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;center.requestAuthorization(options: [.alert, .sound, .badge, .provisional]) { granted, error &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; error = error {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Handle the error here.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Provisional authorization granted.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike explicitly requesting authorization, this code doesn’t prompt the user for permission to receive notifications. Instead, the first time you call this method, it automatically grants authorization. However, until the user either explicitly keeps or turns off the notification, the authorization status is UNAuthorizationStatus.provisional. Because users can change the authorization status at any point, you should still check the status before scheduling local notifications.&lt;/p&gt;</description></item><item><title>HealthKit</title><link>https://yongfrank.github.io/posts/healthkit/</link><pubDate>Wed, 10 May 2023 15:02:18 +0800</pubDate><guid>https://yongfrank.github.io/posts/healthkit/</guid><description>&lt;h2 id="healthkit-概览"&gt;HealthKit 概览&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/documentation/healthkit/about_the_healthkit_framework?language=objc"&gt;关于 HealthKit 框架&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/z3bi/bikelog?ref=iosexample.com"&gt;Demo App&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/documentation/healthkit/samples"&gt;Create and save health and fitness samples.&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;HealthKit Store(HealthKit 商店) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Characterstic Data 特征数据：生日，血型等&lt;/li&gt;
&lt;li&gt;Sample Data 样本数据：HKSample 的子类，下方图片详细介绍了关于 Step 的样本&lt;/li&gt;
&lt;li&gt;Workout Data 锻炼数据，HKWorkout&lt;/li&gt;
&lt;li&gt;Source Data 源数据，HKSource 包含保存样本的应用程序，设备信息，例如来自微信，下方图片详细介绍了关于 Step 的源数据&lt;/li&gt;
&lt;li&gt;Deleted objects 删除的对象：HKDeletedObject 临时存储已从 HealthKit存储中删除的项目的 UUID。当用户或其他应用程序删除对象时，您可以使用已删除的对象进行响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/31110202/tell-if-a-health-kit-sample-came-from-an-apple-watch"&gt;Tell if a Health Kit sample came from an Apple Watch?&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://i.stack.imgur.com/zsg1O.jpg" alt="HKSource"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="sample-data.jpg" alt="sample data"&gt;&lt;/p&gt;
&lt;h3 id="hkobject-的属性"&gt;HKObject 的属性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UUID&lt;/li&gt;
&lt;li&gt;Metadata: 包含有关条目的其他信息的字典。Metadata 是用于存储有关HealthKit 项目的额外信息的容器。&lt;/li&gt;
&lt;li&gt;Source Revision: 记录每个数据的来源和版本，这样就可以更好地跟踪数据的来源和变化。&lt;/li&gt;
&lt;li&gt;Device: 生成数据的设备&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hksample-的属性"&gt;HKSample 的属性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Type: 样本类型，如睡眠分析样本、高度样本或步数样本。&lt;/li&gt;
&lt;li&gt;Start date: 开始时间&lt;/li&gt;
&lt;li&gt;End date: 结束时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="samples-可以进一步分为四个子类"&gt;Samples 可以进一步分为四个子类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HKCategorySample: 躺在床上/熟睡/醒着等分类数据&lt;/li&gt;
&lt;li&gt;HKQuantitySample: 身高心率卡路里等数量数据&lt;/li&gt;
&lt;li&gt;HKCorrelation: 跟食物和血压数据相关&lt;/li&gt;
&lt;li&gt;HKWorkout: 储存一次活动,例如骑行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="healthkitprovider-类用于和-healthkit-交互"&gt;HealthKitProvider 类，用于和 HealthKit 交互&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/z3bi/bikelog?ref=iosexample.com"&gt;Demo App&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Hong Kong Trip</title><link>https://yongfrank.github.io/posts/hongkong-trip/</link><pubDate>Sun, 07 May 2023 13:31:46 +0800</pubDate><guid>https://yongfrank.github.io/posts/hongkong-trip/</guid><description>&lt;p&gt;这个页面是开源的：&lt;a href="https://github.com/yongfrank/yongfrank.github.io/edit/main/content/posts/hongkong-trip/index.md"&gt;编辑此页面&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以分享香港游玩的经验&lt;/li&gt;
&lt;li&gt;包括但不限于，港卡，迪士尼，美食，酒店，Apple Store 等攻略～&lt;/li&gt;
&lt;li&gt;发现了一些网络攻略（小红书/b站/tg）等也可以分享交流&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="旅游经历杂烩"&gt;旅游经历杂烩&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.v2ex.com/t/926156"&gt;香港旅游经历（附中银香港开卡过程）&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="可能能用到的优惠"&gt;可能能用到的优惠&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.xiaohongshu.com/explore/6452592d000000001303d069"&gt;香港有礼&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="伴手礼--礼物"&gt;伴手礼 / 礼物&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.v2ex.com/t/939638#reply8"&gt;下周末去香港🇭🇰旅游，大家有没有推荐的伴手礼&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;美心西饼&lt;/li&gt;
&lt;li&gt;驱风油……😂&lt;/li&gt;
&lt;li&gt;叉烧？&lt;/li&gt;
&lt;li&gt;万花油，活络油，海干货？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="旅游上网"&gt;旅游上网&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.v2ex.com/t/928148"&gt;香港旅游以及办卡咨询&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;手机卡是中国移动的话，用移动的无忧行买 CMHK 本地流量最划算，便宜而且本地 IP 且没有墙；港卡可以找一些诸如联通香港或者 3HK 的低月租卡&lt;/li&gt;
&lt;li&gt;办港卡基本上都看网点……港岛和九龙市区的网点排的人会很多有些还有存款要求（很多都是开关后大陆人过去办卡），找一些地址偏一点的网点可能会相对好些。但普遍来说的门槛比较高的是汇丰最好跳过&lt;/li&gt;
&lt;li&gt;携程上找吧，便宜实惠又要在市中心在香港是不可能的任务。市中心酒店都很贵。如果要找的话最好去携程上找油尖旺区或者新九龙位置的酒店。很市中心的地方极限省钱的话大概只有尖沙咀旁重庆大厦了&lt;/li&gt;
&lt;li&gt;任何一家 Apple Store 都可以吧……尖沙咀的广东道 Apple Store 是全港最大的单体直营店；其次是中环 IFC 国际金融中心内的 Store&lt;/li&gt;
&lt;li&gt;基本上可以买到西九龙的票的。为了省钱很多人还是会走口岸过关而不是高铁的。深圳福田站内换乘，从深圳地铁福田站换乘到中国铁路广州局集团福田高铁站（两个福田站名字一样但是性质不一样也隔开）差不多要走 15 分钟的样子。口岸通关的话原来说最近新开的莲塘 /香园围口岸人少，但现在也多了很多大陆旅行团塞爆。所以朝九晚五高峰期每个口岸人都很多。硬要比的话，可能最近正在改造的深圳皇岗口岸（因为要坐皇巴到香港落马洲管制站和最近的口岸改造相对人少）和原来开放的盐田沙头角口岸人要少些。另外一个绝对人少的方法是走港珠澳大桥从珠海到香港，50 多港币的金巴车费，港珠澳大桥香港管制站几乎没人的样子通关几分钟搞定&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="银行卡"&gt;银行卡&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://hezu.wiki/zh/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8C%BA/%E9%A6%99%E6%B8%AF%E9%93%B6%E8%A1%8C%E5%BC%80%E6%88%B7%E6%94%BB%E7%95%A5"&gt;Hong Kong 银行开户攻略&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;虚拟银行：
天星银行、Tap&amp;amp;Go（拍住赏）、ZA Bank、livi 理慧银行&lt;/li&gt;
&lt;li&gt;实体银行：
BOC中银香港、HSBC汇丰HK、招商永隆、工银亚洲&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.v2ex.com/t/926940#reply46"&gt;工银亚洲 有必要花 3500 元中介费开户吗&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;有钱的话，直接 50W CNY 扔进去开 HSBC CN 的 premier （卓越理财），然后让 RM 帮国内见证开 US 或者 HK 的 premier （一地 premier ，全球 premier ），HSBC 全球转账到账极快，premier 无手续费。&lt;/p&gt;</description></item><item><title>Machine Learning</title><link>https://yongfrank.github.io/posts/machine-learning/</link><pubDate>Sat, 06 May 2023 15:43:05 +0800</pubDate><guid>https://yongfrank.github.io/posts/machine-learning/</guid><description>&lt;h2 id="贝叶斯公式"&gt;贝叶斯公式&lt;/h2&gt;
&lt;p&gt;贝叶斯公式是由英国数学家Thomas Bayes在18世纪提出的一种用于计算概率的方法。它的核心思想是基于已知的先验概率和新的证据，来更新事件发生的后验概率。&lt;/p&gt;
&lt;p&gt;具体来说，假设我们有一个事件A和一个观测B，我们想要求解在已知B的情况下，事件A发生的概率。根据贝叶斯公式，这个后验概率可以表示为：&lt;/p&gt;
&lt;p&gt;$$
P(A|B) = P(B|A) * P(A) / P(B)
$$&lt;/p&gt;
&lt;p&gt;其中，P(A)表示A事件的先验概率，即在没有观测到B的情况下，A事件发生的概率；P(B|A)表示在A事件发生的条件下，观测到B的概率，也称为似然度；P(B)表示观测到B的概率，也称为边缘概率。&lt;/p&gt;
&lt;p&gt;现在，假设有一个城市在过去的十年中共下过10次雪，每年刮风的概率为20%。如果今天刮风了，那么在这种情况下，下雪的后验概率可以根据贝叶斯公式计算如下：&lt;/p&gt;
&lt;p&gt;$$
P(下雪|刮风) = P(刮风|下雪) * P(下雪) / P(刮风)
$$&lt;/p&gt;
&lt;p&gt;其中，P(下雪)表示先验概率，即在没有观测到刮风的情况下，下雪的概率为10%；P(刮风|下雪)表示在下雪的条件下，刮风的概率为50%；P(刮风)表示观测到刮风的概率，可以通过全概率公式计算：&lt;/p&gt;
&lt;p&gt;$$
P(刮风) = P(刮风|下雪) * P(下雪) + P(刮风|不下雪) * P(不下雪)
$$&lt;/p&gt;
&lt;p&gt;其中，P(刮风|不下雪)表示在不下雪的条件下，刮风的概率为20%，P(不下雪)表示在没有观测到刮风的情况下，不下雪的概率为90%。将以上数据代入贝叶斯公式，我们可以得到：&lt;/p&gt;
&lt;p&gt;$$
P(下雪|刮风) = 0.5 * 0.1 / (0.5 * 0.1 + 0.2 * 0.9) = 0.357
$$&lt;/p&gt;
&lt;p&gt;也就是说，在刮风的情况下，这个城市下雪的概率为35.7%。&lt;/p&gt;</description></item><item><title>Git</title><link>https://yongfrank.github.io/posts/git/</link><pubDate>Sat, 29 Apr 2023 12:10:01 +0800</pubDate><guid>https://yongfrank.github.io/posts/git/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://haway.30cm.gg/git-lfs/"&gt;Git-LFS&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# https://formulae.brew.sh/formula/git-lfs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install git-lfs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git lfs track 10mb.psd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git add .gitattributes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git commit -m &lt;span style="color:#e6db74"&gt;&amp;#39;Add PSD file&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git push origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git lfs pull
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="sourcetree-customized-full-name-and-email-sourcetree-客制化名字和邮箱"&gt;SourceTree Customized Full Name and Email SourceTree 客制化名字和邮箱&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.csdn.net/weixin_43404937/article/details/122564683"&gt;git, sourcetree中针对不同仓库设置不同账户&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git config --global user.name &lt;span style="color:#e6db74"&gt;&amp;#34;your name&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git config --global user.email &lt;span style="color:#e6db74"&gt;&amp;#34;your email-address&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git config --local user.name &lt;span style="color:#e6db74"&gt;&amp;#34;your name&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git config --local user.email &lt;span style="color:#e6db74"&gt;&amp;#34;your email-address&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>AVFoundation</title><link>https://yongfrank.github.io/posts/avfoundation/</link><pubDate>Tue, 25 Apr 2023 14:56:43 +0800</pubDate><guid>https://yongfrank.github.io/posts/avfoundation/</guid><description>&lt;h2 id="avaudiosession"&gt;AVAudioSession&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/documentation/avfaudio/avaudiosessioncategoryoptions/avaudiosessioncategoryoptionduckothers?language=objc"&gt;AVAudioSessionCategoryOptionDuckOthers&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>Design Tutorials for Developers</title><link>https://yongfrank.github.io/posts/design-for-dev/</link><pubDate>Sun, 23 Apr 2023 23:26:08 +0800</pubDate><guid>https://yongfrank.github.io/posts/design-for-dev/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://xuyisheng.top/design_color_system/"&gt;不懂设计的产品不是好开发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过这篇文章，我将向大家介绍下关于设计的一些基本知识，让广大开发者在平时的开发中，可以更好的和设计、产品合作（撕逼）。&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>Apple Media Services</title><link>https://yongfrank.github.io/posts/apple-media-services/</link><pubDate>Wed, 19 Apr 2023 19:27:35 +0800</pubDate><guid>https://yongfrank.github.io/posts/apple-media-services/</guid><description>&lt;h2 id="apple-music-marketing"&gt;Apple Music Marketing&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://artists.apple.com/support/1117-apple-music-marketing-tools"&gt;Apple Music Marketing Tools&lt;/a&gt;
&lt;a href="https://allthings.how/how-to-embed-apple-music-playlists-albums-and-songs-on-a-webpage/"&gt;How to Embed Apple Music Playlists, Albums and Songs on a Webpage&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://tools.applemediaservices.com/apple-music"&gt;Apple Media Services&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;!-- https://tools.applemediaservices.com/song/ --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;grid-items&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;iframe&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://tools.applemediaservices.com/api/twitter/player/{THE-MUSIC-ID-FROM-APPLE-MARKETING-TOOLS}?locale=en-US&amp;amp;amp;sf=US&amp;amp;amp;itsct=music_box_audiocard&amp;amp;amp;itscg=30200&amp;amp;amp;app=music&amp;amp;amp;ls=1&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;width&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;350&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;height&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;350&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;twitter-preview&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;/&lt;span style="color:#f92672"&gt;iframe&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See Demo in &lt;a href="https://yongfrank.github.io/music/"&gt;Music - yongfrank&lt;/a&gt;&lt;/p&gt;
&lt;iframe src="https://tools.applemediaservices.com/api/twitter/player/924487455?locale=en-US&amp;amp;sf=US&amp;amp;itsct=music_box_audiocard&amp;amp;itscg=30200&amp;amp;app=music&amp;amp;ls=1" width="350" height="350" class="twitter-preview"&gt;&lt;/iframe&gt;</description></item><item><title>Accelerator April Shanghai</title><link>https://yongfrank.github.io/posts/accelerator-shanghai/</link><pubDate>Tue, 18 Apr 2023 15:40:25 +0800</pubDate><guid>https://yongfrank.github.io/posts/accelerator-shanghai/</guid><description>&lt;p&gt;This page is open source. &lt;a href="https://github.com/yongfrank/yongfrank.github.io/edit/main/content/posts/accelerator-shanghai.md"&gt;Improve this page&lt;/a&gt;.&lt;/p&gt;
&lt;!-- # AAG May 21, 2023

|时间|内容|主讲人/负责人|
|--|--|--|
|08:00-09:00|工作人员到场准备|/|
|09:00-09:30|参会人员签到入场|/|
|09:30-09:35|活动开场|主持：主持：刘雨萱 &lt;br&gt; 发言：Yuna， 张克俊（连麦）|
|09:35-10:00|Community - Be Together|主持：Jason &lt;br&gt; 嘉宾主讲：张思琦|
|10:00-10:30|破冰活动&lt;br&gt;（以组为单位介绍）|主持：刘雨萱|
|10:30-10:45|茶歇|/|
|10:45-11:15|发展路线|主持：刘雨萱&lt;br&gt;嘉宾主讲：Eric|
|11:15-12:00|畅想未来（圆桌）|主持：Jason&lt;br&gt;嘉宾主讲：蔡天懿、Jason、待定|
|12:00-13:00|午餐及自由交流|/|
|13:00-14:00|分组讨论&lt;br&gt;（每轮30分钟，共四轮）|分四组，每组主持人：&lt;br&gt;罗爽、Jason、小曼、待定|
|14:00-14:15|茶歇|/|
|14:15-14:45|分组讨论（每轮30分钟，共四轮）|分四组，每组主持人：&lt;br&gt;罗爽、Jason、小曼、待定|
|14:45-15:15|交流答疑＋总结|主持：刘雨萱|
|15:15-15:30|闭幕/合影|/|

## Books

* Gumroad
* Leanpub
* Apple Book

## 圆桌会议

&gt; 天懿

格瓦拉 - 电影票

!! GPT - 人生下注 --&gt;
&lt;h1 id="april"&gt;April&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://stevejobsarchive.com/"&gt;Steve Jobs Archive - Make Something Wonderful - Steve Jobs in his own words&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Comparison of Swift and Objc</title><link>https://yongfrank.github.io/posts/comparison-of-swift-and-objc/</link><pubDate>Mon, 17 Apr 2023 15:47:55 +0800</pubDate><guid>https://yongfrank.github.io/posts/comparison-of-swift-and-objc/</guid><description>&lt;h2 id="struct-and-class"&gt;struct and class&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-both-classes-and-structs"&gt;Why does Swift have both classes and structs?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variable properties in constant classes can be modified freely, but variable properties in constant structs cannot. 常量类中的变量属性可以自由修改，但常量结构中的变量属性不能。&lt;/li&gt;
&lt;li&gt;Classes have deinitializers, which are methods that are called when an instance of the class is destroyed, but structs do not.&lt;/li&gt;
&lt;li&gt;Copies of structs are always unique, whereas copies of classes actually point to the same shared data.&lt;/li&gt;
&lt;li&gt;One class can be built upon (“inherit from”) another class, gaining its properties and methods.&lt;/li&gt;
&lt;li&gt;Classes do not come with synthesized memberwise initializers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/books/ios-swiftui/why-state-only-works-with-structs"&gt;Why @State only works with structs&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Swift Package Manager</title><link>https://yongfrank.github.io/posts/swift-package-manager/</link><pubDate>Sat, 15 Apr 2023 22:26:47 +0800</pubDate><guid>https://yongfrank.github.io/posts/swift-package-manager/</guid><description>&lt;h2 id="swiftpm"&gt;.swiftpm&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://skyaaron.com/posts/swiftpm-app-projects/"&gt;Swift Playgrounds App Projects&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// swift-tools-version: 5.7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// WARNING:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// This file is automatically generated.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Do not edit it by hand because the contents will be replaced.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;PackageDescription&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AppleProductTypes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; package = Package(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; name: &lt;span style="color:#e6db74"&gt;&amp;#34;Regex Go&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; platforms: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .iOS(&lt;span style="color:#e6db74"&gt;&amp;#34;16.0&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; products: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .iOSApplication(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; name: &lt;span style="color:#e6db74"&gt;&amp;#34;YOUR-APP-NAME&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; targets: [&lt;span style="color:#e6db74"&gt;&amp;#34;AppModule&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bundleIdentifier: &lt;span style="color:#e6db74"&gt;&amp;#34;YOUR-BUNDLE-IDENTIFIER&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; teamIdentifier: &lt;span style="color:#e6db74"&gt;&amp;#34;YOUR-TEAM-Identifier&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; displayVersion: &lt;span style="color:#e6db74"&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bundleVersion: &lt;span style="color:#e6db74"&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; appIcon: .asset(&lt;span style="color:#e6db74"&gt;&amp;#34;AppIcon&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; accentColor: .asset(&lt;span style="color:#e6db74"&gt;&amp;#34;AccentColor&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; supportedDeviceFamilies: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .pad,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .phone
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; supportedInterfaceOrientations: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .portrait,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .landscapeRight,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .landscapeLeft,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .portraitUpsideDown(.when(deviceFamilies: [.pad]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; appCategory: .utilities
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; targets: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .executableTarget(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; name: &lt;span style="color:#e6db74"&gt;&amp;#34;AppModule&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; path: &lt;span style="color:#e6db74"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; resources: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .process(&lt;span style="color:#e6db74"&gt;&amp;#34;Resources&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; swiftSettings: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// .enableUpcomingFeature(&amp;#34;BareSlashRegexLiterals&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .unsafeFlags([&lt;span style="color:#e6db74"&gt;&amp;#34;-enable-bare-slash-regex&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://support.apple.com/en-gb/guide/playgrounds-ipad/itc65b2d9a15/ipados"&gt;Swift Playgrounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/forums/thread/706220"&gt;Uploading app using Swift Playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;</description></item><item><title>Mac Hint</title><link>https://yongfrank.github.io/posts/mac-hint/</link><pubDate>Fri, 14 Apr 2023 16:50:52 +0800</pubDate><guid>https://yongfrank.github.io/posts/mac-hint/</guid><description>&lt;h2 id="username-full-name-local-network-name"&gt;Username, Full Name, Local Network Name&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://youtu.be/snZpO8rDq7U"&gt;YouTube - How To Set Up a New Mac (Step-By-Step Guide)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="storage"&gt;Storage&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://blog.greggant.com/posts/2022/04/10/reclaiming-space-from-system-data-in-macos.html"&gt;Reclaiming storage/space from &amp;lsquo;System Data&amp;rsquo; in macOS: A tutorial on understanding the System Data usage.&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.v2ex.com/t/893091"&gt;mac 系统数据 100 多 G 了，有什么清理的办法吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看到你有 Xcode 。那么推荐你先试试八爷开发的 Cleaner For Xcode 。另外，一般的清理也可以使用 Disk Drill 以及 Cleaner One Pro ，这两个的免费版就足够使用了。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://pic.liuzaoqi.com/picgo/202211061642821.png" alt="system data"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.google.com/search?q=mac+%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE+site%3Av2ex.com&amp;amp;rlz=1C5CHFA_en__1048__1048&amp;amp;oq=mac+%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE+site%3Av2ex.com&amp;amp;aqs=chrome..69i57.3306j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Search Result with V2EX and google&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;清理硬碟我唯一推薦用 GrandPerspective。清一堆小檔案不如看哪塊最大來砍&lt;/p&gt;
&lt;p&gt;&lt;a href="https://grandperspectiv.sourceforge.net/"&gt;https://grandperspectiv.sourceforge.net/&lt;/a&gt; 直接下載免費、MAS 版要錢&lt;/p&gt;
&lt;p&gt;&lt;a href="https://discord.com/channels/967978112509935657/1106458279963529246/1107613634827391048"&gt;Discord by ethanhuang13&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Streaming Media</title><link>https://yongfrank.github.io/posts/streaming-media/</link><pubDate>Sat, 08 Apr 2023 23:50:40 +0800</pubDate><guid>https://yongfrank.github.io/posts/streaming-media/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/d71ceef679de"&gt;五种常见流媒体协议&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;流媒体（streaming media）是指将一连串数据压缩后，经过网络分段发送，即时传输以供观看音视频的一种技术。&lt;/p&gt;
&lt;p&gt;通过使用 streaming media 技术，用户无需将文件下载到本地即可播放。由于媒体是以连续的数据流发送的，因此在媒体到达时即可播放。可以像下载的文件一样进行暂停、快进或后退操作。&lt;/p&gt;
&lt;p&gt;在这篇文章中，首先将说明什么是 video streaming protocol；其次会讨论流协议（streaming protocl）和编解码器之间的区别；最后，将介绍五种常见的流协议。&lt;/p&gt;</description></item><item><title>iOS Memory Management</title><link>https://yongfrank.github.io/posts/ios-memory-management/</link><pubDate>Sat, 08 Apr 2023 23:29:01 +0800</pubDate><guid>https://yongfrank.github.io/posts/ios-memory-management/</guid><description>&lt;h2 id="stack-heap"&gt;Stack Heap&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://juejin.cn/post/6938755477165572132"&gt;iOS内存分配-栈和堆&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有OC对象需要进行内存管理的本质原因？&lt;/p&gt;
&lt;p&gt;因为OC对象在内存中是以堆的方式分配内存的，堆内存是由我们自己释放的（release）&lt;/p&gt;
&lt;p&gt;而非OC对象一般存在栈里，栈内存会被系统自动回收&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e92e9c2af23d4324b0eb2f388db12d5a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="进程内存区域"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码区：代码段是用来存放可执行文件的操作指令（存放函数的二进制代码），也就是说是它是可执行程序在内存种的镜像。代码段需要防止在运行时被非法修改，所以只准读取操作，而不允许写入（修改）操作——它是不可写的。&lt;/li&gt;
&lt;li&gt;常量区：常量存储区，这是一块比较特殊的存储区，他们里面存放的是常量，&lt;/li&gt;
&lt;li&gt;全局（静态）区：放全局变量和静态变量，包含下面两个分区：
&lt;ol&gt;
&lt;li&gt;数据区：数据段用来存放可执行文件中已初始化全局变量，换句话说就是存放程序静态分配的变量和全局变量&lt;/li&gt;
&lt;li&gt;BSS区：BSS段包含了程序中未初始化全局变量&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;堆（heap）区：堆是由程序员分配和释放，用于存放进程运行中被动态分配的内存段，它大小并不固定，可动态扩张或缩减&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="ios-memory-mgmt--arc"&gt;iOS Memory Mgmt / ARC&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://juejin.cn/post/7078882545403854861"&gt;iOS-[内存管理]&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a17346d91a24355b207b7f5e4785bf8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="ARC 抽象原理图"&gt;&lt;/p&gt;
&lt;p&gt;在 Objective-C 中，“对象” 相当于办公室里的照明设备。在现实世界中办公室里的照明设备只有一个，但在 Objective-C 的世界里，虽然计算机的资源有限，但一台计算机可以同时处理好几个对象。&lt;/p&gt;
&lt;p&gt;此外，“对象的使用环境” 相当于上班进入办公室的人。虽然这里的 “环境” 有时也指在运行中的程序代码、变量、变量作用域、对象等，但在概念上就是使用对象的环境。上班进入办公室的人对办公室照明设备发出的动作，与 Objective-C 中的对应关系则如下表所示&lt;/p&gt;
&lt;p&gt;&lt;img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b953465c8b994c55b7f5e2be017b224a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图表 objc memory mgmt"&gt;&lt;/p&gt;
&lt;h2 id="使用弱引用来避免-retain-cycles"&gt;使用弱引用来避免 Retain Cycles&lt;/h2&gt;
&lt;p&gt;retain对象会创建对该对象的强引用（即引用计数 +1）。一个对象在release它的所有强引用之后（即引用计数 =0）才会dealloc。如果两个对象相互retain强引用，或者多个对象，每个对象都强引用下一个对象直到回到第一个，就会出现 “Retain Cycles（循环引用）” 问题。循环引用会导致它们中的任何对象都无法dealloc，就产生了内存泄漏。&lt;/p&gt;
&lt;p&gt;举个例子，Document 对象中有一个属性 Page 对象，每个 Page 对象都有一个属性，用于存储它所在的 Document。如果 Document 对象具有对 Page 对象的强引用，并且 Page 对象具有对 Document 对象的强引用，则它们都不能被销毁。&lt;/p&gt;
&lt;p&gt;“Retain Cycles” 问题的解决方案是使用弱引用。弱引用是非持有关系，对象do not retain它引用的对象。&lt;/p&gt;
&lt;h2 id="arc新规则"&gt;ARC新规则&lt;/h2&gt;
&lt;p&gt;ARC会分析对象的生存期需求，并在编译时自动插入适当的内存管理方法调用的代码，而不需要你记住何时使用retain、release、autorelease方法。编译器还会为你生成合适的dealloc方法。一般来说，如果你使用ARC，那么只有在需要与使用MRC的代码进行交互操作时，传统的 Cocoa 命名约定才显得重要。&lt;/p&gt;</description></item><item><title>Thread</title><link>https://yongfrank.github.io/posts/thread/</link><pubDate>Sat, 08 Apr 2023 14:58:09 +0800</pubDate><guid>https://yongfrank.github.io/posts/thread/</guid><description>&lt;h2 id="thread-safety"&gt;Thread Safety&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.aliyun.com/article/254282?spm=a2c6h.13262185.profile.388.699e167e7REVuk"&gt;确保线程安全的几种方法&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="swift-多线程方案"&gt;Swift 多线程方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Thread&lt;/li&gt;
&lt;li&gt;Cocoa Operation(Operation, Operation Queue)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/dispatch"&gt;Dispatch&lt;/a&gt;: Grand Central Dispatch&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7084640887250092062"&gt;Swift Concurrency&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="runloop"&gt;Runloop&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://hit-alibaba.github.io/interview/iOS/ObjC-Basic/Runloop.html"&gt;Runloop explained&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Runloop 是什么？Runloop 还是比较顾名思义的一个东西，说白了就是一种循环，只不过它这种循环比较高级。一般的 while 循环会导致 CPU 进入忙等待状态，而 Runloop 则是一种“闲”等待，这部分可以类比 Linux 下的 epoll。当没有事件时，Runloop 会进入休眠状态，有事件发生时， Runloop 会去找对应的 Handler 处理事件。Runloop 可以让线程在需要做事的时候忙起来，不需要的话就让线程休眠。&lt;/p&gt;
&lt;p&gt;一个 Timer 一次只能加入到一个 RunLoop 中。我们日常使用的时候，通常就是加入到当前的 runLoop 的 default mode 中，而 ScrollView 在用户滑动时，主线程 RunLoop 会转到 UITrackingRunLoopMode 。而这个时候， Timer 就不会运行。&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DataTimer&lt;/span&gt;: NSObject, ObservableObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; @Published &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; timer = &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; timerObject = Timer()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;@objc&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;increment&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.timer &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;runTimer&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; timerObject = Timer.scheduledTimer(timeInterval: &lt;span style="color:#ae81ff"&gt;1.0&lt;/span&gt;, target: &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;, selector: &lt;span style="color:#66d9ef"&gt;#selector&lt;/span&gt;(increment), userInfo: &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, repeats: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// RunLoop.main.add(timerObject, forMode: .common)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 主线程 默认有 runloop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 而 GCD 中没有 runloop &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// https://blog.csdn.net/M316625387/article/details/83787313&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;runTimerOnGCD&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; DispatchQueue.global().async {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(Thread.current)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.timerObject = Timer.scheduledTimer(timeInterval: &lt;span style="color:#ae81ff"&gt;1.0&lt;/span&gt;, target: &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;, selector: &lt;span style="color:#66d9ef"&gt;#selector&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.increment), userInfo: &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, repeats: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; RunLoop.current.add(Port(), forMode: .&lt;span style="color:#66d9ef"&gt;default&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; RunLoop.current.run(mode: .&lt;span style="color:#66d9ef"&gt;default&lt;/span&gt;, before: .distantFuture)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// RunLoop.main.add(self.timerObject, forMode: .common)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ContentView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; @StateObject &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; timer = DataTimer()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; NavigationStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Text(&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;\(&lt;/span&gt;timer.timer&lt;span style="color:#e6db74"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; List {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Text(&lt;span style="color:#e6db74"&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .onAppear {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; timer.runTimer()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="gcd-rac"&gt;GCD RAC&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/d5b90f08f2fc"&gt;iOS开发「RAC」RAC的定时、延时、超时方法&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog Bookmark</title><link>https://yongfrank.github.io/posts/blog-bookmark/</link><pubDate>Sat, 08 Apr 2023 14:53:56 +0800</pubDate><guid>https://yongfrank.github.io/posts/blog-bookmark/</guid><description>&lt;h2 id="trip"&gt;Trip&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.ops-coffee.cn/r/city-china-shandong-rizhao"&gt;游记 | 在日照看到绝美的大海 | 房车&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="personal-experience"&gt;Personal Experience&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.aliyun.com/article/254285?spm=a2c6h.13262185.profile.386.699e167e7REVuk"&gt;周兆熊: 从高考到程序员&amp;mdash;一个五年程序员的回忆及建议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="careers"&gt;Careers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.aliyun.com/article/215250?spm=a2c6h.13262185.profile.408.699e167e7REVuk"&gt;周兆熊: 求职简历中一些常见的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tech-ios"&gt;Tech iOS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pro648/BasicDemos-iOS"&gt;@pro648: iOS 学习进程中的demo汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pro648/tips"&gt;@pro648: iOS 学习进程中遇到的知识点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/user/75195341614663"&gt;Albert_Duan: iOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.starming.com/2022/03/25/develop-with-swiftui/"&gt;在苹果加速器活动做的 SwiftUI 开发分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gonzalezreal.github.io/2023/02/18/better-markdown-rendering-in-swiftui.html"&gt;Better Markdown Rendering in SwiftUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tiny66.com/"&gt;tiny66&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xta0.me/2017/07/16/WWDC-2017-Live.html"&gt;徐韬 - FB / Alibaba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Swift Snippet</title><link>https://yongfrank.github.io/posts/swift-snippet/</link><pubDate>Sat, 08 Apr 2023 11:44:42 +0800</pubDate><guid>https://yongfrank.github.io/posts/swift-snippet/</guid><description>&lt;h2 id="swift-intro"&gt;Swift Intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.aliyun.com/article/254320?spm=a2c6h.13262185.profile.358.699e167e7REVuk"&gt;Swift&amp;mdash;一门智能型的编程语言&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="common-problem"&gt;Common Problem&lt;/h2&gt;
&lt;h3 id="safe-subsript"&gt;safe subsript&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://juejin.cn/post/7026271045652840461"&gt;5 个让 Swift 更优雅的扩展——Pt.1&lt;/a&gt;
&lt;a href="https://www.bilibili.com/video/BV1ZT4y1V7Rs/?share_source=copy_web&amp;amp;vd_source=bf4952280cde801b178268abc99a7047"&gt;Swift 经常数组越界？教你一招，一劳永逸的解决数组越界的问题&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;extension&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Array&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;subscript&lt;/span&gt; (safe index: Int) -&amp;gt; Element? {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;guard&lt;/span&gt; index &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; index &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.count &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;[index]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;values[safe: &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;] &lt;span style="color:#75715e"&gt;// &amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;values[safe: &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;] &lt;span style="color:#75715e"&gt;// nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="uikit-preview"&gt;UIKit Preview&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://ruipfcosta.github.io/UIKitPreviewsGenerator-Website/index.html"&gt;UIKit Preview&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;!-- markdownlint-disable MD033 --&gt;
&lt;video style="max-width: 100%;box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 1) 0px 30px 60px -30px;" loop muted autoplay playsinline&gt;
 &lt;source src="https://ruipfcosta.github.io/UIKitPreviewsGenerator-Website/assets/video/demo.mov"&gt;
&lt;/video&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UIKit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ViewController&lt;/span&gt;: UINavigationController {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;viewDidLoad&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;super&lt;/span&gt;.viewDidLoad()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Do any additional setup after loading the view.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; text = UILabel(frame: CGRect(x: &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;, y: &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;, width: &lt;span style="color:#ae81ff"&gt;300&lt;/span&gt;, height: &lt;span style="color:#ae81ff"&gt;300&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; text.text = &lt;span style="color:#e6db74"&gt;&amp;#34;UIKit Preview Testing&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.view.addSubview(text)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#if&lt;/span&gt; &lt;span style="color:#75715e"&gt;DEBUG&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SwiftUI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ViewControllerRepresentable&lt;/span&gt;: UIViewControllerRepresentable {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;typealias&lt;/span&gt; UIViewControllerType = ViewController
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;makeUIViewController&lt;/span&gt;(context: Context) -&amp;gt; UIViewControllerType {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ViewController()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;updateUIViewController&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;_&lt;/span&gt; uiViewController: UIViewControllerType, context: Context) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ViewController_Previews&lt;/span&gt;: PreviewProvider {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; previews: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ViewControllerRepresentable()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="swift-guard"&gt;Swift Guard&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.cnblogs.com/xuruofan/p/9967754.html"&gt;关于swift的guard使用一定要慎用&lt;/a&gt;&lt;/p&gt;</description></item><item><title>SwiftUI Example</title><link>https://yongfrank.github.io/posts/swiftui/</link><pubDate>Mon, 03 Apr 2023 01:39:20 +0800</pubDate><guid>https://yongfrank.github.io/posts/swiftui/</guid><description>&lt;p&gt;This page is open source. &lt;a href="https://github.com/yongfrank/yongfrank.github.io/edit/main/content/posts/swiftui.md"&gt;Improve this page&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.hackingwithswift.com/quick-start/swiftui/"&gt;SwiftUI by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cocoaz.com/swiftui/swiftui-vs-uikit-cheat-sheet/"&gt;SwiftUI 参考手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id="starred-app"&gt;Starred App&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://apps.apple.com/us/app/a-companion-for-swiftui/id1485436674?l=zh&amp;amp;mt=12"&gt;A Companion for SwiftUI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apps.apple.com/us/app/a-companion-for-swiftui/id1485436674?mt=12&amp;amp;itscg=30200&amp;amp;itsct=apps_box_appicon" style="width: 170px; height: 170px; border-radius: 22%; overflow: hidden; display: inline-block; vertical-align: middle;"&gt;&lt;img src="https://is1-ssl.mzstatic.com/image/thumb/Purple122/v4/3c/05/e9/3c05e92b-23a1-3d89-dee5-6bdf701c9bfa/AppIcon-0-85-220-0-4-2x.png/540x540bb.jpg" alt="A Companion for SwiftUI" style="width: 170px; height: 170px; border-radius: 22%; overflow: hidden; display: inline-block; vertical-align: middle;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://discord.com/channels/967978112509935657/967978112509935663/1105046781521305600 我购买了《Mastering SwiftUI》并将它汉化为简体中文，免费放在了我的 Github 静态服务器中，先读完 https://sspai.com/series/147 再继续阅读 https://ylqylq001.github.io/Mastering-SwiftUI 我相信你很快就能撸出漂亮的 SwiftUI App --&gt;
&lt;!-- 还有件事强调一下，我放在 Github 静态服务器上的这本书，本来是打算方便自己阅读，偷偷转译的，不要到处传播，哪天因为版权被删除就麻烦了
https://ylqylq001.github.io/Mastering-SwiftUI --&gt;
&lt;h2 id="working-with-static-text-laying-out-text-neatly"&gt;Working with static text (Laying out text neatly)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-advanced-text-styling-using-attributedstring"&gt;hws - How to add advanced text styling using AttributedString&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-render-markdown-content-in-text"&gt;hws - How to render Markdown content in text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.appcoda.com/swiftui-markdown/"&gt;Using Markdown in SwiftUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fatbobman.com/posts/attributedString/"&gt;AttributedString&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ContentView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; content: String? {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt;? 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; String(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; contentsOf: Bundle.main.url(forResource: &lt;span style="color:#e6db74"&gt;&amp;#34;README&amp;#34;&lt;/span&gt;, withExtension: &lt;span style="color:#e6db74"&gt;&amp;#34;md&amp;#34;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; txt: AttributedString {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; text = &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt;! AttributedString(markdown: &lt;span style="color:#e6db74"&gt;&amp;#34;_Hamlet_ by William Shakespeare **Text in bold**&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; range = text.range(of: &lt;span style="color:#e6db74"&gt;&amp;#34;William&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; text[range].backgroundColor = .yellow
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; text
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; VStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Text(content ?? &lt;span style="color:#e6db74"&gt;&amp;#34;?&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Text(txt)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Text(&lt;span style="color:#e6db74"&gt;&amp;#34;**Text in bold**&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .background(.red)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .padding()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This automatic Markdown conversion happens because SwiftUI interprets those strings as being instances of LocalizedStringKey – strings that can be localized by our app. This means if you want to create Markdown text from a property or variable, you should mark it explicitly as being LocalizedStringKey to get the Markdown rendering:&lt;/p&gt;</description></item><item><title>Combine</title><link>https://yongfrank.github.io/posts/combine/</link><pubDate>Mon, 03 Apr 2023 00:34:18 +0800</pubDate><guid>https://yongfrank.github.io/posts/combine/</guid><description>&lt;h2 id="sink"&gt;Sink&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 每秒增加 10 % 进度条的代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Combine&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Foundation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;@MainActor
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;RegularExpressionModel&lt;/span&gt;: ObservableObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; @Published &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; progress = &lt;span style="color:#ae81ff"&gt;0.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; cancellable: AnyCancellable?
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;init&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; startProgressUpdate()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;startProgressUpdate&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cancellable = Timer.publish(every: &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, on: .main, &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt;: .common)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .autoconnect()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .sink { [&lt;span style="color:#66d9ef"&gt;weak&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;] &lt;span style="color:#66d9ef"&gt;_&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;?.updateProgress()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;updateProgress&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; progress &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; progress == &lt;span style="color:#ae81ff"&gt;1.0000&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cancellable?.cancel()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;deinit&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cancellable?.cancel()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在英语中，sink 这个词有许多不同的意思，包括“水槽”，“下沉”，“降低”，“沉没”等等。在 Combine 框架中，sink 表示订阅者将从源发布者接收新的事件，并执行一个闭包，因此，我们可以将 sink 视为一个“接收器”，用于接收流中的新值并进行后续处理。这个单词可能被用来表示值“下沉”或“降低”到更低级别的代码中进行处理，或者表示订阅者正在“吸收”发布者发出的事件。在 Combine 中，sink 是订阅一个发布者的一种方式，因此这个术语可能也反映了这一点，即“吸收”或“消耗”流中的事件。&lt;/p&gt;</description></item><item><title>Performance of Higher Order Functions in Swift</title><link>https://yongfrank.github.io/posts/performance-of-higher-order-functions/</link><pubDate>Sun, 02 Apr 2023 14:23:01 +0800</pubDate><guid>https://yongfrank.github.io/posts/performance-of-higher-order-functions/</guid><description>&lt;h2 id="why-do-i-compose-this-article"&gt;Why do I compose this article?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Leetcode algorithm problems&lt;/li&gt;
&lt;li&gt;Swift Language&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="article-by-skoumal"&gt;Article by skoumal&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.skoumal.com/en/performance-of-built-in-higher-order-functions-map-filter-reduce-and-flatmap-vs-for-in-loop-in-swift/"&gt;Performance of built-in higher-order functions Map, Filter, Reduce, and flatMap vs. for-in loop in Swift&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The most popular higher-order functions are map, filter, and reduce. We all use them since we think that syntax is much better and it is even faster to write them than the old way for-in loop. But is it really true? Have you ever thought about the performance of these built-in functions? They are built-in so naturally, they should be better, right? ???? Let’s dive into these functions together and uncover the truth ????.&lt;/p&gt;</description></item><item><title>App Store Connect</title><link>https://yongfrank.github.io/posts/app-store-connect/</link><pubDate>Thu, 30 Mar 2023 00:12:53 +0800</pubDate><guid>https://yongfrank.github.io/posts/app-store-connect/</guid><description>&lt;p&gt;How to deal with Data and Analytics in App Store Connect?&lt;/p&gt;</description></item><item><title>Objc Snippet</title><link>https://yongfrank.github.io/posts/objc-snippet/</link><pubDate>Wed, 29 Mar 2023 21:18:40 +0800</pubDate><guid>https://yongfrank.github.io/posts/objc-snippet/</guid><description>&lt;h2 id="type-unsafe"&gt;Type unsafe&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418795-isequal"&gt;isEqual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/objectivec/nsobject/1393823-isequalto"&gt;isEqualTo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7127912661714468872"&gt;OC底层原理之isEqual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://existorlive.github.io/2020/05/26/isEqual-AND-hash-of-NSObject.html"&gt;isEqual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-objc" data-lang="objc"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;NSLog(&lt;span style="color:#e6db74"&gt;@&amp;#34;%d&amp;#34;&lt;/span&gt;, false &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;NSLog(&lt;span style="color:#e6db74"&gt;@&amp;#34;%d&amp;#34;&lt;/span&gt;, nil &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;NSLog(&lt;span style="color:#e6db74"&gt;@&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;NSLog(&lt;span style="color:#e6db74"&gt;@&amp;#34;%d&amp;#34;&lt;/span&gt;, [false isEqual:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (nil &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; NSLog(&lt;span style="color:#e6db74"&gt;@&amp;#34;equal&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="nil-safe-solution"&gt;Nil Safe Solution&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-objc" data-lang="objc"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[InterfaceName toGetNSDictionary:self.model.businessInfo&lt;span style="color:#f92672"&gt;?:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;@{}&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这行代码的意思是，首先检查 self.model.businessInfo 是否为 nil，如果不是 nil，则使用 self.model.businessInfo，否则返回一个空的 NSDictionary 对象 {}。&lt;/p&gt;
&lt;p&gt;这样写可以避免在访问 self.model.businessInfo 属性时出现空指针异常，因为如果该属性为 nil，则会返回一个空的 NSDictionary 对象，避免了后续的访问出现异常。&lt;/p&gt;
&lt;h2 id="class-in-objective-c"&gt;Class in Objective-C&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html"&gt;Apple Developer: Programming With Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/RoadMapOSX/chapters/01_Introduction.html"&gt;Apple Developer: Start Developing Mac Apps Today&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="quickstart"&gt;&lt;a href="https://www.tutorialspoint.com/objective_c/objective_c_quick_guide.htm"&gt;QuickStart&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-objc" data-lang="objc"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;@interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Person&lt;/span&gt; : &lt;span style="color:#a6e22e"&gt;NSObject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;@property&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;nonatomic&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;strong&lt;/span&gt;) NSString &lt;span style="color:#f92672"&gt;*&lt;/span&gt;name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;@property&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;nonatomic&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;assign&lt;/span&gt;) NSInteger age;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;@property&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;nonatomic&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;assign&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; birthYear;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- (&lt;span style="color:#66d9ef"&gt;instancetype&lt;/span&gt;)&lt;span style="color:#a6e22e"&gt;initWithName:&lt;/span&gt;(NSString &lt;span style="color:#f92672"&gt;*&lt;/span&gt;)name &lt;span style="color:#a6e22e"&gt;age:&lt;/span&gt;(NSInteger)age;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- (&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;)&lt;span style="color:#a6e22e"&gt;sayHello&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;@implementation&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Person&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;@synthesize&lt;/span&gt; birthYear;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- (&lt;span style="color:#66d9ef"&gt;instancetype&lt;/span&gt;)&lt;span style="color:#a6e22e"&gt;initWithName:&lt;/span&gt;(NSString &lt;span style="color:#f92672"&gt;*&lt;/span&gt;)name &lt;span style="color:#a6e22e"&gt;age:&lt;/span&gt;(NSInteger)age {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [super init];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (self) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _age &lt;span style="color:#f92672"&gt;=&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; self;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- (&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;)&lt;span style="color:#a6e22e"&gt;sayHello&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; NSLog(&lt;span style="color:#e6db74"&gt;@&amp;#34;Hello, my name is %@ and I am %ld years old.&amp;#34;&lt;/span&gt;, self.name, (&lt;span style="color:#66d9ef"&gt;long&lt;/span&gt;)self.age);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; main(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; argc, &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; argv[]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;@autoreleasepool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// insert code here...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; NSLog(&lt;span style="color:#e6db74"&gt;@&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Person &lt;span style="color:#f92672"&gt;*&lt;/span&gt;person &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [[Person alloc] initWithName:&lt;span style="color:#e6db74"&gt;@&amp;#34;John Doe&amp;#34;&lt;/span&gt; age:&lt;span style="color:#ae81ff"&gt;25&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; person.birthYear &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2022&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [person sayHello];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; NSLog(&lt;span style="color:#e6db74"&gt;@&amp;#34;%d&amp;#34;&lt;/span&gt;, person.birthYear);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="synthesize"&gt;@synthesize&lt;/h3&gt;
&lt;p&gt;@synthesize height;&lt;/p&gt;</description></item><item><title>SpriteKit</title><link>https://yongfrank.github.io/posts/spritekit/</link><pubDate>Wed, 29 Mar 2023 01:36:34 +0800</pubDate><guid>https://yongfrank.github.io/posts/spritekit/</guid><description>&lt;h3&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SpriteKit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;GameplayKit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;GameScene&lt;/span&gt;: SKScene {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;didMove&lt;/span&gt;(to view: SKView) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; background = SKSpriteNode(imageNamed: &lt;span style="color:#e6db74"&gt;&amp;#34;background&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// https://developer.apple.com/design/human-interface-guidelines/foundations/layout#platform-considerations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Remember, unlike UIKit SpriteKit positions things based on their center&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// – i.e., the point 0,0 refers to the horizontal and vertical center of a node.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// iPad mini screen size: 1024x768&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// var position: CGPoint { get set } .position The default value is (0.0,0.0).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; background.position = CGPoint(x: &lt;span style="color:#ae81ff"&gt;512&lt;/span&gt;, y: &lt;span style="color:#ae81ff"&gt;384&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// The blend mode used to draw the sprite into the parent’s framebuffer.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// The source color replaces the destination color.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// The .replace option means &amp;#34;just draw it, ignoring any alpha values,&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; background.blendMode = .replace
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; background.zPosition = &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Adds a node to the end of the receiver’s list of child nodes.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; addChild(background)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; physicsBody = SKPhysicsBody(edgeLoopFrom: frame)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;touchesBegan&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;_&lt;/span&gt; touches: Set&amp;lt;UITouch&amp;gt;, with event: UIEvent?) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; touch = touches.first {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; location = touch.location(&lt;span style="color:#66d9ef"&gt;in&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; box = SKSpriteNode(imageNamed: &lt;span style="color:#e6db74"&gt;&amp;#34;ballBlue&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// let box = SKSpriteNode(color: .red, size: CGSize(width: 64, height: 64))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; box.position = location
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// img @2x 88 x 88 ==&amp;gt; 44 x 44 ==&amp;gt; dimensions = 22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; box.physicsBody = SKPhysicsBody(circleOfRadius: &lt;span style="color:#ae81ff"&gt;22&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// box.physicsBody = SKPhysicsBody(rectangleOf: CGSize(width: 64, height: 64))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; addChild(box)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Xcode IDE</title><link>https://yongfrank.github.io/posts/xcode-ide/</link><pubDate>Mon, 27 Mar 2023 21:31:43 +0800</pubDate><guid>https://yongfrank.github.io/posts/xcode-ide/</guid><description>&lt;blockquote&gt;
&lt;p&gt;This page is open source. &lt;a href="https://github.com/yongfrank/yongfrank.github.io/edit/main/content/posts/xcode-ide.md"&gt;Improve this page&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="xcode-history"&gt;Xcode History&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.aliyun.com/article/254338?spm=a2c6h.13262185.profile.341.699e167e7REVuk"&gt;Xcode是如何诞生的？How did Xcode come into being&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Xcode是一款用于开发Mac和iOS应用程序的综合性开发工具，它由苹果公司开发和维护。Xcode最初的版本于2003年发布，自那时以来，它已经成为Mac和iOS开发的标准工具之一。&lt;/p&gt;
&lt;p&gt;Xcode的诞生可以追溯到1997年，当时苹果计算机公司正在寻求一款更好的工具来开发它的操作系统和应用程序。此时，苹果正在使用CodeWarrior和MPW等开发工具，但它们并不完全满足苹果的需求。&lt;/p&gt;
&lt;p&gt;苹果的开发团队决定开发一款自己的集成开发环境（IDE），旨在更好地支持苹果的开发工作流程。于是，在1997年，苹果成立了一个名为Project Builder的团队，该团队的任务是开发一款全新的IDE。&lt;/p&gt;
&lt;p&gt;Project Builder最初基于NeXTSTEP操作系统的工具，但随着苹果收购NeXT，它也开始使用Mac OS X技术。2003年，苹果发布了Xcode 1.0版本，这是一款全新的IDE，它汇集了Project Builder和一些其他开发工具的功能。随着时间的推移，Xcode的版本不断更新和改进，逐渐成为苹果开发的标准工具。&lt;/p&gt;
&lt;p&gt;今天，Xcode仍然是苹果开发应用程序的主要工具之一。它提供了一个综合性的工作环境，支持多种编程语言和开发框架，帮助开发人员更快、更高效地开发和部署应用程序。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.aliyun.com/article/254333?spm=a2c6h.13262185.profile.345.699e167e7REVuk"&gt;LLVM和Clang背后的故事 Story of LLVM &amp;amp; Clang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;LLVM是Apple官方支持的编译器，而该编译器的前端是Clang，这两个工具都被集成到了Xcode里面。在这篇文章中，我们来了解一下LLVM和Clang背后的故事。&lt;/p&gt;
&lt;p&gt;此外，Clang有一个重要的衍生项目是静态分析工具，能够通过自动分析程序的逻辑，在编译时就找出程序可能的bug，这个功能叫做ARC。ARC的实现让当时的广大开发者们大为惊愕。&lt;/p&gt;
&lt;p&gt;除了LLVM核心和Clang以外，LLVM还包括一些重要的子项目，比如一个原生支持调试多线程程序的调试器LLDB和一个C++的标准库libstdc++。不光是Apple，很多的项目和编程语言都从LLVM中取得了关键性的技术。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.aliyun.com/article/254330?spm=a2c6h.13262185.profile.348.699e167e7REVuk"&gt;苹果用户界面Aqua背后的故事&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="ide-tutorials"&gt;IDE Tutorials&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/lxlx1798/category/1262403.html"&gt;Xcode 6 Articles: Shortcut &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/lxlx1798/p/9369458.html"&gt;Xcode overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id="collaboration-with-individual-teams"&gt;Collaboration with Individual Teams&lt;/h2&gt;
&lt;p&gt;Make sure you&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/11309656/how-to-share-an-individual-apple-ios-developer-account"&gt;How to share an Individual Apple iOS Developer Account&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There should be at least 2 files you need to import in Keychain: - development certificate - distribution certificate Also, not sure, but it might help: - the original self-signed certificate you submitted to apple (the CSR)&lt;/p&gt;</description></item><item><title>UIKit Intro in Objective-C &amp; Swift</title><link>https://yongfrank.github.io/posts/uikit-intro/</link><pubDate>Mon, 27 Mar 2023 13:31:46 +0800</pubDate><guid>https://yongfrank.github.io/posts/uikit-intro/</guid><description>&lt;p&gt;Everything about UIKit in Objective-C &amp;amp; Swift when I was coding.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/example-code/uikit/"&gt;hws - UIKit Example Code&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>Singleton and Data Design in Swift / SwiftUI</title><link>https://yongfrank.github.io/posts/singleton-in-swift/</link><pubDate>Sat, 25 Mar 2023 01:39:04 +0800</pubDate><guid>https://yongfrank.github.io/posts/singleton-in-swift/</guid><description>&lt;h2 id="swift-class-vs-struct-which-is-better-for-model-design"&gt;&lt;a href="https://www.appcoda.com.tw/swift-class/"&gt;Swift Class vs Struct, which is better for Model Design&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// using struct。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; herDog = Dog() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// if herDog is changed, print message.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;didSet&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;Her dog is changed!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;herDog.name = &lt;span style="color:#e6db74"&gt;&amp;#34;Starlord&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Her dog is changed!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// using class。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; herCat = Cat() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;didSet&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;Her cat is changed!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;herCat.name = &lt;span style="color:#e6db74"&gt;&amp;#34;Mumu&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// No print message.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://docs-assets.developer.apple.com/published/4e7c26b6ad/ff7aa08f-4857-44ce-88d5-7dacbef84509.png" alt="MVC by Apple"&gt;&lt;/p&gt;</description></item><item><title>Facebook Yoga / Flexbox</title><link>https://yongfrank.github.io/posts/facebook-flexbox/</link><pubDate>Fri, 24 Mar 2023 13:02:13 +0800</pubDate><guid>https://yongfrank.github.io/posts/facebook-flexbox/</guid><description>&lt;h2 id="repository-on-github-by-facebook"&gt;&lt;a href="https://github.com/facebook/yoga"&gt;Repository on GitHub By facebook&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/yoga-layout"&gt;&lt;img src="https://img.shields.io/npm/v/yoga-layout.svg" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://search.maven.org/artifact/com.facebook.yoga/yoga"&gt;&lt;img src="https://img.shields.io/maven-central/v/com.facebook.yoga/yoga" alt="Maven Central"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="layout"&gt;Layout&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://koenig-media.raywenderlich.com/uploads/2017/05/flexbox_theory_3.png" alt="Layout-justify-content"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://koenig-media.raywenderlich.com/uploads/2017/05/flexbox_theory_4.png" alt="Layout-align-items"&gt;&lt;/p&gt;
&lt;h2 id="code"&gt;Code&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://codepen.io/pen/"&gt;Online HTML CSS JavaScript&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="align-"&gt;&lt;code&gt;align-*&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"&gt;align-items&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;
 &amp;lt;title&amp;gt;Align-items Stretch Demo&amp;lt;/title&amp;gt;
 &amp;lt;style&amp;gt;
 .container {
 display: flex;
 height: 200px;
 align-items: stretch;
 background-color: lightgray;
 }

 .item {
 width: 100px;
 margin: 10px;
 background-color: #f1c40f;
 text-align: center;
 font-size: 24px;
 line-height: 2;
 }
 &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;item&amp;#34;&amp;gt;1&amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;item&amp;#34;&amp;gt;2&amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;item&amp;#34;&amp;gt;3&amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="line-"&gt;line-*&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/line-height"&gt;line height&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Docker Getting Started</title><link>https://yongfrank.github.io/posts/docker-getting-started/</link><pubDate>Tue, 21 Mar 2023 13:19:38 +0800</pubDate><guid>https://yongfrank.github.io/posts/docker-getting-started/</guid><description>&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 运行以下命令在 Docker 容器中克隆 GitHub 仓库：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 该命令的含义是，以 alpine/git 镜像为基础，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 启动一个名为 repo 的容器，并在容器内执行 git clone 命令，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 将 https://github.com/docker/getting-started.git 仓库克隆到当前目录下的 . 文件夹中。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run --name repo alpine/git clone https://github.com/docker/getting-started.gited/ .
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 然后，运行以下命令将克隆的代码复制到本地文件系统中：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 该命令的含义是，将名为 repo 的容器中 /git/getting-started/ &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 文件夹下的所有文件和子文件夹复制到当前目录下。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker cp repo:/git/getting-started/ .
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run -d -p 80:80 docker/getting-started
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# You&amp;#39;ll notice a few flags being used. Here&amp;#39;s some more info on them:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# -d - run the container in detached mode (in the background)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# -p 80:80 - map port 80 of the host to port 80 in the container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# docker/getting-started - the image to use&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="dockerfile"&gt;Dockerfile&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/440325928"&gt;Dockerfile for Dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-dockerfile" data-lang="dockerfile"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; &lt;span style="color:#e6db74"&gt;ubuntu&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;LABEL&lt;/span&gt; org.opencontainers.image.authers&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Frank Chu&amp;#34;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;# env variable&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;ENV&lt;/span&gt; DEBIAN_FRONTEND noninteractive&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;# Time zone&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;ARG&lt;/span&gt; TZ&lt;span style="color:#f92672"&gt;=&lt;/span&gt;Asia/Shanghai&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;ENV&lt;/span&gt; TZ &lt;span style="color:#e6db74"&gt;${&lt;/span&gt;TZ&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;RUN&lt;/span&gt; ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; echo $TZ &amp;gt; /etc/timezone&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;# 具体来说，/usr/share/zoneinfo 目录下保存了各个时区的信息，而/etc/localtime 和 /etc/timezone 文件则记录了系统当前的时区信息。上述指令中的含义是，将容器时区设置为 $TZ 变量指定的时区。&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;# 具体操作为：&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;# /usr/share/zoneinfo/$TZ 表示找到 $TZ 对应的时区文件（例如 Asia/Shanghai）；&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;# ln -snf /usr/share/zoneinfo/$TZ /etc/localtime 表示将 $TZ 对应的时区文件软连接到 /etc/localtime，从而将容器时区设置为指定的时区；&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;# echo $TZ &amp;gt; /etc/timezone 表示将 $TZ 值写入 /etc/timezone 文件，从而使系统中其他程序也能读取到容器的时区信息。&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;# 这个指令通常会在 Dockerfile 中的一开始设置，以确保后续操作中时间信息的正确性。&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="docker-cli"&gt;Docker CLI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://yeasy.gitbook.io/docker_practice/container/run"&gt;Unbuntu Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com.zh.xy2401.com/network/proxy/"&gt;Ubuntu Proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker pull ubuntu
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Run a command in a new container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# docker run [--name &amp;lt;string&amp;gt;] &amp;lt;image&amp;gt; &amp;lt;command&amp;gt; &amp;lt;args&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# docker run -itd [--name ubuntu-test] ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run -t -i --name ubuntu-testing ubuntu:18.04 /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Start existing container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# docker start [-i --interactive] &amp;lt;container&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker start ubuntu-testing -i
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Execute command in running container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# -t Allocate a pseudo-TTY&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# -i Keep STDIN open even if not attached&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# docker exec --interactive --tty &amp;lt;container&amp;gt; &amp;lt;command&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker exec -it ubuntu-testing bash
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# List containers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker ps
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Remove one or more containers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# docker rm &amp;lt;containers...&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker rm ubuntu-testing
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Clash &amp; Config File</title><link>https://yongfrank.github.io/posts/clash-config-file/</link><pubDate>Mon, 20 Mar 2023 10:26:07 +0800</pubDate><guid>https://yongfrank.github.io/posts/clash-config-file/</guid><description>&lt;h2 id="infrastructure"&gt;infrastructure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;port&lt;/li&gt;
&lt;li&gt;hosts&lt;/li&gt;
&lt;li&gt;dns&lt;/li&gt;
&lt;li&gt;mode: Rule&lt;/li&gt;
&lt;li&gt;proxies: proxy name, server, Password&lt;/li&gt;
&lt;li&gt;proxies-groups: name, type, proxies&lt;/li&gt;
&lt;li&gt;rules: Match RULE, DOMAIN, Request Rule&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;port&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;7890&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;socks-port&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;7891&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;redir-port&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;7892&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;mixed-port&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;7893&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;allow-lan&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;mode&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;log-level&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;info&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;ipv6&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;hosts&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;services.googleapis.cn&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;142.250.196.131&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;www.google.cn&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;142.250.196.131&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;external-controller&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0.0.0.0&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;9090&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;clash-for-android&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;append-system-dns&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;profile&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;tracing&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;experimental&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;sniff-tls-sni&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;dns&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;enable&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;listen&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;127.0.0.1&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;8853&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;default-nameserver&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;223.5.5.5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;8.8.4.4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ipv6&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;enhanced-mode&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;fake-ip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;fake-ip-filter&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {- &lt;span style="color:#e6db74"&gt;&amp;#34;*.lan&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;nameserver&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {- &lt;span style="color:#e6db74"&gt;&amp;#34;114.114.114.114&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;fallback&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {- &lt;span style="color:#ae81ff"&gt;https://1.0.0.1/dns-query}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;fallback-filter&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;geoip&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ipcidr&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {- &lt;span style="color:#ae81ff"&gt;240.0.0.0&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;/4}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;domain&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {- &lt;span style="color:#ae81ff"&gt;+.facebook.com}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;proxies&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Hong Kong&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;server&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;abc.top,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;port&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;200001&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;type&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;trojan,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;password&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;123456&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;sni&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;abcde.top,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;skip-cert-verify&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;udp&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; -
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;proxy-groups&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;type&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;select&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;proxies&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;Hong Kong&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; -
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;YouTuBe&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;type&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;select&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;proxies&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;Hong Kong&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; -
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;rules&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;DOMAIN-SUFFIX, local, DIRECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;MATCH, Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="help-desk"&gt;Help Desk&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gleaming-fedora-39d.notion.site/WestData-280992c869574200b910ced779f93e9b"&gt;Help Desk for WestData&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.nameless13.com/"&gt;Subscription Converter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tutorials"&gt;Tutorials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://heaid.top/index.php/archives/34/"&gt;ClashX Pro 使用教程 最好用的Mac苹果电脑科学上网工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qust.me/post/clashxProMac/"&gt;Mac 电脑使用 ClashX Pro 作为网关旁路由&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Azure VPS</title><link>https://yongfrank.github.io/posts/azure-vps/</link><pubDate>Sat, 18 Mar 2023 20:46:20 +0800</pubDate><guid>https://yongfrank.github.io/posts/azure-vps/</guid><description>&lt;h2 id="ssh-keygen"&gt;ssh-keygen&lt;/h2&gt;
&lt;p&gt;SSH keygen for passwordless login is based on the principles of public-key cryptography and key authentication mechanism. In SSH passwordless login, a pair of keys, including a public key and a private key, needs to be generated. The private key is stored on the local host, while the public key can be shared between the local host and the remote server.&lt;/p&gt;
&lt;p&gt;SSH 免密登录的原理基于公钥密码学和密钥认证机制。在 SSH 免密登录中，需要生成一对密钥，分别是公钥和私钥。私钥存储在本地主机上，而公钥则可以在本地主机和远程服务器之间共享。&lt;/p&gt;
&lt;p&gt;In SSH passwordless login, the user first needs to generate a pair of keys on the local host and then copy the public key to the remote server. When the user tries to log in to the remote server through SSH, the remote server sends an encrypted challenge to the user, requesting the user to provide the correct key for authentication. The user&amp;rsquo;s SSH client uses the private key on the local host to encrypt the challenge and sends the encrypted result to the remote server. If the remote server can successfully decrypt the encrypted result using the public key, it means that the user has the correct private key and can perform passwordless login.&lt;/p&gt;</description></item><item><title>ActivityKit &amp; WidgetKit on iOS</title><link>https://yongfrank.github.io/posts/activitykit-and-widgetkit/</link><pubDate>Mon, 13 Mar 2023 17:23:10 +0800</pubDate><guid>https://yongfrank.github.io/posts/activitykit-and-widgetkit/</guid><description>&lt;blockquote&gt;
&lt;p&gt;My apps were featured on the App Store a few times during the year because of lock screen widgets. Check my guide on lock screen widgets if you still don&amp;rsquo;t have them in your app. &lt;a href="https://twitter.com/mecid/status/1645349627951034369?s=12&amp;amp;t=qBx4jrzcBhVR7gAQAZeV2Q"&gt;twitter&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="live-activity"&gt;Live Activity&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://juejin.cn/post/7164594517562097671"&gt;盒马 iOS Live Activity &amp;amp;“灵动岛”配送场景实践&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="相关限制"&gt;相关限制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;iOS 16.1 及以上&lt;/li&gt;
&lt;li&gt;更新动态数据大小不能超过 4KB&lt;/li&gt;
&lt;li&gt;只能在应用处于前台时从应用启动 LiveActivity。但是，可以在应用程序在后台运行时从应用程序更新或结束实时活动——例如，使用 &lt;a href="https://developer.apple.com/documentation/backgroundtasks"&gt;Background Task&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="生命周期与约束"&gt;生命周期与约束&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/activitykit/displaying-live-data-with-live-activities"&gt;利用 Live Activities 显示实时数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与 Widget 相比，实时活动使用不同的机制来接收更新。Live Activities 不是使用时间轴机制，而是使用 ActivityKit 从您的应用程序接收更新的数据，并通过 ActivityKit push notifications 远程接收。&lt;/p&gt;
&lt;p&gt;Live Activities use a different mechanism to receive updates compared to widgets. Instead of using a timeline mechanism, Live Activities receive updated data from your app with ActivityKit and remotely with ActivityKit push notifications.&lt;/p&gt;</description></item><item><title>UIImagePickerController in UIKit</title><link>https://yongfrank.github.io/posts/uiimage-picker-controller-uikit/</link><pubDate>Fri, 03 Mar 2023 11:43:07 +0800</pubDate><guid>https://yongfrank.github.io/posts/uiimage-picker-controller-uikit/</guid><description>&lt;h2 id="keyword"&gt;Keyword&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;UIImagePickerController&lt;/li&gt;
&lt;li&gt;NSObject&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="uiimagepickercontroller--phpickerviewcontroller"&gt;UIImagePickerController &amp;amp; PHPickerViewController&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference: &lt;a href="https://www.jianshu.com/p/5e7aacfa4374"&gt;JianShu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何在 iOS 14 中使用新推出的 PhotoKit 框架中的 PHPickerViewController 类，并通过 Objective C 和Swift 语言从照片库中选择照片。&lt;/p&gt;
&lt;p&gt;多年来，在 iOS 上选择照片和视频的最简单方法是使用 &lt;code&gt;UIImagePickerController&lt;/code&gt; 类。该类允许你呈现一个内置的系统 UI 来选择照片或视频，并将其返回到你的应用程序中，而无需构建选择照片的 UI 页面或访问照片库的提示。&lt;/p&gt;
&lt;p&gt;然而，&lt;code&gt;UIImagePickerController&lt;/code&gt; 也有很多缺点：它相当基础，而且呈现给用户浏览照片库的 UI 也非常有限；一次只能选择一个（图片或者视频），而且只支持基本的过滤功能。在 iOS 14 中，&lt;code&gt;UIImagePickerController&lt;/code&gt; 被 &amp;ldquo;软废弃 &amp;ldquo;了。虽然目前还没有被标记为废弃，但如果你看一下头文件，就会发现 API 标记有这个&lt;/p&gt;
&lt;p&gt;&lt;code&gt;API_TO_BE_DEPRECATED&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;iOS 14 中新的 &lt;code&gt;PHPicker&lt;/code&gt; 类不是在 &lt;code&gt;UIKit&lt;/code&gt; 框架中的，而是位于 &lt;code&gt;PhotosUI&lt;/code&gt; 框架中&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="navigation-button--function-for-selection"&gt;Navigation Button &amp;amp; Function for selection&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// inside viewDidLoad&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.navigationItem.leftBarButtonItem = UIBarButton(barButtonSystemItem: .add, target: &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;, action: &lt;span style="color:#66d9ef"&gt;#selector&lt;/span&gt;(addNewPerson))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// inside class like ViewController&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;@objc&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;addNewPerson&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// @MainActor class UIImagePickerController : UINavigationController&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; picker = UIImagePickerController()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; picker.allowsEditing = &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; picker.delegate = &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Presents a view controller modally. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// extension UIViewController {}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.present(picker, animated: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// let controller conform to these Delegate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// second: telling us when the user either selected a picture or cancelled the picker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// third: really is quite pointless here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ViewController&lt;/span&gt;: UICollectionViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="uiimagepickercontrollerdelegate"&gt;UIImagePickerControllerDelegate&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Extract the image from the dictionary that is passed as a parameter.&lt;/li&gt;
&lt;li&gt;Generate a unique filename for it.&lt;/li&gt;
&lt;li&gt;Convert it to a JPEG, then write that JPEG to disk.&lt;/li&gt;
&lt;li&gt;Dismiss the view controller.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// @protocol UIImagePickerControllerDelegate&amp;lt;NSObject&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;imagePickerController&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;_&lt;/span&gt; picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;guard&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; image = info[.editedImage] &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt;? UIImage &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; { &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; imageName: String = UUID().uuidString
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; imagePath: URL = getDocumentsDirectory().appendingPathComponent(imageName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; jpegData: Data = image.jpegData(compressionQuality: &lt;span style="color:#ae81ff"&gt;0.8&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt;? jpegData.write(to: imagePath)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; person = Person(name: &lt;span style="color:#e6db74"&gt;&amp;#34;Unknown&amp;#34;&lt;/span&gt;, image: imageName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; people.append(person)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; collectionView.reloadData()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// @MainActor open class UIViewController {}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.dismiss(animated: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getDocumentsDirectory&lt;/span&gt;() -&amp;gt; URL {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// default: The shared file manager object for the process.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// User home directories (/Users).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// The user’s home directory—the place to install user’s personal items (~).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; path = FileManager.&lt;span style="color:#66d9ef"&gt;default&lt;/span&gt;.urls(&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt;: .userDirectory, &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt;: .userDomainMask)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; path[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="filemanager"&gt;FileManager&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// default: The shared file manager object for the process.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Document directory.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// userDomainMask: The user’s home directory—the place to install user’s personal items (~).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;FileManager.&lt;span style="color:#66d9ef"&gt;default&lt;/span&gt;.urls(&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt;: .documentDirectory, &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt;: .userDomainMask)[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;].appendingPathComponent(&lt;span style="color:#e6db74"&gt;&amp;#34;123.jpg&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt;R3: Foundation.URL = &lt;span style="color:#e6db74"&gt;&amp;#34;file:///Users/yongfrank/Documents/123.jpg&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="nsobject"&gt;NSObject&lt;/h2&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/100/43"&gt;HackingWithSwift&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Hugo Init</title><link>https://yongfrank.github.io/posts/hugo-init/</link><pubDate>Thu, 02 Mar 2023 11:06:36 +0800</pubDate><guid>https://yongfrank.github.io/posts/hugo-init/</guid><description>&lt;p&gt;This article is about how to init a hugo site.&lt;/p&gt;</description></item><item><title>New Blog Site, Hugo, Publish</title><link>https://yongfrank.github.io/posts/new-blog-site/</link><pubDate>Thu, 02 Mar 2023 10:52:24 +0800</pubDate><guid>https://yongfrank.github.io/posts/new-blog-site/</guid><description>&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.danijelavrzan.com"&gt;iOS DEVELOPER WRITER. SPEAKER.&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Hugo Test</title><link>https://yongfrank.github.io/posts/pogo-test/</link><pubDate>Mon, 27 Feb 2023 21:20:44 +0800</pubDate><guid>https://yongfrank.github.io/posts/pogo-test/</guid><description>&lt;h1 id="hello-world"&gt;Hello world&lt;/h1&gt;
&lt;p&gt;This is Frank&amp;rsquo;s first post.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is &lt;strong&gt;bold&lt;/strong&gt; text, and this is &lt;em&gt;emphasized&lt;/em&gt; text.&lt;/p&gt;
&lt;p&gt;Visit the &lt;a href="https://gohugo.io"&gt;Hugo&lt;/a&gt; website!&lt;/p&gt;</description></item><item><title>Smart Speaker based on GPT by OpenAI</title><link>https://yongfrank.github.io/posts/openai-smart-speaker/</link><pubDate>Thu, 02 Feb 2023 12:31:27 +0800</pubDate><guid>https://yongfrank.github.io/posts/openai-smart-speaker/</guid><description>&lt;p&gt;GitHub Link: &lt;a href="https://github.com/yongfrank/SmartSpeaker"&gt;GitHub&lt;/a&gt;
Video Link: &lt;a href="https://twitter.com/i/status/1629315971977719808"&gt;Twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/yongfrank/SmartSpeaker/raw/master/resources/screenshot.png" alt="GPT-Screenshot"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://picovoice.ai/docs/quick-start/porcupine-python/"&gt;Trigger - picovoice.ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/PyAudio/"&gt;Recording - PyAudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/get-started-speech-to-text?tabs=macos%2Cterminal&amp;amp;pivots=programming-language-python"&gt;ASR - Microsoft Azure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="table-of-content"&gt;Table Of Content&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#table-of-content"&gt;Table Of Content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#characteristics"&gt;Characteristics&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#example-questions"&gt;Example Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#steps"&gt;Steps&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-1-install-all-dependencies-client---npm-install"&gt;Step 1. Install all dependencies &lt;code&gt;client - npm install&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-train-wake-wordoptional"&gt;Step 2. Train Wake word(Optional)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3-change-envexample-to-env-and-filling-env-files"&gt;Step 3. change .env.example to .env and filling .env files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-4-change-test_mode-to-true-or-is_raspberrypi-in-serverutilsconfigpyimportant-connect-url-in-clientsrcappjsoptional"&gt;Step 4. Change TEST_MODE to True or IS_RASPBERRYPI in &lt;code&gt;server/utils/config.py&lt;/code&gt;(Important), connect url in &lt;code&gt;client/src/app.js&lt;/code&gt;(Optional)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-4-run-sh-startsh-or-server---apppy-and-client---npm-start"&gt;Step 4. run &lt;code&gt;sh start.sh&lt;/code&gt; or &lt;code&gt;server - app.py&lt;/code&gt; and &lt;code&gt;client - npm start&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pyaudio"&gt;PyAudio&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#installation-error-on-macos"&gt;Installation error on macOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#picovoiceai"&gt;picovoice.ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#azure-speech-service"&gt;Azure Speech Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dotenv"&gt;dotenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#services"&gt;Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#articles"&gt;Articles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="characteristics"&gt;Characteristics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://platform.openai.com/docs/quickstart/introduction"&gt;prompt completion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://platform.openai.com/docs/quickstart/introduction"&gt;continuous dialog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;precise ASR(speech to text)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="example-questions"&gt;Example Questions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Prompt: Write a tagline for an ice cream shop.
&lt;ul&gt;
&lt;li&gt;Completion: We serve up smiles with every scoop!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Suggest one name for a horse.
&lt;ul&gt;
&lt;li&gt;Lightning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Suggest one name for a black horse.
&lt;ul&gt;
&lt;li&gt;Midnight&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Suggest three names for a horse that is a superhero.
&lt;ol&gt;
&lt;li&gt;Super Stallion&lt;/li&gt;
&lt;li&gt;Captain Colt&lt;/li&gt;
&lt;li&gt;Mighty Mustang&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-ChatGPT" data-lang="ChatGPT"&gt;$ Suggest three names for an animal that is a superhero.
Animal: Cat
Names: Captain Sharpclaw, Agent Fluffball, The Incredible Feline
Animal: Dog
Names: Ruff the Protector, Wonder Canine, Sir Barks-a-Lot
Animal: Horse

Names: Super Stallion, Mighty Mare, The Magnificent Equine
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="steps"&gt;Steps&lt;/h2&gt;
&lt;h3 id="step-1-install-all-dependencies"&gt;Step 1. &lt;a href="#installation"&gt;Install all dependencies &lt;code&gt;client - npm install&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="step-2-train-wake-wordoptional"&gt;Step 2. &lt;a href="https://console.picovoice.ai/ppn"&gt;Train Wake word(Optional)&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="step-3-change-envexample-to-env-and-filling-env-files"&gt;Step 3. &lt;a href="#dotenv"&gt;change .env.example to .env and filling .env files&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="step-4-change-test_mode-to-true-or-is_raspberrypi-in-serverutilsconfigpyimportant-connect-url-in-clientsrcappjsoptional"&gt;Step 4. Change TEST_MODE to True or IS_RASPBERRYPI in &lt;code&gt;server/utils/config.py&lt;/code&gt;(Important), connect url in &lt;code&gt;client/src/app.js&lt;/code&gt;(Optional)&lt;/h3&gt;
&lt;h3 id="step-4-run-sh-startsh-or-server---apppy-and-client---npm-start"&gt;Step 4. run &lt;code&gt;sh start.sh&lt;/code&gt; or &lt;code&gt;server - app.py&lt;/code&gt; and &lt;code&gt;client - npm start&lt;/code&gt;&lt;/h3&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;p&gt;run &lt;code&gt;install.sh&lt;/code&gt; or follow the steps&lt;/p&gt;</description></item><item><title>Linux Tips</title><link>https://yongfrank.github.io/posts/linux-tips/</link><pubDate>Wed, 18 Jan 2023 15:54:04 +0800</pubDate><guid>https://yongfrank.github.io/posts/linux-tips/</guid><description>&lt;!-- https://github.com/DavidAnson/markdownlint/issues/199 --&gt;
&lt;h2 id="特殊符号"&gt;特殊符号&lt;/h2&gt;
&lt;h3 id="-grave-accent"&gt;` grave accent&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;noun&lt;/p&gt;
&lt;p&gt;a mark placed over a vowel in some languages to show how it should be pronounced, as over the e in the French word père 钝重音符，沉音符，抑音符（标在元音上面表发音）&lt;/p&gt;
&lt;p&gt; ➡  compare acute accent, circumflex, tilde (1) , umlaut&lt;/p&gt;
&lt;p&gt; ➡  see also grave1&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;`&lt;/span&gt;date&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;date&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="--用于数学运算"&gt;&lt;code&gt;$(( ))&lt;/code&gt; 用于数学运算&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#66d9ef"&gt;$((&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="usage"&gt;USAGE&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/style/code-syntax"&gt;google explaination&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在命令行工具的用法说明中，通常有一些符号来表示参数的类型和数量。这些符号的含义可能因不同的工具而有所差异，但一般来说，有以下几种常见的规则²：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[]: 表示方括号内的参数是可选的，可以提供也可以省略；&lt;/li&gt;
&lt;li&gt;&amp;lt;&amp;gt;: 表示尖括号内的参数是必需的，必须提供；&lt;/li&gt;
&lt;li&gt;&amp;hellip;: 表示省略号前面的参数可以重复多次，或者表示任意数量和类型的参数；&lt;/li&gt;
&lt;li&gt;|: 表示竖线两边的参数是互斥的，只能选择其中一个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，假设有一个工具叫做 copy，它用于复制文件或目录。它的用法说明可能是这样：&lt;/p&gt;
&lt;p&gt;copy &amp;lt;source&amp;gt; &amp;lt;destination&amp;gt; [-r] [-v]&lt;/p&gt;</description></item><item><title>Runtime Explained</title><link>https://yongfrank.github.io/posts/runtime-explained/</link><pubDate>Tue, 03 Jan 2023 16:13:29 +0800</pubDate><guid>https://yongfrank.github.io/posts/runtime-explained/</guid><description>&lt;h2 id="runtime"&gt;RUNTIME&lt;/h2&gt;
&lt;h3 id="generally"&gt;Generally&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compile time error&lt;/li&gt;
&lt;li&gt;Link time&lt;/li&gt;
&lt;li&gt;Runtime error&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;&lt;/th&gt;
 &lt;th&gt;Compile Time Error&lt;/th&gt;
 &lt;th&gt;Runtime Error&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Time&lt;/td&gt;
 &lt;td&gt;Earlier&lt;/td&gt;
 &lt;td&gt;Later&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Error&lt;/td&gt;
 &lt;td&gt;Grammar Error, Semantic Error&lt;/td&gt;
 &lt;td&gt;Memory Error, Math Error&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;Easy&lt;/td&gt;
 &lt;td&gt;Hard&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="specifically"&gt;Specifically&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Runtime Library (stdio.h)&lt;/li&gt;
&lt;li&gt;Runtime Environment
&lt;ul&gt;
&lt;li&gt;No Runtime: C/C++, Rust&lt;/li&gt;
&lt;li&gt;Light Runtime: Golang&lt;/li&gt;
&lt;li&gt;Heavy Runtime: Java(JVM), Python(CPython), C#(.NET Runtime)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JRE = JVM + Library&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;&lt;/th&gt;
 &lt;th&gt;No Runtime&lt;/th&gt;
 &lt;th&gt;Runtime&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Memory Mgmt&lt;/td&gt;
 &lt;td&gt;Mannually&lt;/td&gt;
 &lt;td&gt;Automatically&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Thread Model&lt;/td&gt;
 &lt;td&gt;Rely on OS&lt;/td&gt;
 &lt;td&gt;Rely on Runtime&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;System Interaction&lt;/td&gt;
 &lt;td&gt;Directly&lt;/td&gt;
 &lt;td&gt;Indirectly(rely on Runtime)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Efficiency&lt;/td&gt;
 &lt;td&gt;High&lt;/td&gt;
 &lt;td&gt;Low(High on JIT)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;Bare Metal&lt;/td&gt;
 &lt;td&gt;&amp;mdash;&amp;mdash;-&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;运行时 = 运行时环境 + 运行时库&lt;/p&gt;</description></item><item><title>Automatic Control Principles</title><link>https://yongfrank.github.io/posts/automatic-control-principles/</link><pubDate>Sun, 11 Dec 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/automatic-control-principles/</guid><description>&lt;!--
 * @Author: Frank Chu
 * @Date: 2022-10-11 18:41:40
 * @LastEditors: Frank Chu
 * @LastEditTime: 2023-03-02 12:35:40
 * @FilePath: /yongfrank.github.io/content/posts/Automatic-control-principles.md
 * @Description: 
 * 
 * Copyright (c) 2022 by Frank Chu, All Rights Reserved. 
--&gt;
&lt;h2 id="masons-gain-formula"&gt;Mason&amp;rsquo;s Gain Formula&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Mason%27s_gain_formula"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mason&amp;rsquo;s gain formula (MGF) is a method for finding the &lt;a href="https://en.wikipedia.org/wiki/Transfer_function"&gt;transfer function&lt;/a&gt; $H(s)$ of a linear signal-flow graph (SFG).&lt;/p&gt;
&lt;p&gt;$$
P = \frac{\sum_{k=1}^n G_k \Delta_k}{\Delta} \
\Delta = 1 - \sum L_i + \sum L_iL_j - \sum L_i L_j L_k + &amp;hellip; + (-1)^m\sum&amp;hellip;+&amp;hellip;
$$&lt;/p&gt;</description></item><item><title>Swift Codable, JSON, UserDefaults Explained</title><link>https://yongfrank.github.io/posts/2022-10-03-codable-explained/</link><pubDate>Mon, 03 Oct 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-10-03-codable-explained/</guid><description>&lt;!--
 * @Author: Frank Chu
 * @Date: 2022-10-03 15:16:00
 * @LastEditors: Frank Chu
 * @LastEditTime: 2022-10-04 10:43:25
 * @FilePath: /blog/_posts/2022-10-03-codable-explained.md
 * @Description: 
 * 
 * Copyright (c) 2022 by Frank Chu, All Rights Reserved. 
--&gt;
&lt;h2 id="whats-json"&gt;What&amp;rsquo;s JSON&lt;/h2&gt;
&lt;p&gt;JSON is a file format to store key-value pair.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pokeapi.co/api/v2/pokemon/pikachu"&gt;It&amp;rsquo;s JSON for Pikachu&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="whats-codable-in-the-swift"&gt;What&amp;rsquo;s Codable in the Swift&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Codable&lt;/strong&gt; was introduced in &lt;strong&gt;Swift 4.0&lt;/strong&gt;, bringing with it incredibly smooth conversion between Swift data types and JSON.&lt;/p&gt;</description></item><item><title>Swift: Math Algorithm</title><link>https://yongfrank.github.io/posts/math-algorithm/</link><pubDate>Sun, 02 Oct 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/math-algorithm/</guid><description>&lt;h2 id="bfs"&gt;BFS&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://holyswift.app/the-simplest-bfs-and-dfs-templates-for-algorithms-in-swift/"&gt;BFS and DFS Templates Algorithms in Swift&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="lru---least-recently-used"&gt;LRU - Least Recently Used&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/e09870b60046"&gt;https://www.jianshu.com/p/e09870b60046&lt;/a&gt;
那什么是 LruCache 呢？其实 LRU(Least Recently Used) 的意思就是近期最少使用算法，它的核心思想就是会优先淘汰那些近期最少使用的缓存对象。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ListNode&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; key: Int
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; value: Int
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; next: ListNode?
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; prev: ListNode?
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;init&lt;/span&gt;(key: Int, value: Int) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.key = key
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.value = value
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;LRUCache&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; cache = [Int: ListNode]()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 最大size&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; max_size = &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 当前size&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; cur_size = &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 头&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; head: ListNode?
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 尾&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; tail: ListNode?
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;init&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;_&lt;/span&gt; capacity: Int) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; max_size = capacity
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;_&lt;/span&gt; key: Int) -&amp;gt; Int {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; node = cache[key] {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; moveToHead(node: node)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; node.value
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;put&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;_&lt;/span&gt; key: Int, &lt;span style="color:#66d9ef"&gt;_&lt;/span&gt; value: Int) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; node = cache[key] {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; node.value = value
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; moveToHead(node: node)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; node = ListNode(key: key, value: value)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; addNode(node: node)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cache[key] = node
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cur_size &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; cur_size &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; max_size {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; removeTail()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cur_size &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/// 添加节点到头部&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;addNode&lt;/span&gt;(node: ListNode) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.head == &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.head = node
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.tail = node
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; temp = &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.head!
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.head = node
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.head?.next = temp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; temp.prev = &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.head
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/// 移动到头部&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;moveToHead&lt;/span&gt;(node: ListNode) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; node === &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.head {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; prev = node.prev
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; next = node.next
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; prev?.next = next
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; next &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; next!.prev = prev
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.tail = prev
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; origin = &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.head
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.head = node
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.head?.next = origin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; origin?.prev = &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.head
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/// 删除尾部&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; @discardableResult
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;removeTail&lt;/span&gt;() -&amp;gt; ListNode? {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; tail = &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.tail {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cache.removeValue(forKey: tail.key)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.tail = tail.prev
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.tail?.next = &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; tail
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; cache = LRUCache(&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cache.put(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cache.put(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cache.put(&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cache.put(&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(cache.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(cache.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(cache.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(cache.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#34;==========&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cache.put(&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(cache.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(cache.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(cache.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(cache.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(cache.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;print(&amp;#34;==========&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;-1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;==========
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;-1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;-1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;==========
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="dynamic-programming"&gt;Dynamic Programming&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://cloud.tencent.com/developer/article/1822779"&gt;一个例子带你走进动态规划 &amp;ndash; 青蛙跳阶问题&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Swift: Image Picker UIKit in the SwiftUI</title><link>https://yongfrank.github.io/posts/2022-09-28-swift-image-picker-and-uiviewcontroller/</link><pubDate>Wed, 28 Sep 2022 16:37:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-28-swift-image-picker-and-uiviewcontroller/</guid><description>&lt;!-- markdownlint-disable --&gt;
&lt;html&gt;
&lt;head&gt;
&lt;!-- Primary Meta Tags --&gt;
&lt;title&gt;Swift: Image Picker UIKit in the SwiftUI&lt;/title&gt;
&lt;meta name="title" content="Swift: Image Picker UIKit in the SwiftUI"&gt;
&lt;meta name="description" content="Swift: Image Picker UIKit in the SwiftUI"&gt;
&lt;!-- Open Graph / Facebook --&gt;
&lt;meta property="og:type" content="website"&gt;
&lt;meta property="og:url" content="https://yongfrank.github.io/blog/study/2022/09/28/swift-image-picker-and-UIViewController"&gt;
&lt;meta property="og:title" content="Swift: Image Picker UIKit in the SwiftUI"&gt;
&lt;meta property="og:description" content="Swift: Image Picker UIKit in the SwiftUI"&gt;
&lt;meta property="og:image" content="https://raw.githubusercontent.com/yongfrank/blog/main/metadata_img/2022-09-28-swift-image-picker.png"&gt;
&lt;!-- Twitter --&gt;
&lt;meta property="twitter:card" content="summary_large_image"&gt;
&lt;meta property="twitter:url" content="https://yongfrank.github.io/blog/study/2022/09/28/swift-image-picker-and-UIViewController"&gt;
&lt;meta property="twitter:title" content="Swift: Image Picker UIKit in the SwiftUI"&gt;
&lt;meta property="twitter:description" content="Swift: Image Picker UIKit in the SwiftUI"&gt;
&lt;meta property="twitter:image" content="https://raw.githubusercontent.com/yongfrank/blog/main/metadata_img/2022-09-28-swift-image-picker.png"&gt;
&lt;/head&gt;
&lt;/html&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/books/ios-swiftui/wrapping-a-uiviewcontroller-in-a-swiftui-view"&gt;Wrapping a UIViewController in a SwiftUI view&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/books/ios-swiftui/using-coordinators-to-manage-swiftui-view-controllers"&gt;Using coordinators to manage SwiftUI view controllers&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Swift Overloading</title><link>https://yongfrank.github.io/posts/2022-09-24-swift-overloading/</link><pubDate>Sat, 24 Sep 2022 14:28:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-24-swift-overloading/</guid><description>&lt;h2 id="operator-overloading"&gt;Operator Overloading&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/example-code/language/how-to-use-operator-overloading"&gt;how to use operator overloading - Hacking With Swift&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Operator overloading is the practice of adding new operators and modifying existing ones to do different things.&lt;/p&gt;
&lt;p&gt;To create your own operator you need to tell Swift whether it should be prefix (before its operand; the values used with it), postfix (after its operand), or infix. The most common is infix: +, -, *, and more are all infix.&lt;/p&gt;</description></item><item><title>Swift Linked List</title><link>https://yongfrank.github.io/posts/2022-09-23-linkedlist/</link><pubDate>Fri, 23 Sep 2022 11:00:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-23-linkedlist/</guid><description>&lt;!--
 * @Author: Frank Chu
 * @Date: 2022-09-23 11:06:09
 * @LastEditors: Frank Chu
 * @LastEditTime: 2022-09-23 14:00:11
 * @FilePath: /blog/_posts/2022-09-23-linkedlist.md
 * @Description: 
 * 
 * Copyright (c) 2022 by Frank Chu, All Rights Reserved. 
--&gt;
&lt;p&gt;&lt;a href="https://daddycoding.com/2019/08/15/linked-list/"&gt;Linked List by Kelvin Tan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://juejin.cn/post/7035278534037733407"&gt;LinkedList in Swift by DamonLu on juejin.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="definition"&gt;Definition&lt;/h2&gt;
&lt;p&gt;Linked list is a chain of nodes. Nodes have two responsibilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hold a value.&lt;/li&gt;
&lt;li&gt;Hold a reference to the next node in which a nil value represent the end of the list.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="node-and-linkedlist"&gt;Node and LinkedList&lt;/h2&gt;
&lt;p&gt;Node has to be defined in Class, because of the reference.&lt;/p&gt;</description></item><item><title>Swift Network URLSession</title><link>https://yongfrank.github.io/posts/2022-09-23-swift-network/</link><pubDate>Fri, 23 Sep 2022 09:50:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-23-swift-network/</guid><description>&lt;!-- markdownlint-disable --&gt;
&lt;html&gt;
&lt;head&gt;
&lt;!-- Primary Meta Tags --&gt;
&lt;title&gt;Swift Network URLSession&lt;/title&gt;
&lt;meta name="title" content="Swift Network URLSession"&gt;
&lt;meta name="description" content="The URLSession class and related classes provide an API for downloading data from and uploading data to endpoints indicated by URLs."&gt;
&lt;!-- Open Graph / Facebook --&gt;
&lt;meta property="og:type" content="website"&gt;
&lt;meta property="og:url" content="https://yongfrank.github.io/blog/study/2022/09/23/swift-network"&gt;
&lt;meta property="og:title" content="Swift Network URLSession"&gt;
&lt;meta property="og:description" content="The URLSession class and related classes provide an API for downloading data from and uploading data to endpoints indicated by URLs."&gt;
&lt;meta property="og:image" content="https://raw.githubusercontent.com/yongfrank/blog/main/metadata_img/2022-09-23-swift-network.png"&gt;
&lt;!-- Twitter --&gt;
&lt;meta property="twitter:card" content="summary_large_image"&gt;
&lt;meta property="twitter:url" content="https://yongfrank.github.io/blog/study/2022/09/23/swift-network"&gt;
&lt;meta property="twitter:title" content="Swift Network URLSession"&gt;
&lt;meta property="twitter:description" content="The URLSession class and related classes provide an API for downloading data from and uploading data to endpoints indicated by URLs."&gt;
&lt;meta property="twitter:image" content="https://raw.githubusercontent.com/yongfrank/blog/main/metadata_img/2022-09-23-swift-network.png"&gt;
&lt;/head&gt;
&lt;/html&gt;
&lt;!--
 * @Author: Frank Chu
 * @Date: 2022-09-23 08:23:03
 * @LastEditors: Frank Chu
 * @LastEditTime: 2022-09-26 09:44:49
 * @FilePath: /blog/_posts/2022-09-23-swift-network.md
 * @Description: 
 * 
 * Copyright (c) 2022 by Frank Chu, All Rights Reserved. 
--&gt;
&lt;!-- The URLSession class and related classes provide an API for downloading data from and uploading data to endpoints indicated by URLs. Your app can also use this API to perform background downloads when your app isn’t running or, in iOS, while your app is suspended. You can use the related URLSessionDelegate and URLSessionTaskDelegate to support authentication and receive events like redirection and task completion. --&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/books/ios-swiftui/sending-and-receiving-codable-data-with-urlsession-and-swiftui"&gt;Sending and receiving Codable data with URLSession and SwiftUI&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Swift QRCode and Image Processing</title><link>https://yongfrank.github.io/posts/2022-09-22-swift-qrcode-image-processing/</link><pubDate>Thu, 22 Sep 2022 15:50:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-22-swift-qrcode-image-processing/</guid><description>&lt;!--
 * @Author: Frank Chu
 * @Date: 2022-09-22 15:49:57
 * @LastEditors: Frank Chu
 * @LastEditTime: 2022-09-22 18:02:05
 * @FilePath: /blog/_posts/2022-09-22-swift-qrcode-image-processing.md
 * @Description: 
 * 
 * Copyright (c) 2022 by Frank Chu, All Rights Reserved. 
--&gt;
&lt;h2 id="qrcode-generator"&gt;QRCode Generator&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/books/ios-swiftui/generating-and-scaling-up-a-qr-code"&gt;Generating and scaling up a QR code&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// First, we need to bring in all the Core Image filters using a new import:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SwiftUI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CoreImage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CIFilterBuiltins&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;generateQRCode&lt;/span&gt;(from string: String) -&amp;gt; UIImage {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// We need two properties to store an active Core Image context&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; context = CIContext()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// and an instance of Core Image’s QR code generator filter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; filter = CIFilter.qrCodeGenerator()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Working with Core Image filters requires us to provide some input data.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Our input for the filter will be a string, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// but the input for the filter is Data, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// so we need to convert that.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; filter.message = Data(string.utf8)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// then convert the output CIImage into a CGImage, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// then that CGImage into a UIImage.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; outputImage = filter.outputImage {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Return a rect the defines the bounds of non-(0,0,0,0) pixels&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// open var extent: CGRect { get }&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; cgimg = context.createCGImage(outputImage, from: outputImage.extent) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; UIImage(cgImage: cgimg)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// If conversion fails for any reason &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// we’ll send back the “xmark.circle” image from SF Symbols.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// If that can’t be read – which is theoretically possible &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// because SF Symbols is stringly typed – then we’ll send back an empty UIImage.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; UIImage(systemName: &lt;span style="color:#e6db74"&gt;&amp;#34;xmark.circle&amp;#34;&lt;/span&gt;) ?? UIImage()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ContentView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; VStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Image(uiImage: generateQRCode(from: &lt;span style="color:#e6db74"&gt;&amp;#34;apple.com&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// take a close look at the QR code – &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// do you notice how it’s fuzzy? &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// This is because Core Image is generating &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// a tiny image, and SwiftUI is trying to &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// smooth out the pixels as we scale it up.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Line art like QR codes and bar codes is &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// a great candidate for disabling image interpolation. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Try adding and removing .interpolation(.none) modifier &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// to the image to see what I mean:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .interpolation(.&lt;span style="color:#66d9ef"&gt;none&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .resizable()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .scaledToFit()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .frame(width: &lt;span style="color:#ae81ff"&gt;300&lt;/span&gt;, height: &lt;span style="color:#ae81ff"&gt;300&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="extended-reading-materials"&gt;Extended Reading Materials&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/books/ios-swiftui/controlling-image-interpolation-in-swiftui"&gt;Controlling image interpolation in SwiftUI&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Swift throws and rethrows, function as parameter</title><link>https://yongfrank.github.io/posts/2022-09-21-swift-throws-rethrows/</link><pubDate>Wed, 21 Sep 2022 11:31:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-09-21-swift-throws-rethrows/</guid><description>&lt;!--
 * @Author: Frank Chu
 * @Date: 2022-09-19 16:47:12
 * @LastEditors: Frank Chu
 * @LastEditTime: 2022-09-21 11:32:00
 * @FilePath: /blog/_posts/2022-09-21-swift-throws-rethrows.md
 * @Description: 
 * 
 * Copyright (c) 2022 by Frank Chu, All Rights Reserved. 
--&gt;
&lt;h2 id="keyword-throws"&gt;Keyword throws&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/example-code/language/what-is-a-throwing-function"&gt;What is a throwing function?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Throwing functions are those that will flag up errors if problems happen, and Swift requires you to handle those errors in your code.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/quick-start/beginners/how-to-handle-errors-in-functions"&gt;How to handle errors in functions&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Summer Vacation Diary</title><link>https://yongfrank.github.io/posts/2022-07-08-summer-diary/</link><pubDate>Fri, 08 Jul 2022 21:44:13 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-07-08-summer-diary/</guid><description>&lt;h2 id="thu-jul-21"&gt;Thu Jul 21&lt;/h2&gt;
&lt;h3 id="swift"&gt;Swift&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.swiftanytime.com/videoplayer-in-swiftui/"&gt;How to use VideoPlayer in SwiftUI
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mon-jul-18"&gt;Mon Jul 18&lt;/h2&gt;
&lt;h3 id="swift-1"&gt;Swift&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=biG7RnRR9Pg"&gt;Parse HTML in Swift 5 (HTMLKit) - Xcode 11, 2020, iOS Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fri-jul-16"&gt;Fri Jul 16&lt;/h2&gt;
&lt;h3 id="swift-2"&gt;Swift&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=pUAcMruIBGg"&gt;FileManager Swift 5 Tutorials&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.hackingwithswift.com/100/18"&gt;Strom Viewer - Project 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=tnOVnwbkAA0"&gt;iOS 14 Beta 6 File Importer &amp;amp; File Exporter - SwiftUI 2.0 Document Picker
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="leetcode"&gt;LeetCode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1Jb411i7ue?share_source=copy_web&amp;amp;vd_source=bf4952280cde801b178268abc99a7047"&gt;LeetCode in Python 13. Roman to Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ecmadao/algorithms/blob/master/leetcode/Swift/No13.roman-to-integer.swift"&gt;LeetCode in Swift 13. Roman to Integer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="thu-jul-14"&gt;Thu Jul 14&lt;/h2&gt;
&lt;h3 id="git"&gt;Git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/kevingrace/p/5896706.html"&gt;git pull and git pull &amp;ndash;rebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.liaoxuefeng.com/wiki/896043488029600/897271968352576"&gt;git tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fri-jul-8"&gt;Fri Jul 8&lt;/h2&gt;
&lt;h3 id="vapor"&gt;Vapor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/CD283bLteP0"&gt;Getting Started with Vapor 4&lt;/a&gt; - CodeWithChris&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>CS61A fun part, 2022 summer</title><link>https://yongfrank.github.io/posts/2022-06-28-cs61a-fun-part/</link><pubDate>Tue, 28 Jun 2022 10:16:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-06-28-cs61a-fun-part/</guid><description>&lt;h1 id="chapter-1-building-abstractions-with-functions"&gt;CHAPTER 1 Building Abstractions with Functions&lt;/h1&gt;
&lt;h2 id="object-set-function"&gt;Object, Set, Function&lt;/h2&gt;
&lt;p&gt;In the &lt;a href="http://composingprograms.com/pages/11-getting-started.html"&gt;composing programs&lt;/a&gt;, there is an assignment statement.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; urllib.request &lt;span style="color:#f92672"&gt;import&lt;/span&gt; urlopen
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;shakespeare &lt;span style="color:#f92672"&gt;=&lt;/span&gt; urlopen(&lt;span style="color:#e6db74"&gt;&amp;#39;http://composingprograms.com/shakespeare.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# This statement is to save all words in Set words by words&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;words &lt;span style="color:#f92672"&gt;=&lt;/span&gt; set(shakespeare&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decode()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# {} means Set, and it will print all words in &amp;#34;words&amp;#34; above&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print({w &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; w &lt;span style="color:#f92672"&gt;in&lt;/span&gt; words})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# [::-1] enumerate each letter in a words, but -1 dictates to step backwards. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# It will print &amp;#39;olleh&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;a &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(a[::&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Then, let&amp;#39;s add some conditions. We want some words like &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# &amp;#39;reward&amp;#39;, &amp;#39;drawer&amp;#39; in the article, and the length of words is 6.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;conditionWords &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {w &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; w &lt;span style="color:#f92672"&gt;in&lt;/span&gt; words &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(w) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt; &lt;span style="color:#f92672"&gt;and&lt;/span&gt; w[::&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;in&lt;/span&gt; words}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="15-control-short-circuiting"&gt;1.5 Control: Short-circuiting&lt;/h2&gt;
&lt;p&gt;Truth value of a logical expression can be determined without evaluating all of its subexpressions.&lt;/p&gt;</description></item><item><title>My First Post</title><link>https://yongfrank.github.io/posts/2022-06-25-my-first-post/</link><pubDate>Sat, 25 Jun 2022 22:55:05 +0000</pubDate><guid>https://yongfrank.github.io/posts/2022-06-25-my-first-post/</guid><description>&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;helloWorld&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;Hi, my name is Frank&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title/><link>https://yongfrank.github.io/posts/fast-design-for-developers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yongfrank.github.io/posts/fast-design-for-developers/</guid><description/></item></channel></rss>